
STM32_NUCLEO_NRF24_Rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096d4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  080097e8  080097e8  0000a7e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cac  08009cac  0000b1dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009cac  08009cac  0000acac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cb4  08009cb4  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cb4  08009cb4  0000acb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009cb8  08009cb8  0000acb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08009cbc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  200001dc  08009e98  0000b1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  08009e98  0000b4c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ade8  00000000  00000000  0000b205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002052  00000000  00000000  00015fed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  00018040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007d7  00000000  00000000  00018a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000329b  00000000  00000000  0001925f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf6f  00000000  00000000  0001c4fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086003  00000000  00000000  00028469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ae46c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004130  00000000  00000000  000ae4b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000b25e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080097cc 	.word	0x080097cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080097cc 	.word	0x080097cc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <__aeabi_d2lz>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	2200      	movs	r2, #0
 8001074:	2300      	movs	r3, #0
 8001076:	4604      	mov	r4, r0
 8001078:	460d      	mov	r5, r1
 800107a:	f7ff fc9f 	bl	80009bc <__aeabi_dcmplt>
 800107e:	b928      	cbnz	r0, 800108c <__aeabi_d2lz+0x1c>
 8001080:	4620      	mov	r0, r4
 8001082:	4629      	mov	r1, r5
 8001084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001088:	f000 b80a 	b.w	80010a0 <__aeabi_d2ulz>
 800108c:	4620      	mov	r0, r4
 800108e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001092:	f000 f805 	bl	80010a0 <__aeabi_d2ulz>
 8001096:	4240      	negs	r0, r0
 8001098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800109c:	bd38      	pop	{r3, r4, r5, pc}
 800109e:	bf00      	nop

080010a0 <__aeabi_d2ulz>:
 80010a0:	b5d0      	push	{r4, r6, r7, lr}
 80010a2:	2200      	movs	r2, #0
 80010a4:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <__aeabi_d2ulz+0x34>)
 80010a6:	4606      	mov	r6, r0
 80010a8:	460f      	mov	r7, r1
 80010aa:	f7ff fa15 	bl	80004d8 <__aeabi_dmul>
 80010ae:	f7ff fceb 	bl	8000a88 <__aeabi_d2uiz>
 80010b2:	4604      	mov	r4, r0
 80010b4:	f7ff f996 	bl	80003e4 <__aeabi_ui2d>
 80010b8:	2200      	movs	r2, #0
 80010ba:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <__aeabi_d2ulz+0x38>)
 80010bc:	f7ff fa0c 	bl	80004d8 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4630      	mov	r0, r6
 80010c6:	4639      	mov	r1, r7
 80010c8:	f7ff f84e 	bl	8000168 <__aeabi_dsub>
 80010cc:	f7ff fcdc 	bl	8000a88 <__aeabi_d2uiz>
 80010d0:	4621      	mov	r1, r4
 80010d2:	bdd0      	pop	{r4, r6, r7, pc}
 80010d4:	3df00000 	.word	0x3df00000
 80010d8:	41f00000 	.word	0x41f00000

080010dc <nmeaToDecimal>:
uint8_t rxIndex = 0;
uint8_t rxDataGPS;
float decimalLat, decimalLong;


float nmeaToDecimal(float coordinate) {
 80010dc:	b590      	push	{r4, r7, lr}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
    int degree = (int)(coordinate / 100);
 80010e4:	4914      	ldr	r1, [pc, #80]	@ (8001138 <nmeaToDecimal+0x5c>)
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ff00 	bl	8000eec <__aeabi_fdiv>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ff98 	bl	8001024 <__aeabi_f2iz>
 80010f4:	4603      	mov	r3, r0
 80010f6:	60fb      	str	r3, [r7, #12]
    return degree + (coordinate - degree * 100) / 60;
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f7ff fdef 	bl	8000cdc <__aeabi_i2f>
 80010fe:	4604      	mov	r4, r0
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2264      	movs	r2, #100	@ 0x64
 8001104:	fb02 f303 	mul.w	r3, r2, r3
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fde7 	bl	8000cdc <__aeabi_i2f>
 800110e:	4603      	mov	r3, r0
 8001110:	4619      	mov	r1, r3
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff fd2c 	bl	8000b70 <__aeabi_fsub>
 8001118:	4603      	mov	r3, r0
 800111a:	4908      	ldr	r1, [pc, #32]	@ (800113c <nmeaToDecimal+0x60>)
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fee5 	bl	8000eec <__aeabi_fdiv>
 8001122:	4603      	mov	r3, r0
 8001124:	4619      	mov	r1, r3
 8001126:	4620      	mov	r0, r4
 8001128:	f7ff fd24 	bl	8000b74 <__addsf3>
 800112c:	4603      	mov	r3, r0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	bd90      	pop	{r4, r7, pc}
 8001136:	bf00      	nop
 8001138:	42c80000 	.word	0x42c80000
 800113c:	42700000 	.word	0x42700000

08001140 <gpsParse>:


void gpsParse(char *nmeaSentence) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
    if (strncmp(nmeaSentence, "$GPGGA", 6) == 0) {
 8001148:	2206      	movs	r2, #6
 800114a:	4910      	ldr	r1, [pc, #64]	@ (800118c <gpsParse+0x4c>)
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f005 f9f9 	bl	8006544 <strncmp>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d115      	bne.n	8001184 <gpsParse+0x44>
        float nmeaLat, nmeaLong;
        sscanf(nmeaSentence, "$GPGGA,%*f,%f,%*c,%f", &nmeaLat, &nmeaLong);
 8001158:	f107 0308 	add.w	r3, r7, #8
 800115c:	f107 020c 	add.w	r2, r7, #12
 8001160:	490b      	ldr	r1, [pc, #44]	@ (8001190 <gpsParse+0x50>)
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f004 fa2c 	bl	80055c0 <siscanf>
        decimalLat = nmeaToDecimal(nmeaLat);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ffb6 	bl	80010dc <nmeaToDecimal>
 8001170:	4603      	mov	r3, r0
 8001172:	4a08      	ldr	r2, [pc, #32]	@ (8001194 <gpsParse+0x54>)
 8001174:	6013      	str	r3, [r2, #0]
        decimalLong = nmeaToDecimal(nmeaLong);
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ffaf 	bl	80010dc <nmeaToDecimal>
 800117e:	4603      	mov	r3, r0
 8001180:	4a05      	ldr	r2, [pc, #20]	@ (8001198 <gpsParse+0x58>)
 8001182:	6013      	str	r3, [r2, #0]
    }
}
 8001184:	bf00      	nop
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	080097e8 	.word	0x080097e8
 8001190:	080097f0 	.word	0x080097f0
 8001194:	2000027c 	.word	0x2000027c
 8001198:	20000280 	.word	0x20000280

0800119c <gpsGetGoogleMapsLink>:


void gpsGetGoogleMapsLink(char *linkBuffer) {
 800119c:	b5b0      	push	{r4, r5, r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af02      	add	r7, sp, #8
 80011a2:	6078      	str	r0, [r7, #4]
    sprintf(linkBuffer, "%f,%f", decimalLat, decimalLong);
 80011a4:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <gpsGetGoogleMapsLink+0x3c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f93d 	bl	8000428 <__aeabi_f2d>
 80011ae:	4604      	mov	r4, r0
 80011b0:	460d      	mov	r5, r1
 80011b2:	4b0a      	ldr	r3, [pc, #40]	@ (80011dc <gpsGetGoogleMapsLink+0x40>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f936 	bl	8000428 <__aeabi_f2d>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	e9cd 2300 	strd	r2, r3, [sp]
 80011c4:	4622      	mov	r2, r4
 80011c6:	462b      	mov	r3, r5
 80011c8:	4905      	ldr	r1, [pc, #20]	@ (80011e0 <gpsGetGoogleMapsLink+0x44>)
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f004 f9d8 	bl	8005580 <siprintf>

}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bdb0      	pop	{r4, r5, r7, pc}
 80011d8:	2000027c 	.word	0x2000027c
 80011dc:	20000280 	.word	0x20000280
 80011e0:	08009808 	.word	0x08009808

080011e4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a15      	ldr	r2, [pc, #84]	@ (8001248 <HAL_UART_RxCpltCallback+0x64>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d124      	bne.n	8001240 <HAL_UART_RxCpltCallback+0x5c>
        if (rxDataGPS != '\n' && rxIndex < sizeof(rxBuffer)) {
 80011f6:	4b15      	ldr	r3, [pc, #84]	@ (800124c <HAL_UART_RxCpltCallback+0x68>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b0a      	cmp	r3, #10
 80011fc:	d010      	beq.n	8001220 <HAL_UART_RxCpltCallback+0x3c>
 80011fe:	4b14      	ldr	r3, [pc, #80]	@ (8001250 <HAL_UART_RxCpltCallback+0x6c>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b25b      	sxtb	r3, r3
 8001204:	2b00      	cmp	r3, #0
 8001206:	db0b      	blt.n	8001220 <HAL_UART_RxCpltCallback+0x3c>
            rxBuffer[rxIndex++] = rxDataGPS;
 8001208:	4b11      	ldr	r3, [pc, #68]	@ (8001250 <HAL_UART_RxCpltCallback+0x6c>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	1c5a      	adds	r2, r3, #1
 800120e:	b2d1      	uxtb	r1, r2
 8001210:	4a0f      	ldr	r2, [pc, #60]	@ (8001250 <HAL_UART_RxCpltCallback+0x6c>)
 8001212:	7011      	strb	r1, [r2, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4b0d      	ldr	r3, [pc, #52]	@ (800124c <HAL_UART_RxCpltCallback+0x68>)
 8001218:	7819      	ldrb	r1, [r3, #0]
 800121a:	4b0e      	ldr	r3, [pc, #56]	@ (8001254 <HAL_UART_RxCpltCallback+0x70>)
 800121c:	5499      	strb	r1, [r3, r2]
 800121e:	e00a      	b.n	8001236 <HAL_UART_RxCpltCallback+0x52>
        } else {
            gpsParse(rxBuffer);
 8001220:	480c      	ldr	r0, [pc, #48]	@ (8001254 <HAL_UART_RxCpltCallback+0x70>)
 8001222:	f7ff ff8d 	bl	8001140 <gpsParse>
            rxIndex = 0;
 8001226:	4b0a      	ldr	r3, [pc, #40]	@ (8001250 <HAL_UART_RxCpltCallback+0x6c>)
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
            memset(rxBuffer, 0, sizeof(rxBuffer));
 800122c:	2280      	movs	r2, #128	@ 0x80
 800122e:	2100      	movs	r1, #0
 8001230:	4808      	ldr	r0, [pc, #32]	@ (8001254 <HAL_UART_RxCpltCallback+0x70>)
 8001232:	f005 f999 	bl	8006568 <memset>
        }
        HAL_UART_Receive_IT(&huart1, &rxDataGPS, 1);
 8001236:	2201      	movs	r2, #1
 8001238:	4904      	ldr	r1, [pc, #16]	@ (800124c <HAL_UART_RxCpltCallback+0x68>)
 800123a:	4807      	ldr	r0, [pc, #28]	@ (8001258 <HAL_UART_RxCpltCallback+0x74>)
 800123c:	f002 fdfd 	bl	8003e3a <HAL_UART_Receive_IT>
    }
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40013800 	.word	0x40013800
 800124c:	20000279 	.word	0x20000279
 8001250:	20000278 	.word	0x20000278
 8001254:	200001f8 	.word	0x200001f8
 8001258:	20000324 	.word	0x20000324

0800125c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001264:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001268:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	2b00      	cmp	r3, #0
 8001272:	d013      	beq.n	800129c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001274:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001278:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800127c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001280:	2b00      	cmp	r3, #0
 8001282:	d00b      	beq.n	800129c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001284:	e000      	b.n	8001288 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001286:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001288:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0f9      	beq.n	8001286 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001292:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800129c:	687b      	ldr	r3, [r7, #4]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr

080012a8 <receiver>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void receiver()
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0

 /* USER CODE BEGIN 2 */
 nrfRx.CE_port = NRF_CE_GPIO_Port;
 80012ac:	4b13      	ldr	r3, [pc, #76]	@ (80012fc <receiver+0x54>)
 80012ae:	4a14      	ldr	r2, [pc, #80]	@ (8001300 <receiver+0x58>)
 80012b0:	609a      	str	r2, [r3, #8]
 nrfRx.CE_pin = NRF_CE_Pin;
 80012b2:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <receiver+0x54>)
 80012b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012b8:	819a      	strh	r2, [r3, #12]
 nrfRx.CSN_port = NRF_CSN_GPIO_Port;
 80012ba:	4b10      	ldr	r3, [pc, #64]	@ (80012fc <receiver+0x54>)
 80012bc:	4a10      	ldr	r2, [pc, #64]	@ (8001300 <receiver+0x58>)
 80012be:	601a      	str	r2, [r3, #0]
 nrfRx.CSN_pin = NRF_CSN_Pin;
 80012c0:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <receiver+0x54>)
 80012c2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012c6:	809a      	strh	r2, [r3, #4]

 nrfRx.hSPIx = &hspi2;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	@ (80012fc <receiver+0x54>)
 80012ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001304 <receiver+0x5c>)
 80012cc:	619a      	str	r2, [r3, #24]
 NRF24_Init(&nrfRx);
 80012ce:	480b      	ldr	r0, [pc, #44]	@ (80012fc <receiver+0x54>)
 80012d0:	f000 f9ce 	bl	8001670 <NRF24_Init>
 NRF24_Set_DataRate(&nrfRx, _250KBS);
 80012d4:	2100      	movs	r1, #0
 80012d6:	4809      	ldr	r0, [pc, #36]	@ (80012fc <receiver+0x54>)
 80012d8:	f000 fa04 	bl	80016e4 <NRF24_Set_DataRate>
 NRF24_Set_PALevel(&nrfRx, HIGH);
 80012dc:	2103      	movs	r1, #3
 80012de:	4807      	ldr	r0, [pc, #28]	@ (80012fc <receiver+0x54>)
 80012e0:	f000 fa4c 	bl	800177c <NRF24_Set_PALevel>
 NRF24_Set_RxPipe(&nrfRx, rxAddr, 0, SIZE_RX_BUF);
 80012e4:	2304      	movs	r3, #4
 80012e6:	2200      	movs	r2, #0
 80012e8:	4907      	ldr	r1, [pc, #28]	@ (8001308 <receiver+0x60>)
 80012ea:	4804      	ldr	r0, [pc, #16]	@ (80012fc <receiver+0x54>)
 80012ec:	f000 fb06 	bl	80018fc <NRF24_Set_RxPipe>
 NRF24_Set_Mode(&nrfRx, RX_MODE);
 80012f0:	2103      	movs	r1, #3
 80012f2:	4802      	ldr	r0, [pc, #8]	@ (80012fc <receiver+0x54>)
 80012f4:	f000 fab0 	bl	8001858 <NRF24_Set_Mode>
}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000284 	.word	0x20000284
 8001300:	40010c00 	.word	0x40010c00
 8001304:	200002cc 	.word	0x200002cc
 8001308:	20000000 	.word	0x20000000

0800130c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001310:	f000 ff8a 	bl	8002228 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001314:	f000 f864 	bl	80013e0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init();
 8001318:	f000 f906 	bl	8001528 <MX_GPIO_Init>
  MX_SPI2_Init();
 800131c:	f000 f8a4 	bl	8001468 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001320:	f000 f8d8 	bl	80014d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  receiver();
 8001324:	f7ff ffc0 	bl	80012a8 <receiver>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Receive_IT(&huart1, &rxDataGPS, 1);
 8001328:	2201      	movs	r2, #1
 800132a:	4924      	ldr	r1, [pc, #144]	@ (80013bc <main+0xb0>)
 800132c:	4824      	ldr	r0, [pc, #144]	@ (80013c0 <main+0xb4>)
 800132e:	f002 fd84 	bl	8003e3a <HAL_UART_Receive_IT>




	  if(NRF24_Available(&nrfRx, 0) == 1)
 8001332:	2100      	movs	r1, #0
 8001334:	4823      	ldr	r0, [pc, #140]	@ (80013c4 <main+0xb8>)
 8001336:	f000 fb75 	bl	8001a24 <NRF24_Available>
 800133a:	4603      	mov	r3, r0
 800133c:	2b01      	cmp	r3, #1
 800133e:	d1f3      	bne.n	8001328 <main+0x1c>
	{
		  NRF24_Receive(&nrfRx, rx_data, SIZE_RX_BUF);
 8001340:	2204      	movs	r2, #4
 8001342:	4921      	ldr	r1, [pc, #132]	@ (80013c8 <main+0xbc>)
 8001344:	481f      	ldr	r0, [pc, #124]	@ (80013c4 <main+0xb8>)
 8001346:	f000 fb9d 	bl	8001a84 <NRF24_Receive>
		  HAL_GPIO_TogglePin(LedOk_GPIO_Port, LedOk_Pin);
 800134a:	2120      	movs	r1, #32
 800134c:	481f      	ldr	r0, [pc, #124]	@ (80013cc <main+0xc0>)
 800134e:	f001 fb57 	bl	8002a00 <HAL_GPIO_TogglePin>
		  HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, rx_data[0]);
 8001352:	4b1d      	ldr	r3, [pc, #116]	@ (80013c8 <main+0xbc>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	2140      	movs	r1, #64	@ 0x40
 800135a:	481c      	ldr	r0, [pc, #112]	@ (80013cc <main+0xc0>)
 800135c:	f001 fb38 	bl	80029d0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, rx_data[1]);
 8001360:	4b19      	ldr	r3, [pc, #100]	@ (80013c8 <main+0xbc>)
 8001362:	785b      	ldrb	r3, [r3, #1]
 8001364:	461a      	mov	r2, r3
 8001366:	2180      	movs	r1, #128	@ 0x80
 8001368:	4818      	ldr	r0, [pc, #96]	@ (80013cc <main+0xc0>)
 800136a:	f001 fb31 	bl	80029d0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led3_GPIO_Port, Led3_Pin, rx_data[2]);
 800136e:	4b16      	ldr	r3, [pc, #88]	@ (80013c8 <main+0xbc>)
 8001370:	789b      	ldrb	r3, [r3, #2]
 8001372:	461a      	mov	r2, r3
 8001374:	2110      	movs	r1, #16
 8001376:	4816      	ldr	r0, [pc, #88]	@ (80013d0 <main+0xc4>)
 8001378:	f001 fb2a 	bl	80029d0 <HAL_GPIO_WritePin>

		  if(rx_data[3] == 1)
 800137c:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <main+0xbc>)
 800137e:	78db      	ldrb	r3, [r3, #3]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d1d1      	bne.n	8001328 <main+0x1c>
		  {
			  if(HAL_GetTick()-LastGPS_Update>= 10000)
 8001384:	f000 ffa8 	bl	80022d8 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	4b12      	ldr	r3, [pc, #72]	@ (80013d4 <main+0xc8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001394:	4293      	cmp	r3, r2
 8001396:	d9c7      	bls.n	8001328 <main+0x1c>
			  {
				  gpsGetGoogleMapsLink(googleMapsLink);
 8001398:	480f      	ldr	r0, [pc, #60]	@ (80013d8 <main+0xcc>)
 800139a:	f7ff feff 	bl	800119c <gpsGetGoogleMapsLink>
				  printf("Google Maps Link: %s\n", googleMapsLink);
 800139e:	490e      	ldr	r1, [pc, #56]	@ (80013d8 <main+0xcc>)
 80013a0:	480e      	ldr	r0, [pc, #56]	@ (80013dc <main+0xd0>)
 80013a2:	f005 f8bd 	bl	8006520 <iprintf>

			      LastGPS_Update = HAL_GetTickFreq();
 80013a6:	f000 ffa1 	bl	80022ec <HAL_GetTickFreq>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <main+0xc8>)
 80013b0:	601a      	str	r2, [r3, #0]
			      HAL_Delay(20);
 80013b2:	2014      	movs	r0, #20
 80013b4:	f000 ffa4 	bl	8002300 <HAL_Delay>
	  HAL_UART_Receive_IT(&huart1, &rxDataGPS, 1);
 80013b8:	e7b6      	b.n	8001328 <main+0x1c>
 80013ba:	bf00      	nop
 80013bc:	20000279 	.word	0x20000279
 80013c0:	20000324 	.word	0x20000324
 80013c4:	20000284 	.word	0x20000284
 80013c8:	200002a4 	.word	0x200002a4
 80013cc:	40010800 	.word	0x40010800
 80013d0:	40011000 	.word	0x40011000
 80013d4:	200002a8 	.word	0x200002a8
 80013d8:	200002ac 	.word	0x200002ac
 80013dc:	08009810 	.word	0x08009810

080013e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b090      	sub	sp, #64	@ 0x40
 80013e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013e6:	f107 0318 	add.w	r3, r7, #24
 80013ea:	2228      	movs	r2, #40	@ 0x28
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f005 f8ba 	bl	8006568 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
 8001400:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001402:	2301      	movs	r3, #1
 8001404:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001406:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800140a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800140c:	2300      	movs	r3, #0
 800140e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001410:	2301      	movs	r3, #1
 8001412:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001414:	2302      	movs	r3, #2
 8001416:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001418:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800141c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800141e:	2300      	movs	r3, #0
 8001420:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001422:	f107 0318 	add.w	r3, r7, #24
 8001426:	4618      	mov	r0, r3
 8001428:	f001 fb04 	bl	8002a34 <HAL_RCC_OscConfig>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8001432:	f000 f917 	bl	8001664 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001436:	230f      	movs	r3, #15
 8001438:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800143a:	2302      	movs	r3, #2
 800143c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f001 fd72 	bl	8002f38 <HAL_RCC_ClockConfig>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800145a:	f000 f903 	bl	8001664 <Error_Handler>
  }
}
 800145e:	bf00      	nop
 8001460:	3740      	adds	r7, #64	@ 0x40
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800146c:	4b17      	ldr	r3, [pc, #92]	@ (80014cc <MX_SPI2_Init+0x64>)
 800146e:	4a18      	ldr	r2, [pc, #96]	@ (80014d0 <MX_SPI2_Init+0x68>)
 8001470:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001472:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <MX_SPI2_Init+0x64>)
 8001474:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001478:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800147a:	4b14      	ldr	r3, [pc, #80]	@ (80014cc <MX_SPI2_Init+0x64>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001480:	4b12      	ldr	r3, [pc, #72]	@ (80014cc <MX_SPI2_Init+0x64>)
 8001482:	2200      	movs	r2, #0
 8001484:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001486:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <MX_SPI2_Init+0x64>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800148c:	4b0f      	ldr	r3, [pc, #60]	@ (80014cc <MX_SPI2_Init+0x64>)
 800148e:	2200      	movs	r2, #0
 8001490:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001492:	4b0e      	ldr	r3, [pc, #56]	@ (80014cc <MX_SPI2_Init+0x64>)
 8001494:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001498:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800149a:	4b0c      	ldr	r3, [pc, #48]	@ (80014cc <MX_SPI2_Init+0x64>)
 800149c:	2200      	movs	r2, #0
 800149e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014a0:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <MX_SPI2_Init+0x64>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014a6:	4b09      	ldr	r3, [pc, #36]	@ (80014cc <MX_SPI2_Init+0x64>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014ac:	4b07      	ldr	r3, [pc, #28]	@ (80014cc <MX_SPI2_Init+0x64>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80014b2:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <MX_SPI2_Init+0x64>)
 80014b4:	220a      	movs	r2, #10
 80014b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014b8:	4804      	ldr	r0, [pc, #16]	@ (80014cc <MX_SPI2_Init+0x64>)
 80014ba:	f001 fecb 	bl	8003254 <HAL_SPI_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80014c4:	f000 f8ce 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200002cc 	.word	0x200002cc
 80014d0:	40003800 	.word	0x40003800

080014d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014d8:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <MX_USART1_UART_Init+0x4c>)
 80014da:	4a12      	ldr	r2, [pc, #72]	@ (8001524 <MX_USART1_UART_Init+0x50>)
 80014dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80014de:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <MX_USART1_UART_Init+0x4c>)
 80014e0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80014e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001520 <MX_USART1_UART_Init+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001520 <MX_USART1_UART_Init+0x4c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001520 <MX_USART1_UART_Init+0x4c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014f8:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <MX_USART1_UART_Init+0x4c>)
 80014fa:	220c      	movs	r2, #12
 80014fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fe:	4b08      	ldr	r3, [pc, #32]	@ (8001520 <MX_USART1_UART_Init+0x4c>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001504:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <MX_USART1_UART_Init+0x4c>)
 8001506:	2200      	movs	r2, #0
 8001508:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800150a:	4805      	ldr	r0, [pc, #20]	@ (8001520 <MX_USART1_UART_Init+0x4c>)
 800150c:	f002 fc45 	bl	8003d9a <HAL_UART_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001516:	f000 f8a5 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000324 	.word	0x20000324
 8001524:	40013800 	.word	0x40013800

08001528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152e:	f107 0310 	add.w	r3, r7, #16
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800153c:	4b37      	ldr	r3, [pc, #220]	@ (800161c <MX_GPIO_Init+0xf4>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	4a36      	ldr	r2, [pc, #216]	@ (800161c <MX_GPIO_Init+0xf4>)
 8001542:	f043 0320 	orr.w	r3, r3, #32
 8001546:	6193      	str	r3, [r2, #24]
 8001548:	4b34      	ldr	r3, [pc, #208]	@ (800161c <MX_GPIO_Init+0xf4>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f003 0320 	and.w	r3, r3, #32
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001554:	4b31      	ldr	r3, [pc, #196]	@ (800161c <MX_GPIO_Init+0xf4>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	4a30      	ldr	r2, [pc, #192]	@ (800161c <MX_GPIO_Init+0xf4>)
 800155a:	f043 0304 	orr.w	r3, r3, #4
 800155e:	6193      	str	r3, [r2, #24]
 8001560:	4b2e      	ldr	r3, [pc, #184]	@ (800161c <MX_GPIO_Init+0xf4>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800156c:	4b2b      	ldr	r3, [pc, #172]	@ (800161c <MX_GPIO_Init+0xf4>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	4a2a      	ldr	r2, [pc, #168]	@ (800161c <MX_GPIO_Init+0xf4>)
 8001572:	f043 0310 	orr.w	r3, r3, #16
 8001576:	6193      	str	r3, [r2, #24]
 8001578:	4b28      	ldr	r3, [pc, #160]	@ (800161c <MX_GPIO_Init+0xf4>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	f003 0310 	and.w	r3, r3, #16
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001584:	4b25      	ldr	r3, [pc, #148]	@ (800161c <MX_GPIO_Init+0xf4>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	4a24      	ldr	r2, [pc, #144]	@ (800161c <MX_GPIO_Init+0xf4>)
 800158a:	f043 0308 	orr.w	r3, r3, #8
 800158e:	6193      	str	r3, [r2, #24]
 8001590:	4b22      	ldr	r3, [pc, #136]	@ (800161c <MX_GPIO_Init+0xf4>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	603b      	str	r3, [r7, #0]
 800159a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LedOk_Pin|Led1_Pin|Led2_Pin, GPIO_PIN_RESET);
 800159c:	2200      	movs	r2, #0
 800159e:	21e0      	movs	r1, #224	@ 0xe0
 80015a0:	481f      	ldr	r0, [pc, #124]	@ (8001620 <MX_GPIO_Init+0xf8>)
 80015a2:	f001 fa15 	bl	80029d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led3_GPIO_Port, Led3_Pin, GPIO_PIN_RESET);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2110      	movs	r1, #16
 80015aa:	481e      	ldr	r0, [pc, #120]	@ (8001624 <MX_GPIO_Init+0xfc>)
 80015ac:	f001 fa10 	bl	80029d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 80015b0:	2200      	movs	r2, #0
 80015b2:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80015b6:	481c      	ldr	r0, [pc, #112]	@ (8001628 <MX_GPIO_Init+0x100>)
 80015b8:	f001 fa0a 	bl	80029d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LedOk_Pin Led1_Pin Led2_Pin */
  GPIO_InitStruct.Pin = LedOk_Pin|Led1_Pin|Led2_Pin;
 80015bc:	23e0      	movs	r3, #224	@ 0xe0
 80015be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c0:	2301      	movs	r3, #1
 80015c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2302      	movs	r3, #2
 80015ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015cc:	f107 0310 	add.w	r3, r7, #16
 80015d0:	4619      	mov	r1, r3
 80015d2:	4813      	ldr	r0, [pc, #76]	@ (8001620 <MX_GPIO_Init+0xf8>)
 80015d4:	f001 f878 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Led3_Pin */
  GPIO_InitStruct.Pin = Led3_Pin;
 80015d8:	2310      	movs	r3, #16
 80015da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015dc:	2301      	movs	r3, #1
 80015de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e4:	2302      	movs	r3, #2
 80015e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led3_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	4619      	mov	r1, r3
 80015ee:	480d      	ldr	r0, [pc, #52]	@ (8001624 <MX_GPIO_Init+0xfc>)
 80015f0:	f001 f86a 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CE_Pin NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin;
 80015f4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80015f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fa:	2301      	movs	r3, #1
 80015fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2302      	movs	r3, #2
 8001604:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001606:	f107 0310 	add.w	r3, r7, #16
 800160a:	4619      	mov	r1, r3
 800160c:	4806      	ldr	r0, [pc, #24]	@ (8001628 <MX_GPIO_Init+0x100>)
 800160e:	f001 f85b 	bl	80026c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001612:	bf00      	nop
 8001614:	3720      	adds	r7, #32
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000
 8001620:	40010800 	.word	0x40010800
 8001624:	40011000 	.word	0x40011000
 8001628:	40010c00 	.word	0x40010c00

0800162c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	e009      	b.n	8001652 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	60ba      	str	r2, [r7, #8]
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fe08 	bl	800125c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	3301      	adds	r3, #1
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	429a      	cmp	r2, r3
 8001658:	dbf1      	blt.n	800163e <_write+0x12>
  }
  return len;
 800165a:	687b      	ldr	r3, [r7, #4]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001668:	b672      	cpsid	i
}
 800166a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <Error_Handler+0x8>

08001670 <NRF24_Init>:
static void NRF24_Read_Buffer(nrf24 *node, uint8_t reg, uint8_t *data, uint16_t len);
static void NRF24_Send_Cmd(nrf24 *node, uint8_t cmd);
static void NRF24_Reset(nrf24 *node, uint8_t reg);

void NRF24_Init(nrf24 *node)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	NRF24_CE_Disable(node);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 fa55 	bl	8001b28 <NRF24_CE_Disable>
	NRF24_Write_Reg(node, CONFIG, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2100      	movs	r1, #0
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 fa80 	bl	8001b88 <NRF24_Write_Reg>
	node->crc = NO_CRC;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	77da      	strb	r2, [r3, #31]
	NRF24_Write_Reg(node, EN_AA, 0x00);
 800168e:	2200      	movs	r2, #0
 8001690:	2101      	movs	r1, #1
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 fa78 	bl	8001b88 <NRF24_Write_Reg>
	NRF24_Write_Reg(node, EN_RXADDR, 0x00);
 8001698:	2200      	movs	r2, #0
 800169a:	2102      	movs	r1, #2
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f000 fa73 	bl	8001b88 <NRF24_Write_Reg>
	NRF24_Write_Reg(node, SETUP_AW, 0x03);
 80016a2:	2203      	movs	r2, #3
 80016a4:	2103      	movs	r1, #3
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 fa6e 	bl	8001b88 <NRF24_Write_Reg>
	NRF24_Write_Reg(node, SETUP_RETR, 0);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2104      	movs	r1, #4
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 fa69 	bl	8001b88 <NRF24_Write_Reg>
	NRF24_Set_DataRate(node, _250KBS);
 80016b6:	2100      	movs	r1, #0
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 f813 	bl	80016e4 <NRF24_Set_DataRate>
	NRF24_Set_PALevel(node, HIGH);
 80016be:	2103      	movs	r1, #3
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 f85b 	bl	800177c <NRF24_Set_PALevel>
	NRF24_Set_Channel(node, DEFAULT_CHANNEL);
 80016c6:	2164      	movs	r1, #100	@ 0x64
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 f8af 	bl	800182c <NRF24_Set_Channel>
	NRF24_Set_Mode(node, STANDBY);
 80016ce:	2101      	movs	r1, #1
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 f8c1 	bl	8001858 <NRF24_Set_Mode>
	NRF24_CE_Enable(node);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 fa16 	bl	8001b08 <NRF24_CE_Enable>
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <NRF24_Set_DataRate>:

void NRF24_Set_DataRate(nrf24 *node, dat_rate _bitRate)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	70fb      	strb	r3, [r7, #3]
	NRF24_CE_Disable(node);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 fa19 	bl	8001b28 <NRF24_CE_Disable>
	uint8_t config = NRF24_Read_Reg(node, RF_SETUP);
 80016f6:	2106      	movs	r1, #6
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 faac 	bl	8001c56 <NRF24_Read_Reg>
 80016fe:	4603      	mov	r3, r0
 8001700:	73fb      	strb	r3, [r7, #15]

	switch (_bitRate)
 8001702:	78fb      	ldrb	r3, [r7, #3]
 8001704:	2b02      	cmp	r3, #2
 8001706:	d01e      	beq.n	8001746 <NRF24_Set_DataRate+0x62>
 8001708:	2b02      	cmp	r3, #2
 800170a:	dc28      	bgt.n	800175e <NRF24_Set_DataRate+0x7a>
 800170c:	2b00      	cmp	r3, #0
 800170e:	d002      	beq.n	8001716 <NRF24_Set_DataRate+0x32>
 8001710:	2b01      	cmp	r3, #1
 8001712:	d00c      	beq.n	800172e <NRF24_Set_DataRate+0x4a>
			config |= (1 << 3);
			node->bitRate = _2MBS;
			break;

		default:
			break;
 8001714:	e023      	b.n	800175e <NRF24_Set_DataRate+0x7a>
			config |= (1 << 5);
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	f043 0320 	orr.w	r3, r3, #32
 800171c:	73fb      	strb	r3, [r7, #15]
			config &=~(1 << 3);
 800171e:	7bfb      	ldrb	r3, [r7, #15]
 8001720:	f023 0308 	bic.w	r3, r3, #8
 8001724:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _250KBS;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	775a      	strb	r2, [r3, #29]
			break;
 800172c:	e018      	b.n	8001760 <NRF24_Set_DataRate+0x7c>
			config &=~(1 << 5);
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	f023 0320 	bic.w	r3, r3, #32
 8001734:	73fb      	strb	r3, [r7, #15]
			config &=~(1 << 3);
 8001736:	7bfb      	ldrb	r3, [r7, #15]
 8001738:	f023 0308 	bic.w	r3, r3, #8
 800173c:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _1MBS;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	775a      	strb	r2, [r3, #29]
			break;
 8001744:	e00c      	b.n	8001760 <NRF24_Set_DataRate+0x7c>
			config &=~(1 << 5);
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	f023 0320 	bic.w	r3, r3, #32
 800174c:	73fb      	strb	r3, [r7, #15]
			config |= (1 << 3);
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	f043 0308 	orr.w	r3, r3, #8
 8001754:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _2MBS;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2202      	movs	r2, #2
 800175a:	775a      	strb	r2, [r3, #29]
			break;
 800175c:	e000      	b.n	8001760 <NRF24_Set_DataRate+0x7c>
			break;
 800175e:	bf00      	nop
	}
	NRF24_Write_Reg(node, RF_SETUP, config);
 8001760:	7bfb      	ldrb	r3, [r7, #15]
 8001762:	461a      	mov	r2, r3
 8001764:	2106      	movs	r1, #6
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 fa0e 	bl	8001b88 <NRF24_Write_Reg>
	NRF24_CE_Enable(node);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 f9cb 	bl	8001b08 <NRF24_CE_Enable>
}
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <NRF24_Set_PALevel>:

void NRF24_Set_PALevel(nrf24 *node, p_level pwr)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	70fb      	strb	r3, [r7, #3]
	NRF24_CE_Disable(node);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f9cd 	bl	8001b28 <NRF24_CE_Disable>
	uint8_t config = NRF24_Read_Reg(node, RF_SETUP);
 800178e:	2106      	movs	r1, #6
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 fa60 	bl	8001c56 <NRF24_Read_Reg>
 8001796:	4603      	mov	r3, r0
 8001798:	73fb      	strb	r3, [r7, #15]

	switch (pwr) {
 800179a:	78fb      	ldrb	r3, [r7, #3]
 800179c:	2b03      	cmp	r3, #3
 800179e:	d837      	bhi.n	8001810 <NRF24_Set_PALevel+0x94>
 80017a0:	a201      	add	r2, pc, #4	@ (adr r2, 80017a8 <NRF24_Set_PALevel+0x2c>)
 80017a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a6:	bf00      	nop
 80017a8:	080017b9 	.word	0x080017b9
 80017ac:	080017d1 	.word	0x080017d1
 80017b0:	080017e9 	.word	0x080017e9
 80017b4:	08001801 	.word	0x08001801
		case VERY_LOW:
			config &=~(1 << 2);
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	f023 0304 	bic.w	r3, r3, #4
 80017be:	73fb      	strb	r3, [r7, #15]
			config &=~(1 << 1);
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	f023 0302 	bic.w	r3, r3, #2
 80017c6:	73fb      	strb	r3, [r7, #15]
			node->pa = VERY_LOW;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	771a      	strb	r2, [r3, #28]
			break;
 80017ce:	e020      	b.n	8001812 <NRF24_Set_PALevel+0x96>

		case LOW:
			config &=~(1 << 2);
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	f023 0304 	bic.w	r3, r3, #4
 80017d6:	73fb      	strb	r3, [r7, #15]
			config |= (1 << 1);
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	f043 0302 	orr.w	r3, r3, #2
 80017de:	73fb      	strb	r3, [r7, #15]
			node->pa = LOW;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	771a      	strb	r2, [r3, #28]
			break;
 80017e6:	e014      	b.n	8001812 <NRF24_Set_PALevel+0x96>

		case MID:
			config |= (1 << 2);
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	73fb      	strb	r3, [r7, #15]
			config &=~(1 << 1);
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	f023 0302 	bic.w	r3, r3, #2
 80017f6:	73fb      	strb	r3, [r7, #15]
			node->pa = MID;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2202      	movs	r2, #2
 80017fc:	771a      	strb	r2, [r3, #28]
			break;
 80017fe:	e008      	b.n	8001812 <NRF24_Set_PALevel+0x96>

		case HIGH:
			config |= (1 << 2) | (1 << 1);
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	f043 0306 	orr.w	r3, r3, #6
 8001806:	73fb      	strb	r3, [r7, #15]
			node->pa = HIGH;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2203      	movs	r2, #3
 800180c:	771a      	strb	r2, [r3, #28]
			break;
 800180e:	e000      	b.n	8001812 <NRF24_Set_PALevel+0x96>

		default:
			break;
 8001810:	bf00      	nop
	}
	NRF24_Write_Reg(node, RF_SETUP, config);
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	461a      	mov	r2, r3
 8001816:	2106      	movs	r1, #6
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 f9b5 	bl	8001b88 <NRF24_Write_Reg>
	NRF24_CE_Enable(node);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 f972 	bl	8001b08 <NRF24_CE_Enable>
}
 8001824:	bf00      	nop
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <NRF24_Set_Channel>:

void NRF24_Set_Channel(nrf24 *node, uint8_t channel)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	70fb      	strb	r3, [r7, #3]
	NRF24_CE_Disable(node);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 f975 	bl	8001b28 <NRF24_CE_Disable>
	NRF24_Write_Reg(node, RF_CH, channel);
 800183e:	78fb      	ldrb	r3, [r7, #3]
 8001840:	461a      	mov	r2, r3
 8001842:	2105      	movs	r1, #5
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 f99f 	bl	8001b88 <NRF24_Write_Reg>
	NRF24_CE_Enable(node);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f95c 	bl	8001b08 <NRF24_CE_Enable>
}
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <NRF24_Set_Mode>:

void NRF24_Set_Mode(nrf24 *node, mode_nrf _mode)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	70fb      	strb	r3, [r7, #3]
	uint8_t config = NRF24_Read_Reg(node, CONFIG);
 8001864:	2100      	movs	r1, #0
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 f9f5 	bl	8001c56 <NRF24_Read_Reg>
 800186c:	4603      	mov	r3, r0
 800186e:	73fb      	strb	r3, [r7, #15]

	switch (_mode)
 8001870:	78fb      	ldrb	r3, [r7, #3]
 8001872:	2b03      	cmp	r3, #3
 8001874:	d837      	bhi.n	80018e6 <NRF24_Set_Mode+0x8e>
 8001876:	a201      	add	r2, pc, #4	@ (adr r2, 800187c <NRF24_Set_Mode+0x24>)
 8001878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187c:	0800188d 	.word	0x0800188d
 8001880:	0800189d 	.word	0x0800189d
 8001884:	080018b3 	.word	0x080018b3
 8001888:	080018d1 	.word	0x080018d1
	{
		case PWR_DOWN:
			config &=~(1 << 1);
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	f023 0302 	bic.w	r3, r3, #2
 8001892:	73fb      	strb	r3, [r7, #15]
			node->mode = PWR_DOWN;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	779a      	strb	r2, [r3, #30]
			break;
 800189a:	e025      	b.n	80018e8 <NRF24_Set_Mode+0x90>

		case STANDBY:
			NRF24_CE_Disable(node);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 f943 	bl	8001b28 <NRF24_CE_Disable>
			config |= (1 << 1);
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	f043 0302 	orr.w	r3, r3, #2
 80018a8:	73fb      	strb	r3, [r7, #15]
			node->mode = STANDBY;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	779a      	strb	r2, [r3, #30]
			break;
 80018b0:	e01a      	b.n	80018e8 <NRF24_Set_Mode+0x90>

		case TX_MODE:
			NRF24_CE_Enable(node);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 f928 	bl	8001b08 <NRF24_CE_Enable>
			config |= (1 << 1);
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	f043 0302 	orr.w	r3, r3, #2
 80018be:	73fb      	strb	r3, [r7, #15]
			config &=~(1 << 0);
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	f023 0301 	bic.w	r3, r3, #1
 80018c6:	73fb      	strb	r3, [r7, #15]
			node->mode = TX_MODE;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2202      	movs	r2, #2
 80018cc:	779a      	strb	r2, [r3, #30]
			break;
 80018ce:	e00b      	b.n	80018e8 <NRF24_Set_Mode+0x90>

		case RX_MODE:
			NRF24_CE_Enable(node);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 f919 	bl	8001b08 <NRF24_CE_Enable>
			config |= (1 << 1) | (1 << 0);
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	f043 0303 	orr.w	r3, r3, #3
 80018dc:	73fb      	strb	r3, [r7, #15]
			node->mode = RX_MODE;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2203      	movs	r2, #3
 80018e2:	779a      	strb	r2, [r3, #30]
			break;
 80018e4:	e000      	b.n	80018e8 <NRF24_Set_Mode+0x90>

		default:
			break;
 80018e6:	bf00      	nop
	}
	NRF24_Write_Reg(node, CONFIG, config);
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
 80018ea:	461a      	mov	r2, r3
 80018ec:	2100      	movs	r1, #0
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 f94a 	bl	8001b88 <NRF24_Write_Reg>
}
 80018f4:	bf00      	nop
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <NRF24_Set_RxPipe>:
	}
	return (0);
}

void NRF24_Set_RxPipe(nrf24 *node, uint8_t *addr, uint8_t pipe, uint8_t payload)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	4611      	mov	r1, r2
 8001908:	461a      	mov	r2, r3
 800190a:	460b      	mov	r3, r1
 800190c:	71fb      	strb	r3, [r7, #7]
 800190e:	4613      	mov	r3, r2
 8001910:	71bb      	strb	r3, [r7, #6]
	NRF24_CE_Disable(node);
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f000 f908 	bl	8001b28 <NRF24_CE_Disable>
	NRF24_Reset(node, STATUS);
 8001918:	2107      	movs	r1, #7
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f000 f9ea 	bl	8001cf4 <NRF24_Reset>
	uint8_t en_rxaddr = NRF24_Read_Reg(node, EN_RXADDR);
 8001920:	2102      	movs	r1, #2
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f000 f997 	bl	8001c56 <NRF24_Read_Reg>
 8001928:	4603      	mov	r3, r0
 800192a:	75fb      	strb	r3, [r7, #23]
	en_rxaddr |= (1 << pipe);
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	2201      	movs	r2, #1
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	b25a      	sxtb	r2, r3
 8001936:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800193a:	4313      	orrs	r3, r2
 800193c:	b25b      	sxtb	r3, r3
 800193e:	75fb      	strb	r3, [r7, #23]
	NRF24_Write_Reg(node, EN_RXADDR, en_rxaddr);
 8001940:	7dfb      	ldrb	r3, [r7, #23]
 8001942:	461a      	mov	r2, r3
 8001944:	2102      	movs	r1, #2
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f000 f91e 	bl	8001b88 <NRF24_Write_Reg>

	switch(pipe)
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	2b05      	cmp	r3, #5
 8001950:	d860      	bhi.n	8001a14 <NRF24_Set_RxPipe+0x118>
 8001952:	a201      	add	r2, pc, #4	@ (adr r2, 8001958 <NRF24_Set_RxPipe+0x5c>)
 8001954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001958:	08001971 	.word	0x08001971
 800195c:	0800198b 	.word	0x0800198b
 8001960:	080019a5 	.word	0x080019a5
 8001964:	080019c1 	.word	0x080019c1
 8001968:	080019dd 	.word	0x080019dd
 800196c:	080019f9 	.word	0x080019f9
	{
		case 0:
			NRF24_Write_Buffer(node, RX_ADDR_P0, addr, 5);
 8001970:	2305      	movs	r3, #5
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	210a      	movs	r1, #10
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f000 f931 	bl	8001bde <NRF24_Write_Buffer>
			NRF24_Write_Reg(node, RX_PW_P0, payload);
 800197c:	79bb      	ldrb	r3, [r7, #6]
 800197e:	461a      	mov	r2, r3
 8001980:	2111      	movs	r1, #17
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	f000 f900 	bl	8001b88 <NRF24_Write_Reg>
			break;
 8001988:	e045      	b.n	8001a16 <NRF24_Set_RxPipe+0x11a>

		case 1:
			NRF24_Write_Buffer(node, RX_ADDR_P1, addr, 5);
 800198a:	2305      	movs	r3, #5
 800198c:	68ba      	ldr	r2, [r7, #8]
 800198e:	210b      	movs	r1, #11
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f000 f924 	bl	8001bde <NRF24_Write_Buffer>
			NRF24_Write_Reg(node, RX_PW_P1, payload);
 8001996:	79bb      	ldrb	r3, [r7, #6]
 8001998:	461a      	mov	r2, r3
 800199a:	2112      	movs	r1, #18
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f000 f8f3 	bl	8001b88 <NRF24_Write_Reg>
			break;
 80019a2:	e038      	b.n	8001a16 <NRF24_Set_RxPipe+0x11a>

		case 2:
			NRF24_Write_Reg(node, RX_ADDR_P2, addr[0]);
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	210c      	movs	r1, #12
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f000 f8eb 	bl	8001b88 <NRF24_Write_Reg>
			NRF24_Write_Reg(node, RX_PW_P2, payload);
 80019b2:	79bb      	ldrb	r3, [r7, #6]
 80019b4:	461a      	mov	r2, r3
 80019b6:	2113      	movs	r1, #19
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f000 f8e5 	bl	8001b88 <NRF24_Write_Reg>
			break;
 80019be:	e02a      	b.n	8001a16 <NRF24_Set_RxPipe+0x11a>

		case 3:
			NRF24_Write_Reg(node, RX_ADDR_P3, addr[0]);
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	461a      	mov	r2, r3
 80019c6:	210d      	movs	r1, #13
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f000 f8dd 	bl	8001b88 <NRF24_Write_Reg>
			NRF24_Write_Reg(node, RX_PW_P3, payload);
 80019ce:	79bb      	ldrb	r3, [r7, #6]
 80019d0:	461a      	mov	r2, r3
 80019d2:	2114      	movs	r1, #20
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f000 f8d7 	bl	8001b88 <NRF24_Write_Reg>
			break;
 80019da:	e01c      	b.n	8001a16 <NRF24_Set_RxPipe+0x11a>

		case 4:
			NRF24_Write_Reg(node, RX_ADDR_P4, addr[0]);
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	210e      	movs	r1, #14
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f000 f8cf 	bl	8001b88 <NRF24_Write_Reg>
			NRF24_Write_Reg(node, RX_PW_P4, payload);
 80019ea:	79bb      	ldrb	r3, [r7, #6]
 80019ec:	461a      	mov	r2, r3
 80019ee:	2115      	movs	r1, #21
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f000 f8c9 	bl	8001b88 <NRF24_Write_Reg>
			break;
 80019f6:	e00e      	b.n	8001a16 <NRF24_Set_RxPipe+0x11a>

		case 5:
			NRF24_Write_Reg(node, RX_ADDR_P5, addr[0]);
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	210f      	movs	r1, #15
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f000 f8c1 	bl	8001b88 <NRF24_Write_Reg>
			NRF24_Write_Reg(node, RX_PW_P5, payload);
 8001a06:	79bb      	ldrb	r3, [r7, #6]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	2116      	movs	r1, #22
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	f000 f8bb 	bl	8001b88 <NRF24_Write_Reg>
			break;
 8001a12:	e000      	b.n	8001a16 <NRF24_Set_RxPipe+0x11a>

		default:
			break;
 8001a14:	bf00      	nop
	}
	NRF24_CE_Enable(node);
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f000 f876 	bl	8001b08 <NRF24_CE_Enable>
}
 8001a1c:	bf00      	nop
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <NRF24_Available>:

uint8_t NRF24_Available(nrf24 *node, uint8_t pipenum)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	70fb      	strb	r3, [r7, #3]
	uint8_t status = NRF24_Read_Reg(node, STATUS);
 8001a30:	2107      	movs	r1, #7
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f90f 	bl	8001c56 <NRF24_Read_Reg>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	73fb      	strb	r3, [r7, #15]
	if((status - 64 == 0) && pipenum == 0)
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	2b40      	cmp	r3, #64	@ 0x40
 8001a40:	d109      	bne.n	8001a56 <NRF24_Available+0x32>
 8001a42:	78fb      	ldrb	r3, [r7, #3]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d106      	bne.n	8001a56 <NRF24_Available+0x32>
	{
		NRF24_Write_Reg(node, STATUS, (1 << 6));
 8001a48:	2240      	movs	r2, #64	@ 0x40
 8001a4a:	2107      	movs	r1, #7
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 f89b 	bl	8001b88 <NRF24_Write_Reg>
		return 1;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e012      	b.n	8001a7c <NRF24_Available+0x58>
	}
	else if((status & (1 << 6)) && (status & (pipenum << 1)))
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00c      	beq.n	8001a7a <NRF24_Available+0x56>
 8001a60:	7bfa      	ldrb	r2, [r7, #15]
 8001a62:	78fb      	ldrb	r3, [r7, #3]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4013      	ands	r3, r2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d006      	beq.n	8001a7a <NRF24_Available+0x56>
	{
		NRF24_Write_Reg(node, STATUS, (1 << 6));
 8001a6c:	2240      	movs	r2, #64	@ 0x40
 8001a6e:	2107      	movs	r1, #7
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f889 	bl	8001b88 <NRF24_Write_Reg>
		return 1;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <NRF24_Available+0x58>
	}
	return 0;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <NRF24_Receive>:

void NRF24_Receive(nrf24 *node, uint8_t *data, uint8_t len)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	71fb      	strb	r3, [r7, #7]
	uint8_t cmdtosend = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	75fb      	strb	r3, [r7, #23]

	NRF24_CSN_Enable(node);
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f000 f856 	bl	8001b48 <NRF24_CSN_Enable>
	cmdtosend = R_RX_PAYLOAD;
 8001a9c:	2361      	movs	r3, #97	@ 0x61
 8001a9e:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(node->hSPIx, &cmdtosend, 1, 100);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6998      	ldr	r0, [r3, #24]
 8001aa4:	f107 0117 	add.w	r1, r7, #23
 8001aa8:	2364      	movs	r3, #100	@ 0x64
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f001 fc56 	bl	800335c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8001ab0:	bf00      	nop
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f002 f856 	bl	8003b68 <HAL_SPI_GetState>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d1f7      	bne.n	8001ab2 <NRF24_Receive+0x2e>
	HAL_SPI_Receive(node->hSPIx, data, len, NRF_RX_TIMEOUT);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6998      	ldr	r0, [r3, #24]
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001ace:	68b9      	ldr	r1, [r7, #8]
 8001ad0:	f001 fd88 	bl	80035e4 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8001ad4:	bf00      	nop
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f002 f844 	bl	8003b68 <HAL_SPI_GetState>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d1f7      	bne.n	8001ad6 <NRF24_Receive+0x52>
	NRF24_CSN_Disable(node);
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f000 f83e 	bl	8001b68 <NRF24_CSN_Disable>
	HAL_Delay(1);
 8001aec:	2001      	movs	r0, #1
 8001aee:	f000 fc07 	bl	8002300 <HAL_Delay>
	cmdtosend = FLUSH_RX;
 8001af2:	23e2      	movs	r3, #226	@ 0xe2
 8001af4:	75fb      	strb	r3, [r7, #23]
	NRF24_Send_Cmd(node, cmdtosend);
 8001af6:	7dfb      	ldrb	r3, [r7, #23]
 8001af8:	4619      	mov	r1, r3
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f000 f8d8 	bl	8001cb0 <NRF24_Send_Cmd>
}
 8001b00:	bf00      	nop
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <NRF24_CE_Enable>:
	for (int i = 29; i < 38; i++)
		*(data + i) = NRF24_Read_Reg(node, i - 12);
}

static void NRF24_CE_Enable(nrf24 *node)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CE_port, node->CE_pin, GPIO_PIN_SET);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6898      	ldr	r0, [r3, #8]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	899b      	ldrh	r3, [r3, #12]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f000 ff58 	bl	80029d0 <HAL_GPIO_WritePin>
}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <NRF24_CE_Disable>:

static void NRF24_CE_Disable(nrf24 *node)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CE_port, node->CE_pin, GPIO_PIN_RESET);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6898      	ldr	r0, [r3, #8]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	899b      	ldrh	r3, [r3, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f000 ff48 	bl	80029d0 <HAL_GPIO_WritePin>
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <NRF24_CSN_Enable>:

static void NRF24_CSN_Enable(nrf24 *node)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CSN_port, node->CSN_pin, GPIO_PIN_RESET);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6818      	ldr	r0, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	889b      	ldrh	r3, [r3, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f000 ff38 	bl	80029d0 <HAL_GPIO_WritePin>
}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <NRF24_CSN_Disable>:

static void NRF24_CSN_Disable(nrf24 *node)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CSN_port, node->CSN_pin, GPIO_PIN_SET);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6818      	ldr	r0, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	889b      	ldrh	r3, [r3, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f000 ff28 	bl	80029d0 <HAL_GPIO_WritePin>
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <NRF24_Write_Reg>:

static void NRF24_Write_Reg(nrf24 *node, uint8_t reg, uint8_t data)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	70fb      	strb	r3, [r7, #3]
 8001b94:	4613      	mov	r3, r2
 8001b96:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];
	buf[0] = (reg | 1 << 5);
 8001b98:	78fb      	ldrb	r3, [r7, #3]
 8001b9a:	f043 0320 	orr.w	r3, r3, #32
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	733b      	strb	r3, [r7, #12]
	buf[1] = data;
 8001ba2:	78bb      	ldrb	r3, [r7, #2]
 8001ba4:	737b      	strb	r3, [r7, #13]
	NRF24_CSN_Enable(node);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff ffce 	bl	8001b48 <NRF24_CSN_Enable>
	HAL_SPI_Transmit(node->hSPIx, buf, 2, NRF_TX_TIMEOUT);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6998      	ldr	r0, [r3, #24]
 8001bb0:	f107 010c 	add.w	r1, r7, #12
 8001bb4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001bb8:	2202      	movs	r2, #2
 8001bba:	f001 fbcf 	bl	800335c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8001bbe:	bf00      	nop
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f001 ffcf 	bl	8003b68 <HAL_SPI_GetState>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d1f7      	bne.n	8001bc0 <NRF24_Write_Reg+0x38>
	NRF24_CSN_Disable(node);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff ffc9 	bl	8001b68 <NRF24_CSN_Disable>
}
 8001bd6:	bf00      	nop
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <NRF24_Write_Buffer>:

static void NRF24_Write_Buffer(nrf24 *node, uint8_t reg, uint8_t *data, uint16_t len)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b086      	sub	sp, #24
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	60f8      	str	r0, [r7, #12]
 8001be6:	607a      	str	r2, [r7, #4]
 8001be8:	461a      	mov	r2, r3
 8001bea:	460b      	mov	r3, r1
 8001bec:	72fb      	strb	r3, [r7, #11]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	813b      	strh	r3, [r7, #8]
	uint8_t buf[2];
	buf[0] = (reg | 1 << 5);
 8001bf2:	7afb      	ldrb	r3, [r7, #11]
 8001bf4:	f043 0320 	orr.w	r3, r3, #32
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	753b      	strb	r3, [r7, #20]
	NRF24_CSN_Enable(node);
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f7ff ffa3 	bl	8001b48 <NRF24_CSN_Enable>
	HAL_SPI_Transmit(node->hSPIx, buf, 1, NRF_TX_TIMEOUT);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6998      	ldr	r0, [r3, #24]
 8001c06:	f107 0114 	add.w	r1, r7, #20
 8001c0a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f001 fba4 	bl	800335c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8001c14:	bf00      	nop
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f001 ffa4 	bl	8003b68 <HAL_SPI_GetState>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d1f7      	bne.n	8001c16 <NRF24_Write_Buffer+0x38>
	HAL_SPI_Transmit(node->hSPIx, data, len, NRF_TX_TIMEOUT);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6998      	ldr	r0, [r3, #24]
 8001c2a:	893a      	ldrh	r2, [r7, #8]
 8001c2c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	f001 fb93 	bl	800335c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8001c36:	bf00      	nop
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f001 ff93 	bl	8003b68 <HAL_SPI_GetState>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d1f7      	bne.n	8001c38 <NRF24_Write_Buffer+0x5a>
	NRF24_CSN_Disable(node);
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f7ff ff8d 	bl	8001b68 <NRF24_CSN_Disable>
}
 8001c4e:	bf00      	nop
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <NRF24_Read_Reg>:

static uint8_t NRF24_Read_Reg(nrf24 *node, uint8_t reg)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b084      	sub	sp, #16
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	460b      	mov	r3, r1
 8001c60:	70fb      	strb	r3, [r7, #3]
	uint8_t data = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	73fb      	strb	r3, [r7, #15]
	NRF24_CSN_Enable(node);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff ff6e 	bl	8001b48 <NRF24_CSN_Enable>
	HAL_SPI_Transmit(node->hSPIx, &reg, 1, NRF_TX_TIMEOUT);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6998      	ldr	r0, [r3, #24]
 8001c70:	1cf9      	adds	r1, r7, #3
 8001c72:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001c76:	2201      	movs	r2, #1
 8001c78:	f001 fb70 	bl	800335c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8001c7c:	bf00      	nop
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f001 ff70 	bl	8003b68 <HAL_SPI_GetState>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d1f7      	bne.n	8001c7e <NRF24_Read_Reg+0x28>
	HAL_SPI_Receive(node->hSPIx, &data, 1, NRF_RX_TIMEOUT);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6998      	ldr	r0, [r3, #24]
 8001c92:	f107 010f 	add.w	r1, r7, #15
 8001c96:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f001 fca2 	bl	80035e4 <HAL_SPI_Receive>
	NRF24_CSN_Disable(node);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ff61 	bl	8001b68 <NRF24_CSN_Disable>
	return data;
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <NRF24_Send_Cmd>:
	HAL_SPI_Receive(node->hSPIx, data, len, NRF_RX_TIMEOUT);
	NRF24_CSN_Disable(node);
}

static void NRF24_Send_Cmd(nrf24 *node, uint8_t cmd)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	70fb      	strb	r3, [r7, #3]
	NRF24_CSN_Enable(node);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ff43 	bl	8001b48 <NRF24_CSN_Enable>
	HAL_SPI_Transmit(node->hSPIx, &cmd, 1, NRF_TX_TIMEOUT);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6998      	ldr	r0, [r3, #24]
 8001cc6:	1cf9      	adds	r1, r7, #3
 8001cc8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f001 fb45 	bl	800335c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8001cd2:	bf00      	nop
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f001 ff45 	bl	8003b68 <HAL_SPI_GetState>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d1f7      	bne.n	8001cd4 <NRF24_Send_Cmd+0x24>
	NRF24_CSN_Disable(node);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff ff3f 	bl	8001b68 <NRF24_CSN_Disable>
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <NRF24_Reset>:

static void NRF24_Reset(nrf24 *node, uint8_t reg)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	70fb      	strb	r3, [r7, #3]
	if(reg == STATUS)
 8001d00:	78fb      	ldrb	r3, [r7, #3]
 8001d02:	2b07      	cmp	r3, #7
 8001d04:	d105      	bne.n	8001d12 <NRF24_Reset+0x1e>
	{
		NRF24_Write_Reg(node, STATUS, 0x00);
 8001d06:	2200      	movs	r2, #0
 8001d08:	2107      	movs	r1, #7
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ff3c 	bl	8001b88 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_PW_P5, 0);
		NRF24_Write_Reg(node, FIFO_STATUS, 0x11);
		NRF24_Write_Reg(node, DYNPD, 0);
		NRF24_Write_Reg(node, FEATURE, 0);
	}
}
 8001d10:	e0a8      	b.n	8001e64 <NRF24_Reset+0x170>
	else if(reg == FIFO_STATUS)
 8001d12:	78fb      	ldrb	r3, [r7, #3]
 8001d14:	2b17      	cmp	r3, #23
 8001d16:	d105      	bne.n	8001d24 <NRF24_Reset+0x30>
		NRF24_Write_Reg(node, FIFO_STATUS, 0x11);
 8001d18:	2211      	movs	r2, #17
 8001d1a:	2117      	movs	r1, #23
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff ff33 	bl	8001b88 <NRF24_Write_Reg>
}
 8001d22:	e09f      	b.n	8001e64 <NRF24_Reset+0x170>
		NRF24_Write_Reg(node, CONFIG, 0x08);
 8001d24:	2208      	movs	r2, #8
 8001d26:	2100      	movs	r1, #0
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ff2d 	bl	8001b88 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, EN_AA, 0x3F);
 8001d2e:	223f      	movs	r2, #63	@ 0x3f
 8001d30:	2101      	movs	r1, #1
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff ff28 	bl	8001b88 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, EN_RXADDR, 0x03);
 8001d38:	2203      	movs	r2, #3
 8001d3a:	2102      	movs	r1, #2
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff ff23 	bl	8001b88 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, SETUP_AW, 0x03);
 8001d42:	2203      	movs	r2, #3
 8001d44:	2103      	movs	r1, #3
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff ff1e 	bl	8001b88 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, SETUP_RETR, 0x03);
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	2104      	movs	r1, #4
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff ff19 	bl	8001b88 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RF_CH, 0x02);
 8001d56:	2202      	movs	r2, #2
 8001d58:	2105      	movs	r1, #5
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff ff14 	bl	8001b88 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RF_SETUP, 0x0E);
 8001d60:	220e      	movs	r2, #14
 8001d62:	2106      	movs	r1, #6
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff ff0f 	bl	8001b88 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, STATUS, 0x00);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2107      	movs	r1, #7
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff ff0a 	bl	8001b88 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, OBSERVE_TX, 0x00);
 8001d74:	2200      	movs	r2, #0
 8001d76:	2108      	movs	r1, #8
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff ff05 	bl	8001b88 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RPD, 0x00);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2109      	movs	r1, #9
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff ff00 	bl	8001b88 <NRF24_Write_Reg>
		uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001d88:	4a38      	ldr	r2, [pc, #224]	@ (8001e6c <NRF24_Reset+0x178>)
 8001d8a:	f107 0318 	add.w	r3, r7, #24
 8001d8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d92:	6018      	str	r0, [r3, #0]
 8001d94:	3304      	adds	r3, #4
 8001d96:	7019      	strb	r1, [r3, #0]
		NRF24_Write_Buffer(node, RX_ADDR_P0, rx_addr_p0_def, 5);
 8001d98:	f107 0218 	add.w	r2, r7, #24
 8001d9c:	2305      	movs	r3, #5
 8001d9e:	210a      	movs	r1, #10
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff ff1c 	bl	8001bde <NRF24_Write_Buffer>
		uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8001da6:	4a32      	ldr	r2, [pc, #200]	@ (8001e70 <NRF24_Reset+0x17c>)
 8001da8:	f107 0310 	add.w	r3, r7, #16
 8001dac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001db0:	6018      	str	r0, [r3, #0]
 8001db2:	3304      	adds	r3, #4
 8001db4:	7019      	strb	r1, [r3, #0]
		NRF24_Write_Buffer(node, RX_ADDR_P1, rx_addr_p1_def, 5);
 8001db6:	f107 0210 	add.w	r2, r7, #16
 8001dba:	2305      	movs	r3, #5
 8001dbc:	210b      	movs	r1, #11
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ff0d 	bl	8001bde <NRF24_Write_Buffer>
		NRF24_Write_Reg(node, RX_ADDR_P2, 0xC3);
 8001dc4:	22c3      	movs	r2, #195	@ 0xc3
 8001dc6:	210c      	movs	r1, #12
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff fedd 	bl	8001b88 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_ADDR_P3, 0xC4);
 8001dce:	22c4      	movs	r2, #196	@ 0xc4
 8001dd0:	210d      	movs	r1, #13
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff fed8 	bl	8001b88 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_ADDR_P4, 0xC5);
 8001dd8:	22c5      	movs	r2, #197	@ 0xc5
 8001dda:	210e      	movs	r1, #14
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff fed3 	bl	8001b88 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_ADDR_P5, 0xC6);
 8001de2:	22c6      	movs	r2, #198	@ 0xc6
 8001de4:	210f      	movs	r1, #15
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff fece 	bl	8001b88 <NRF24_Write_Reg>
		uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001dec:	4a1f      	ldr	r2, [pc, #124]	@ (8001e6c <NRF24_Reset+0x178>)
 8001dee:	f107 0308 	add.w	r3, r7, #8
 8001df2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001df6:	6018      	str	r0, [r3, #0]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	7019      	strb	r1, [r3, #0]
		NRF24_Write_Buffer(node, TX_ADDR, tx_addr_def, 5);
 8001dfc:	f107 0208 	add.w	r2, r7, #8
 8001e00:	2305      	movs	r3, #5
 8001e02:	2110      	movs	r1, #16
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff feea 	bl	8001bde <NRF24_Write_Buffer>
		NRF24_Write_Reg(node, RX_PW_P0, 0);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2111      	movs	r1, #17
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff feba 	bl	8001b88 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_PW_P1, 0);
 8001e14:	2200      	movs	r2, #0
 8001e16:	2112      	movs	r1, #18
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff feb5 	bl	8001b88 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_PW_P2, 0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2113      	movs	r1, #19
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff feb0 	bl	8001b88 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_PW_P3, 0);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2114      	movs	r1, #20
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff feab 	bl	8001b88 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_PW_P4, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2115      	movs	r1, #21
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff fea6 	bl	8001b88 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_PW_P5, 0);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2116      	movs	r1, #22
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff fea1 	bl	8001b88 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, FIFO_STATUS, 0x11);
 8001e46:	2211      	movs	r2, #17
 8001e48:	2117      	movs	r1, #23
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff fe9c 	bl	8001b88 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, DYNPD, 0);
 8001e50:	2200      	movs	r2, #0
 8001e52:	211c      	movs	r1, #28
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff fe97 	bl	8001b88 <NRF24_Write_Reg>
		NRF24_Write_Reg(node, FEATURE, 0);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	211d      	movs	r1, #29
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff fe92 	bl	8001b88 <NRF24_Write_Reg>
}
 8001e64:	bf00      	nop
 8001e66:	3720      	adds	r7, #32
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	08009828 	.word	0x08009828
 8001e70:	08009830 	.word	0x08009830

08001e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ed0 <HAL_MspInit+0x5c>)
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	4a14      	ldr	r2, [pc, #80]	@ (8001ed0 <HAL_MspInit+0x5c>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6193      	str	r3, [r2, #24]
 8001e86:	4b12      	ldr	r3, [pc, #72]	@ (8001ed0 <HAL_MspInit+0x5c>)
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e92:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed0 <HAL_MspInit+0x5c>)
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	4a0e      	ldr	r2, [pc, #56]	@ (8001ed0 <HAL_MspInit+0x5c>)
 8001e98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e9c:	61d3      	str	r3, [r2, #28]
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed0 <HAL_MspInit+0x5c>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed4 <HAL_MspInit+0x60>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	4a04      	ldr	r2, [pc, #16]	@ (8001ed4 <HAL_MspInit+0x60>)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40010000 	.word	0x40010000

08001ed8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee0:	f107 0310 	add.w	r3, r7, #16
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a1c      	ldr	r2, [pc, #112]	@ (8001f64 <HAL_SPI_MspInit+0x8c>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d131      	bne.n	8001f5c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f68 <HAL_SPI_MspInit+0x90>)
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	4a1a      	ldr	r2, [pc, #104]	@ (8001f68 <HAL_SPI_MspInit+0x90>)
 8001efe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f02:	61d3      	str	r3, [r2, #28]
 8001f04:	4b18      	ldr	r3, [pc, #96]	@ (8001f68 <HAL_SPI_MspInit+0x90>)
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f10:	4b15      	ldr	r3, [pc, #84]	@ (8001f68 <HAL_SPI_MspInit+0x90>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	4a14      	ldr	r2, [pc, #80]	@ (8001f68 <HAL_SPI_MspInit+0x90>)
 8001f16:	f043 0308 	orr.w	r3, r3, #8
 8001f1a:	6193      	str	r3, [r2, #24]
 8001f1c:	4b12      	ldr	r3, [pc, #72]	@ (8001f68 <HAL_SPI_MspInit+0x90>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f003 0308 	and.w	r3, r3, #8
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001f28:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001f2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f32:	2303      	movs	r3, #3
 8001f34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f36:	f107 0310 	add.w	r3, r7, #16
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	480b      	ldr	r0, [pc, #44]	@ (8001f6c <HAL_SPI_MspInit+0x94>)
 8001f3e:	f000 fbc3 	bl	80026c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001f42:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f50:	f107 0310 	add.w	r3, r7, #16
 8001f54:	4619      	mov	r1, r3
 8001f56:	4805      	ldr	r0, [pc, #20]	@ (8001f6c <HAL_SPI_MspInit+0x94>)
 8001f58:	f000 fbb6 	bl	80026c8 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001f5c:	bf00      	nop
 8001f5e:	3720      	adds	r7, #32
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40003800 	.word	0x40003800
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40010c00 	.word	0x40010c00

08001f70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	f107 0310 	add.w	r3, r7, #16
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a20      	ldr	r2, [pc, #128]	@ (800200c <HAL_UART_MspInit+0x9c>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d139      	bne.n	8002004 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f90:	4b1f      	ldr	r3, [pc, #124]	@ (8002010 <HAL_UART_MspInit+0xa0>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	4a1e      	ldr	r2, [pc, #120]	@ (8002010 <HAL_UART_MspInit+0xa0>)
 8001f96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f9a:	6193      	str	r3, [r2, #24]
 8001f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8002010 <HAL_UART_MspInit+0xa0>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa8:	4b19      	ldr	r3, [pc, #100]	@ (8002010 <HAL_UART_MspInit+0xa0>)
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	4a18      	ldr	r2, [pc, #96]	@ (8002010 <HAL_UART_MspInit+0xa0>)
 8001fae:	f043 0304 	orr.w	r3, r3, #4
 8001fb2:	6193      	str	r3, [r2, #24]
 8001fb4:	4b16      	ldr	r3, [pc, #88]	@ (8002010 <HAL_UART_MspInit+0xa0>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fce:	f107 0310 	add.w	r3, r7, #16
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	480f      	ldr	r0, [pc, #60]	@ (8002014 <HAL_UART_MspInit+0xa4>)
 8001fd6:	f000 fb77 	bl	80026c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe8:	f107 0310 	add.w	r3, r7, #16
 8001fec:	4619      	mov	r1, r3
 8001fee:	4809      	ldr	r0, [pc, #36]	@ (8002014 <HAL_UART_MspInit+0xa4>)
 8001ff0:	f000 fb6a 	bl	80026c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	2025      	movs	r0, #37	@ 0x25
 8001ffa:	f000 fa7c 	bl	80024f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ffe:	2025      	movs	r0, #37	@ 0x25
 8002000:	f000 fa95 	bl	800252e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002004:	bf00      	nop
 8002006:	3720      	adds	r7, #32
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40013800 	.word	0x40013800
 8002010:	40021000 	.word	0x40021000
 8002014:	40010800 	.word	0x40010800

08002018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <NMI_Handler+0x4>

08002020 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002024:	bf00      	nop
 8002026:	e7fd      	b.n	8002024 <HardFault_Handler+0x4>

08002028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <MemManage_Handler+0x4>

08002030 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002034:	bf00      	nop
 8002036:	e7fd      	b.n	8002034 <BusFault_Handler+0x4>

08002038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800203c:	bf00      	nop
 800203e:	e7fd      	b.n	800203c <UsageFault_Handler+0x4>

08002040 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr

08002058 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002068:	f000 f924 	bl	80022b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}

08002070 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002074:	4802      	ldr	r0, [pc, #8]	@ (8002080 <USART1_IRQHandler+0x10>)
 8002076:	f001 ff05 	bl	8003e84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000324 	.word	0x20000324

08002084 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return 1;
 8002088:	2301      	movs	r3, #1
}
 800208a:	4618      	mov	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr

08002092 <_kill>:

int _kill(int pid, int sig)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800209c:	f004 fab6 	bl	800660c <__errno>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2216      	movs	r2, #22
 80020a4:	601a      	str	r2, [r3, #0]
  return -1;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <_exit>:

void _exit (int status)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020ba:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff ffe7 	bl	8002092 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020c4:	bf00      	nop
 80020c6:	e7fd      	b.n	80020c4 <_exit+0x12>

080020c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	e00a      	b.n	80020f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020da:	f3af 8000 	nop.w
 80020de:	4601      	mov	r1, r0
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	60ba      	str	r2, [r7, #8]
 80020e6:	b2ca      	uxtb	r2, r1
 80020e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	3301      	adds	r3, #1
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	dbf0      	blt.n	80020da <_read+0x12>
  }

  return len;
 80020f8:	687b      	ldr	r3, [r7, #4]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800210a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002128:	605a      	str	r2, [r3, #4]
  return 0;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr

08002136 <_isatty>:

int _isatty(int file)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800213e:	2301      	movs	r3, #1
}
 8002140:	4618      	mov	r0, r3
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr

0800214a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800214a:	b480      	push	{r7}
 800214c:	b085      	sub	sp, #20
 800214e:	af00      	add	r7, sp, #0
 8002150:	60f8      	str	r0, [r7, #12]
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr
	...

08002164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800216c:	4a14      	ldr	r2, [pc, #80]	@ (80021c0 <_sbrk+0x5c>)
 800216e:	4b15      	ldr	r3, [pc, #84]	@ (80021c4 <_sbrk+0x60>)
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002178:	4b13      	ldr	r3, [pc, #76]	@ (80021c8 <_sbrk+0x64>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d102      	bne.n	8002186 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002180:	4b11      	ldr	r3, [pc, #68]	@ (80021c8 <_sbrk+0x64>)
 8002182:	4a12      	ldr	r2, [pc, #72]	@ (80021cc <_sbrk+0x68>)
 8002184:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002186:	4b10      	ldr	r3, [pc, #64]	@ (80021c8 <_sbrk+0x64>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	429a      	cmp	r2, r3
 8002192:	d207      	bcs.n	80021a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002194:	f004 fa3a 	bl	800660c <__errno>
 8002198:	4603      	mov	r3, r0
 800219a:	220c      	movs	r2, #12
 800219c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800219e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021a2:	e009      	b.n	80021b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021a4:	4b08      	ldr	r3, [pc, #32]	@ (80021c8 <_sbrk+0x64>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021aa:	4b07      	ldr	r3, [pc, #28]	@ (80021c8 <_sbrk+0x64>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	4a05      	ldr	r2, [pc, #20]	@ (80021c8 <_sbrk+0x64>)
 80021b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021b6:	68fb      	ldr	r3, [r7, #12]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20005000 	.word	0x20005000
 80021c4:	00000400 	.word	0x00000400
 80021c8:	2000036c 	.word	0x2000036c
 80021cc:	200004c0 	.word	0x200004c0

080021d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr

080021dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021dc:	f7ff fff8 	bl	80021d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021e0:	480b      	ldr	r0, [pc, #44]	@ (8002210 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80021e2:	490c      	ldr	r1, [pc, #48]	@ (8002214 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80021e4:	4a0c      	ldr	r2, [pc, #48]	@ (8002218 <LoopFillZerobss+0x16>)
  movs r3, #0
 80021e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021e8:	e002      	b.n	80021f0 <LoopCopyDataInit>

080021ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ee:	3304      	adds	r3, #4

080021f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021f4:	d3f9      	bcc.n	80021ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021f6:	4a09      	ldr	r2, [pc, #36]	@ (800221c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80021f8:	4c09      	ldr	r4, [pc, #36]	@ (8002220 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021fc:	e001      	b.n	8002202 <LoopFillZerobss>

080021fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002200:	3204      	adds	r2, #4

08002202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002204:	d3fb      	bcc.n	80021fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002206:	f004 fa07 	bl	8006618 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800220a:	f7ff f87f 	bl	800130c <main>
  bx lr
 800220e:	4770      	bx	lr
  ldr r0, =_sdata
 8002210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002214:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002218:	08009cbc 	.word	0x08009cbc
  ldr r2, =_sbss
 800221c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002220:	200004c0 	.word	0x200004c0

08002224 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002224:	e7fe      	b.n	8002224 <ADC1_2_IRQHandler>
	...

08002228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800222c:	4b08      	ldr	r3, [pc, #32]	@ (8002250 <HAL_Init+0x28>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a07      	ldr	r2, [pc, #28]	@ (8002250 <HAL_Init+0x28>)
 8002232:	f043 0310 	orr.w	r3, r3, #16
 8002236:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002238:	2003      	movs	r0, #3
 800223a:	f000 f951 	bl	80024e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800223e:	200f      	movs	r0, #15
 8002240:	f000 f808 	bl	8002254 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002244:	f7ff fe16 	bl	8001e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40022000 	.word	0x40022000

08002254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800225c:	4b12      	ldr	r3, [pc, #72]	@ (80022a8 <HAL_InitTick+0x54>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4b12      	ldr	r3, [pc, #72]	@ (80022ac <HAL_InitTick+0x58>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	4619      	mov	r1, r3
 8002266:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800226a:	fbb3 f3f1 	udiv	r3, r3, r1
 800226e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002272:	4618      	mov	r0, r3
 8002274:	f000 f969 	bl	800254a <HAL_SYSTICK_Config>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e00e      	b.n	80022a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b0f      	cmp	r3, #15
 8002286:	d80a      	bhi.n	800229e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002288:	2200      	movs	r2, #0
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002290:	f000 f931 	bl	80024f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002294:	4a06      	ldr	r2, [pc, #24]	@ (80022b0 <HAL_InitTick+0x5c>)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
 800229c:	e000      	b.n	80022a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20000008 	.word	0x20000008
 80022ac:	20000010 	.word	0x20000010
 80022b0:	2000000c 	.word	0x2000000c

080022b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022b8:	4b05      	ldr	r3, [pc, #20]	@ (80022d0 <HAL_IncTick+0x1c>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	461a      	mov	r2, r3
 80022be:	4b05      	ldr	r3, [pc, #20]	@ (80022d4 <HAL_IncTick+0x20>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4413      	add	r3, r2
 80022c4:	4a03      	ldr	r2, [pc, #12]	@ (80022d4 <HAL_IncTick+0x20>)
 80022c6:	6013      	str	r3, [r2, #0]
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr
 80022d0:	20000010 	.word	0x20000010
 80022d4:	20000370 	.word	0x20000370

080022d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return uwTick;
 80022dc:	4b02      	ldr	r3, [pc, #8]	@ (80022e8 <HAL_GetTick+0x10>)
 80022de:	681b      	ldr	r3, [r3, #0]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	20000370 	.word	0x20000370

080022ec <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80022f0:	4b02      	ldr	r3, [pc, #8]	@ (80022fc <HAL_GetTickFreq+0x10>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr
 80022fc:	20000010 	.word	0x20000010

08002300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002308:	f7ff ffe6 	bl	80022d8 <HAL_GetTick>
 800230c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002318:	d005      	beq.n	8002326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800231a:	4b0a      	ldr	r3, [pc, #40]	@ (8002344 <HAL_Delay+0x44>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4413      	add	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002326:	bf00      	nop
 8002328:	f7ff ffd6 	bl	80022d8 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	429a      	cmp	r2, r3
 8002336:	d8f7      	bhi.n	8002328 <HAL_Delay+0x28>
  {
  }
}
 8002338:	bf00      	nop
 800233a:	bf00      	nop
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20000010 	.word	0x20000010

08002348 <__NVIC_SetPriorityGrouping>:
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002358:	4b0c      	ldr	r3, [pc, #48]	@ (800238c <__NVIC_SetPriorityGrouping+0x44>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002364:	4013      	ands	r3, r2
 8002366:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002370:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002374:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800237a:	4a04      	ldr	r2, [pc, #16]	@ (800238c <__NVIC_SetPriorityGrouping+0x44>)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	60d3      	str	r3, [r2, #12]
}
 8002380:	bf00      	nop
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <__NVIC_GetPriorityGrouping>:
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002394:	4b04      	ldr	r3, [pc, #16]	@ (80023a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	0a1b      	lsrs	r3, r3, #8
 800239a:	f003 0307 	and.w	r3, r3, #7
}
 800239e:	4618      	mov	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <__NVIC_EnableIRQ>:
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	db0b      	blt.n	80023d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	f003 021f 	and.w	r2, r3, #31
 80023c4:	4906      	ldr	r1, [pc, #24]	@ (80023e0 <__NVIC_EnableIRQ+0x34>)
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	095b      	lsrs	r3, r3, #5
 80023cc:	2001      	movs	r0, #1
 80023ce:	fa00 f202 	lsl.w	r2, r0, r2
 80023d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr
 80023e0:	e000e100 	.word	0xe000e100

080023e4 <__NVIC_SetPriority>:
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	6039      	str	r1, [r7, #0]
 80023ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	db0a      	blt.n	800240e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	490c      	ldr	r1, [pc, #48]	@ (8002430 <__NVIC_SetPriority+0x4c>)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	0112      	lsls	r2, r2, #4
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	440b      	add	r3, r1
 8002408:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800240c:	e00a      	b.n	8002424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4908      	ldr	r1, [pc, #32]	@ (8002434 <__NVIC_SetPriority+0x50>)
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	3b04      	subs	r3, #4
 800241c:	0112      	lsls	r2, r2, #4
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	440b      	add	r3, r1
 8002422:	761a      	strb	r2, [r3, #24]
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	e000e100 	.word	0xe000e100
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <NVIC_EncodePriority>:
{
 8002438:	b480      	push	{r7}
 800243a:	b089      	sub	sp, #36	@ 0x24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f1c3 0307 	rsb	r3, r3, #7
 8002452:	2b04      	cmp	r3, #4
 8002454:	bf28      	it	cs
 8002456:	2304      	movcs	r3, #4
 8002458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3304      	adds	r3, #4
 800245e:	2b06      	cmp	r3, #6
 8002460:	d902      	bls.n	8002468 <NVIC_EncodePriority+0x30>
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3b03      	subs	r3, #3
 8002466:	e000      	b.n	800246a <NVIC_EncodePriority+0x32>
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800246c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43da      	mvns	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	401a      	ands	r2, r3
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002480:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	fa01 f303 	lsl.w	r3, r1, r3
 800248a:	43d9      	mvns	r1, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002490:	4313      	orrs	r3, r2
}
 8002492:	4618      	mov	r0, r3
 8002494:	3724      	adds	r7, #36	@ 0x24
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <SysTick_Config>:
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024ac:	d301      	bcc.n	80024b2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80024ae:	2301      	movs	r3, #1
 80024b0:	e00f      	b.n	80024d2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024b2:	4a0a      	ldr	r2, [pc, #40]	@ (80024dc <SysTick_Config+0x40>)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ba:	210f      	movs	r1, #15
 80024bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80024c0:	f7ff ff90 	bl	80023e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c4:	4b05      	ldr	r3, [pc, #20]	@ (80024dc <SysTick_Config+0x40>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ca:	4b04      	ldr	r3, [pc, #16]	@ (80024dc <SysTick_Config+0x40>)
 80024cc:	2207      	movs	r2, #7
 80024ce:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	e000e010 	.word	0xe000e010

080024e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff ff2d 	bl	8002348 <__NVIC_SetPriorityGrouping>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b086      	sub	sp, #24
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4603      	mov	r3, r0
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
 8002502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002508:	f7ff ff42 	bl	8002390 <__NVIC_GetPriorityGrouping>
 800250c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	68b9      	ldr	r1, [r7, #8]
 8002512:	6978      	ldr	r0, [r7, #20]
 8002514:	f7ff ff90 	bl	8002438 <NVIC_EncodePriority>
 8002518:	4602      	mov	r2, r0
 800251a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800251e:	4611      	mov	r1, r2
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff ff5f 	bl	80023e4 <__NVIC_SetPriority>
}
 8002526:	bf00      	nop
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	4603      	mov	r3, r0
 8002536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff ff35 	bl	80023ac <__NVIC_EnableIRQ>
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff ffa2 	bl	800249c <SysTick_Config>
 8002558:	4603      	mov	r3, r0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002562:	b480      	push	{r7}
 8002564:	b085      	sub	sp, #20
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800256a:	2300      	movs	r3, #0
 800256c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d008      	beq.n	800258c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2204      	movs	r2, #4
 800257e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e020      	b.n	80025ce <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 020e 	bic.w	r2, r2, #14
 800259a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0201 	bic.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025b4:	2101      	movs	r1, #1
 80025b6:	fa01 f202 	lsl.w	r2, r1, r2
 80025ba:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr

080025d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025e0:	2300      	movs	r3, #0
 80025e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d005      	beq.n	80025fc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2204      	movs	r2, #4
 80025f4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	73fb      	strb	r3, [r7, #15]
 80025fa:	e051      	b.n	80026a0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 020e 	bic.w	r2, r2, #14
 800260a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0201 	bic.w	r2, r2, #1
 800261a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a22      	ldr	r2, [pc, #136]	@ (80026ac <HAL_DMA_Abort_IT+0xd4>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d029      	beq.n	800267a <HAL_DMA_Abort_IT+0xa2>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a21      	ldr	r2, [pc, #132]	@ (80026b0 <HAL_DMA_Abort_IT+0xd8>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d022      	beq.n	8002676 <HAL_DMA_Abort_IT+0x9e>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a1f      	ldr	r2, [pc, #124]	@ (80026b4 <HAL_DMA_Abort_IT+0xdc>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d01a      	beq.n	8002670 <HAL_DMA_Abort_IT+0x98>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a1e      	ldr	r2, [pc, #120]	@ (80026b8 <HAL_DMA_Abort_IT+0xe0>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d012      	beq.n	800266a <HAL_DMA_Abort_IT+0x92>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a1c      	ldr	r2, [pc, #112]	@ (80026bc <HAL_DMA_Abort_IT+0xe4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d00a      	beq.n	8002664 <HAL_DMA_Abort_IT+0x8c>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a1b      	ldr	r2, [pc, #108]	@ (80026c0 <HAL_DMA_Abort_IT+0xe8>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d102      	bne.n	800265e <HAL_DMA_Abort_IT+0x86>
 8002658:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800265c:	e00e      	b.n	800267c <HAL_DMA_Abort_IT+0xa4>
 800265e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002662:	e00b      	b.n	800267c <HAL_DMA_Abort_IT+0xa4>
 8002664:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002668:	e008      	b.n	800267c <HAL_DMA_Abort_IT+0xa4>
 800266a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800266e:	e005      	b.n	800267c <HAL_DMA_Abort_IT+0xa4>
 8002670:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002674:	e002      	b.n	800267c <HAL_DMA_Abort_IT+0xa4>
 8002676:	2310      	movs	r3, #16
 8002678:	e000      	b.n	800267c <HAL_DMA_Abort_IT+0xa4>
 800267a:	2301      	movs	r3, #1
 800267c:	4a11      	ldr	r2, [pc, #68]	@ (80026c4 <HAL_DMA_Abort_IT+0xec>)
 800267e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	4798      	blx	r3
    } 
  }
  return status;
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40020008 	.word	0x40020008
 80026b0:	4002001c 	.word	0x4002001c
 80026b4:	40020030 	.word	0x40020030
 80026b8:	40020044 	.word	0x40020044
 80026bc:	40020058 	.word	0x40020058
 80026c0:	4002006c 	.word	0x4002006c
 80026c4:	40020000 	.word	0x40020000

080026c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b08b      	sub	sp, #44	@ 0x2c
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026d2:	2300      	movs	r3, #0
 80026d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026d6:	2300      	movs	r3, #0
 80026d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026da:	e169      	b.n	80029b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026dc:	2201      	movs	r2, #1
 80026de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	69fa      	ldr	r2, [r7, #28]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	f040 8158 	bne.w	80029aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	4a9a      	ldr	r2, [pc, #616]	@ (8002968 <HAL_GPIO_Init+0x2a0>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d05e      	beq.n	80027c2 <HAL_GPIO_Init+0xfa>
 8002704:	4a98      	ldr	r2, [pc, #608]	@ (8002968 <HAL_GPIO_Init+0x2a0>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d875      	bhi.n	80027f6 <HAL_GPIO_Init+0x12e>
 800270a:	4a98      	ldr	r2, [pc, #608]	@ (800296c <HAL_GPIO_Init+0x2a4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d058      	beq.n	80027c2 <HAL_GPIO_Init+0xfa>
 8002710:	4a96      	ldr	r2, [pc, #600]	@ (800296c <HAL_GPIO_Init+0x2a4>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d86f      	bhi.n	80027f6 <HAL_GPIO_Init+0x12e>
 8002716:	4a96      	ldr	r2, [pc, #600]	@ (8002970 <HAL_GPIO_Init+0x2a8>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d052      	beq.n	80027c2 <HAL_GPIO_Init+0xfa>
 800271c:	4a94      	ldr	r2, [pc, #592]	@ (8002970 <HAL_GPIO_Init+0x2a8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d869      	bhi.n	80027f6 <HAL_GPIO_Init+0x12e>
 8002722:	4a94      	ldr	r2, [pc, #592]	@ (8002974 <HAL_GPIO_Init+0x2ac>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d04c      	beq.n	80027c2 <HAL_GPIO_Init+0xfa>
 8002728:	4a92      	ldr	r2, [pc, #584]	@ (8002974 <HAL_GPIO_Init+0x2ac>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d863      	bhi.n	80027f6 <HAL_GPIO_Init+0x12e>
 800272e:	4a92      	ldr	r2, [pc, #584]	@ (8002978 <HAL_GPIO_Init+0x2b0>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d046      	beq.n	80027c2 <HAL_GPIO_Init+0xfa>
 8002734:	4a90      	ldr	r2, [pc, #576]	@ (8002978 <HAL_GPIO_Init+0x2b0>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d85d      	bhi.n	80027f6 <HAL_GPIO_Init+0x12e>
 800273a:	2b12      	cmp	r3, #18
 800273c:	d82a      	bhi.n	8002794 <HAL_GPIO_Init+0xcc>
 800273e:	2b12      	cmp	r3, #18
 8002740:	d859      	bhi.n	80027f6 <HAL_GPIO_Init+0x12e>
 8002742:	a201      	add	r2, pc, #4	@ (adr r2, 8002748 <HAL_GPIO_Init+0x80>)
 8002744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002748:	080027c3 	.word	0x080027c3
 800274c:	0800279d 	.word	0x0800279d
 8002750:	080027af 	.word	0x080027af
 8002754:	080027f1 	.word	0x080027f1
 8002758:	080027f7 	.word	0x080027f7
 800275c:	080027f7 	.word	0x080027f7
 8002760:	080027f7 	.word	0x080027f7
 8002764:	080027f7 	.word	0x080027f7
 8002768:	080027f7 	.word	0x080027f7
 800276c:	080027f7 	.word	0x080027f7
 8002770:	080027f7 	.word	0x080027f7
 8002774:	080027f7 	.word	0x080027f7
 8002778:	080027f7 	.word	0x080027f7
 800277c:	080027f7 	.word	0x080027f7
 8002780:	080027f7 	.word	0x080027f7
 8002784:	080027f7 	.word	0x080027f7
 8002788:	080027f7 	.word	0x080027f7
 800278c:	080027a5 	.word	0x080027a5
 8002790:	080027b9 	.word	0x080027b9
 8002794:	4a79      	ldr	r2, [pc, #484]	@ (800297c <HAL_GPIO_Init+0x2b4>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d013      	beq.n	80027c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800279a:	e02c      	b.n	80027f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	623b      	str	r3, [r7, #32]
          break;
 80027a2:	e029      	b.n	80027f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	3304      	adds	r3, #4
 80027aa:	623b      	str	r3, [r7, #32]
          break;
 80027ac:	e024      	b.n	80027f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	3308      	adds	r3, #8
 80027b4:	623b      	str	r3, [r7, #32]
          break;
 80027b6:	e01f      	b.n	80027f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	330c      	adds	r3, #12
 80027be:	623b      	str	r3, [r7, #32]
          break;
 80027c0:	e01a      	b.n	80027f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d102      	bne.n	80027d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027ca:	2304      	movs	r3, #4
 80027cc:	623b      	str	r3, [r7, #32]
          break;
 80027ce:	e013      	b.n	80027f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d105      	bne.n	80027e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027d8:	2308      	movs	r3, #8
 80027da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69fa      	ldr	r2, [r7, #28]
 80027e0:	611a      	str	r2, [r3, #16]
          break;
 80027e2:	e009      	b.n	80027f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027e4:	2308      	movs	r3, #8
 80027e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69fa      	ldr	r2, [r7, #28]
 80027ec:	615a      	str	r2, [r3, #20]
          break;
 80027ee:	e003      	b.n	80027f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027f0:	2300      	movs	r3, #0
 80027f2:	623b      	str	r3, [r7, #32]
          break;
 80027f4:	e000      	b.n	80027f8 <HAL_GPIO_Init+0x130>
          break;
 80027f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	2bff      	cmp	r3, #255	@ 0xff
 80027fc:	d801      	bhi.n	8002802 <HAL_GPIO_Init+0x13a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	e001      	b.n	8002806 <HAL_GPIO_Init+0x13e>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3304      	adds	r3, #4
 8002806:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	2bff      	cmp	r3, #255	@ 0xff
 800280c:	d802      	bhi.n	8002814 <HAL_GPIO_Init+0x14c>
 800280e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	e002      	b.n	800281a <HAL_GPIO_Init+0x152>
 8002814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002816:	3b08      	subs	r3, #8
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	210f      	movs	r1, #15
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	fa01 f303 	lsl.w	r3, r1, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	401a      	ands	r2, r3
 800282c:	6a39      	ldr	r1, [r7, #32]
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	fa01 f303 	lsl.w	r3, r1, r3
 8002834:	431a      	orrs	r2, r3
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 80b1 	beq.w	80029aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002848:	4b4d      	ldr	r3, [pc, #308]	@ (8002980 <HAL_GPIO_Init+0x2b8>)
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	4a4c      	ldr	r2, [pc, #304]	@ (8002980 <HAL_GPIO_Init+0x2b8>)
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	6193      	str	r3, [r2, #24]
 8002854:	4b4a      	ldr	r3, [pc, #296]	@ (8002980 <HAL_GPIO_Init+0x2b8>)
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002860:	4a48      	ldr	r2, [pc, #288]	@ (8002984 <HAL_GPIO_Init+0x2bc>)
 8002862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002864:	089b      	lsrs	r3, r3, #2
 8002866:	3302      	adds	r3, #2
 8002868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800286c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800286e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	220f      	movs	r2, #15
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	4013      	ands	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a40      	ldr	r2, [pc, #256]	@ (8002988 <HAL_GPIO_Init+0x2c0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d013      	beq.n	80028b4 <HAL_GPIO_Init+0x1ec>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a3f      	ldr	r2, [pc, #252]	@ (800298c <HAL_GPIO_Init+0x2c4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d00d      	beq.n	80028b0 <HAL_GPIO_Init+0x1e8>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a3e      	ldr	r2, [pc, #248]	@ (8002990 <HAL_GPIO_Init+0x2c8>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d007      	beq.n	80028ac <HAL_GPIO_Init+0x1e4>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a3d      	ldr	r2, [pc, #244]	@ (8002994 <HAL_GPIO_Init+0x2cc>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d101      	bne.n	80028a8 <HAL_GPIO_Init+0x1e0>
 80028a4:	2303      	movs	r3, #3
 80028a6:	e006      	b.n	80028b6 <HAL_GPIO_Init+0x1ee>
 80028a8:	2304      	movs	r3, #4
 80028aa:	e004      	b.n	80028b6 <HAL_GPIO_Init+0x1ee>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e002      	b.n	80028b6 <HAL_GPIO_Init+0x1ee>
 80028b0:	2301      	movs	r3, #1
 80028b2:	e000      	b.n	80028b6 <HAL_GPIO_Init+0x1ee>
 80028b4:	2300      	movs	r3, #0
 80028b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028b8:	f002 0203 	and.w	r2, r2, #3
 80028bc:	0092      	lsls	r2, r2, #2
 80028be:	4093      	lsls	r3, r2
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028c6:	492f      	ldr	r1, [pc, #188]	@ (8002984 <HAL_GPIO_Init+0x2bc>)
 80028c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ca:	089b      	lsrs	r3, r3, #2
 80028cc:	3302      	adds	r3, #2
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d006      	beq.n	80028ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002998 <HAL_GPIO_Init+0x2d0>)
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	492c      	ldr	r1, [pc, #176]	@ (8002998 <HAL_GPIO_Init+0x2d0>)
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	608b      	str	r3, [r1, #8]
 80028ec:	e006      	b.n	80028fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002998 <HAL_GPIO_Init+0x2d0>)
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	43db      	mvns	r3, r3
 80028f6:	4928      	ldr	r1, [pc, #160]	@ (8002998 <HAL_GPIO_Init+0x2d0>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d006      	beq.n	8002916 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002908:	4b23      	ldr	r3, [pc, #140]	@ (8002998 <HAL_GPIO_Init+0x2d0>)
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	4922      	ldr	r1, [pc, #136]	@ (8002998 <HAL_GPIO_Init+0x2d0>)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	4313      	orrs	r3, r2
 8002912:	60cb      	str	r3, [r1, #12]
 8002914:	e006      	b.n	8002924 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002916:	4b20      	ldr	r3, [pc, #128]	@ (8002998 <HAL_GPIO_Init+0x2d0>)
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	43db      	mvns	r3, r3
 800291e:	491e      	ldr	r1, [pc, #120]	@ (8002998 <HAL_GPIO_Init+0x2d0>)
 8002920:	4013      	ands	r3, r2
 8002922:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d006      	beq.n	800293e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002930:	4b19      	ldr	r3, [pc, #100]	@ (8002998 <HAL_GPIO_Init+0x2d0>)
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	4918      	ldr	r1, [pc, #96]	@ (8002998 <HAL_GPIO_Init+0x2d0>)
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	4313      	orrs	r3, r2
 800293a:	604b      	str	r3, [r1, #4]
 800293c:	e006      	b.n	800294c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800293e:	4b16      	ldr	r3, [pc, #88]	@ (8002998 <HAL_GPIO_Init+0x2d0>)
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	43db      	mvns	r3, r3
 8002946:	4914      	ldr	r1, [pc, #80]	@ (8002998 <HAL_GPIO_Init+0x2d0>)
 8002948:	4013      	ands	r3, r2
 800294a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d021      	beq.n	800299c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002958:	4b0f      	ldr	r3, [pc, #60]	@ (8002998 <HAL_GPIO_Init+0x2d0>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	490e      	ldr	r1, [pc, #56]	@ (8002998 <HAL_GPIO_Init+0x2d0>)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	4313      	orrs	r3, r2
 8002962:	600b      	str	r3, [r1, #0]
 8002964:	e021      	b.n	80029aa <HAL_GPIO_Init+0x2e2>
 8002966:	bf00      	nop
 8002968:	10320000 	.word	0x10320000
 800296c:	10310000 	.word	0x10310000
 8002970:	10220000 	.word	0x10220000
 8002974:	10210000 	.word	0x10210000
 8002978:	10120000 	.word	0x10120000
 800297c:	10110000 	.word	0x10110000
 8002980:	40021000 	.word	0x40021000
 8002984:	40010000 	.word	0x40010000
 8002988:	40010800 	.word	0x40010800
 800298c:	40010c00 	.word	0x40010c00
 8002990:	40011000 	.word	0x40011000
 8002994:	40011400 	.word	0x40011400
 8002998:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800299c:	4b0b      	ldr	r3, [pc, #44]	@ (80029cc <HAL_GPIO_Init+0x304>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	4909      	ldr	r1, [pc, #36]	@ (80029cc <HAL_GPIO_Init+0x304>)
 80029a6:	4013      	ands	r3, r2
 80029a8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80029aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ac:	3301      	adds	r3, #1
 80029ae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f47f ae8e 	bne.w	80026dc <HAL_GPIO_Init+0x14>
  }
}
 80029c0:	bf00      	nop
 80029c2:	bf00      	nop
 80029c4:	372c      	adds	r7, #44	@ 0x2c
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr
 80029cc:	40010400 	.word	0x40010400

080029d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	807b      	strh	r3, [r7, #2]
 80029dc:	4613      	mov	r3, r2
 80029de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029e0:	787b      	ldrb	r3, [r7, #1]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029e6:	887a      	ldrh	r2, [r7, #2]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029ec:	e003      	b.n	80029f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029ee:	887b      	ldrh	r3, [r7, #2]
 80029f0:	041a      	lsls	r2, r3, #16
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	611a      	str	r2, [r3, #16]
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a12:	887a      	ldrh	r2, [r7, #2]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4013      	ands	r3, r2
 8002a18:	041a      	lsls	r2, r3, #16
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	43d9      	mvns	r1, r3
 8002a1e:	887b      	ldrh	r3, [r7, #2]
 8002a20:	400b      	ands	r3, r1
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	611a      	str	r2, [r3, #16]
}
 8002a28:	bf00      	nop
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bc80      	pop	{r7}
 8002a30:	4770      	bx	lr
	...

08002a34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e272      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 8087 	beq.w	8002b62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a54:	4b92      	ldr	r3, [pc, #584]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 030c 	and.w	r3, r3, #12
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d00c      	beq.n	8002a7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a60:	4b8f      	ldr	r3, [pc, #572]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 030c 	and.w	r3, r3, #12
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d112      	bne.n	8002a92 <HAL_RCC_OscConfig+0x5e>
 8002a6c:	4b8c      	ldr	r3, [pc, #560]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a78:	d10b      	bne.n	8002a92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7a:	4b89      	ldr	r3, [pc, #548]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d06c      	beq.n	8002b60 <HAL_RCC_OscConfig+0x12c>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d168      	bne.n	8002b60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e24c      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a9a:	d106      	bne.n	8002aaa <HAL_RCC_OscConfig+0x76>
 8002a9c:	4b80      	ldr	r3, [pc, #512]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a7f      	ldr	r2, [pc, #508]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002aa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aa6:	6013      	str	r3, [r2, #0]
 8002aa8:	e02e      	b.n	8002b08 <HAL_RCC_OscConfig+0xd4>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCC_OscConfig+0x98>
 8002ab2:	4b7b      	ldr	r3, [pc, #492]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a7a      	ldr	r2, [pc, #488]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	4b78      	ldr	r3, [pc, #480]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a77      	ldr	r2, [pc, #476]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	e01d      	b.n	8002b08 <HAL_RCC_OscConfig+0xd4>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ad4:	d10c      	bne.n	8002af0 <HAL_RCC_OscConfig+0xbc>
 8002ad6:	4b72      	ldr	r3, [pc, #456]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a71      	ldr	r2, [pc, #452]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002adc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	4b6f      	ldr	r3, [pc, #444]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a6e      	ldr	r2, [pc, #440]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	e00b      	b.n	8002b08 <HAL_RCC_OscConfig+0xd4>
 8002af0:	4b6b      	ldr	r3, [pc, #428]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a6a      	ldr	r2, [pc, #424]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002af6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	4b68      	ldr	r3, [pc, #416]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a67      	ldr	r2, [pc, #412]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002b02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d013      	beq.n	8002b38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b10:	f7ff fbe2 	bl	80022d8 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b18:	f7ff fbde 	bl	80022d8 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b64      	cmp	r3, #100	@ 0x64
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e200      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCC_OscConfig+0xe4>
 8002b36:	e014      	b.n	8002b62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b38:	f7ff fbce 	bl	80022d8 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b40:	f7ff fbca 	bl	80022d8 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b64      	cmp	r3, #100	@ 0x64
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e1ec      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b52:	4b53      	ldr	r3, [pc, #332]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1f0      	bne.n	8002b40 <HAL_RCC_OscConfig+0x10c>
 8002b5e:	e000      	b.n	8002b62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d063      	beq.n	8002c36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b6e:	4b4c      	ldr	r3, [pc, #304]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f003 030c 	and.w	r3, r3, #12
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00b      	beq.n	8002b92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b7a:	4b49      	ldr	r3, [pc, #292]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d11c      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x18c>
 8002b86:	4b46      	ldr	r3, [pc, #280]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d116      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b92:	4b43      	ldr	r3, [pc, #268]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d005      	beq.n	8002baa <HAL_RCC_OscConfig+0x176>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d001      	beq.n	8002baa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e1c0      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002baa:	4b3d      	ldr	r3, [pc, #244]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	4939      	ldr	r1, [pc, #228]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bbe:	e03a      	b.n	8002c36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d020      	beq.n	8002c0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc8:	4b36      	ldr	r3, [pc, #216]	@ (8002ca4 <HAL_RCC_OscConfig+0x270>)
 8002bca:	2201      	movs	r2, #1
 8002bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bce:	f7ff fb83 	bl	80022d8 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bd6:	f7ff fb7f 	bl	80022d8 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e1a1      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be8:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0f0      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf4:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	4927      	ldr	r1, [pc, #156]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	600b      	str	r3, [r1, #0]
 8002c08:	e015      	b.n	8002c36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c0a:	4b26      	ldr	r3, [pc, #152]	@ (8002ca4 <HAL_RCC_OscConfig+0x270>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c10:	f7ff fb62 	bl	80022d8 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c18:	f7ff fb5e 	bl	80022d8 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e180      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f0      	bne.n	8002c18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d03a      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d019      	beq.n	8002c7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c4a:	4b17      	ldr	r3, [pc, #92]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c50:	f7ff fb42 	bl	80022d8 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c58:	f7ff fb3e 	bl	80022d8 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e160      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca0 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c76:	2001      	movs	r0, #1
 8002c78:	f000 face 	bl	8003218 <RCC_Delay>
 8002c7c:	e01c      	b.n	8002cb8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca8 <HAL_RCC_OscConfig+0x274>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c84:	f7ff fb28 	bl	80022d8 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c8a:	e00f      	b.n	8002cac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c8c:	f7ff fb24 	bl	80022d8 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d908      	bls.n	8002cac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e146      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>
 8002c9e:	bf00      	nop
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	42420000 	.word	0x42420000
 8002ca8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cac:	4b92      	ldr	r3, [pc, #584]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1e9      	bne.n	8002c8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 80a6 	beq.w	8002e12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cca:	4b8b      	ldr	r3, [pc, #556]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10d      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cd6:	4b88      	ldr	r3, [pc, #544]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	4a87      	ldr	r2, [pc, #540]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002cdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ce0:	61d3      	str	r3, [r2, #28]
 8002ce2:	4b85      	ldr	r3, [pc, #532]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cea:	60bb      	str	r3, [r7, #8]
 8002cec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf2:	4b82      	ldr	r3, [pc, #520]	@ (8002efc <HAL_RCC_OscConfig+0x4c8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d118      	bne.n	8002d30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cfe:	4b7f      	ldr	r3, [pc, #508]	@ (8002efc <HAL_RCC_OscConfig+0x4c8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a7e      	ldr	r2, [pc, #504]	@ (8002efc <HAL_RCC_OscConfig+0x4c8>)
 8002d04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d0a:	f7ff fae5 	bl	80022d8 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d12:	f7ff fae1 	bl	80022d8 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b64      	cmp	r3, #100	@ 0x64
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e103      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d24:	4b75      	ldr	r3, [pc, #468]	@ (8002efc <HAL_RCC_OscConfig+0x4c8>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0f0      	beq.n	8002d12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d106      	bne.n	8002d46 <HAL_RCC_OscConfig+0x312>
 8002d38:	4b6f      	ldr	r3, [pc, #444]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	4a6e      	ldr	r2, [pc, #440]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	6213      	str	r3, [r2, #32]
 8002d44:	e02d      	b.n	8002da2 <HAL_RCC_OscConfig+0x36e>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10c      	bne.n	8002d68 <HAL_RCC_OscConfig+0x334>
 8002d4e:	4b6a      	ldr	r3, [pc, #424]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	4a69      	ldr	r2, [pc, #420]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002d54:	f023 0301 	bic.w	r3, r3, #1
 8002d58:	6213      	str	r3, [r2, #32]
 8002d5a:	4b67      	ldr	r3, [pc, #412]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	4a66      	ldr	r2, [pc, #408]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002d60:	f023 0304 	bic.w	r3, r3, #4
 8002d64:	6213      	str	r3, [r2, #32]
 8002d66:	e01c      	b.n	8002da2 <HAL_RCC_OscConfig+0x36e>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	2b05      	cmp	r3, #5
 8002d6e:	d10c      	bne.n	8002d8a <HAL_RCC_OscConfig+0x356>
 8002d70:	4b61      	ldr	r3, [pc, #388]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	4a60      	ldr	r2, [pc, #384]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002d76:	f043 0304 	orr.w	r3, r3, #4
 8002d7a:	6213      	str	r3, [r2, #32]
 8002d7c:	4b5e      	ldr	r3, [pc, #376]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	4a5d      	ldr	r2, [pc, #372]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	6213      	str	r3, [r2, #32]
 8002d88:	e00b      	b.n	8002da2 <HAL_RCC_OscConfig+0x36e>
 8002d8a:	4b5b      	ldr	r3, [pc, #364]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	4a5a      	ldr	r2, [pc, #360]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002d90:	f023 0301 	bic.w	r3, r3, #1
 8002d94:	6213      	str	r3, [r2, #32]
 8002d96:	4b58      	ldr	r3, [pc, #352]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	4a57      	ldr	r2, [pc, #348]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002d9c:	f023 0304 	bic.w	r3, r3, #4
 8002da0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d015      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002daa:	f7ff fa95 	bl	80022d8 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db0:	e00a      	b.n	8002dc8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db2:	f7ff fa91 	bl	80022d8 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e0b1      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc8:	4b4b      	ldr	r3, [pc, #300]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0ee      	beq.n	8002db2 <HAL_RCC_OscConfig+0x37e>
 8002dd4:	e014      	b.n	8002e00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd6:	f7ff fa7f 	bl	80022d8 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ddc:	e00a      	b.n	8002df4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dde:	f7ff fa7b 	bl	80022d8 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e09b      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df4:	4b40      	ldr	r3, [pc, #256]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1ee      	bne.n	8002dde <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e00:	7dfb      	ldrb	r3, [r7, #23]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d105      	bne.n	8002e12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e06:	4b3c      	ldr	r3, [pc, #240]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	4a3b      	ldr	r2, [pc, #236]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002e0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 8087 	beq.w	8002f2a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e1c:	4b36      	ldr	r3, [pc, #216]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 030c 	and.w	r3, r3, #12
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d061      	beq.n	8002eec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d146      	bne.n	8002ebe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e30:	4b33      	ldr	r3, [pc, #204]	@ (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e36:	f7ff fa4f 	bl	80022d8 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3e:	f7ff fa4b 	bl	80022d8 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e06d      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e50:	4b29      	ldr	r3, [pc, #164]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1f0      	bne.n	8002e3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e64:	d108      	bne.n	8002e78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e66:	4b24      	ldr	r3, [pc, #144]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	4921      	ldr	r1, [pc, #132]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e78:	4b1f      	ldr	r3, [pc, #124]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a19      	ldr	r1, [r3, #32]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e88:	430b      	orrs	r3, r1
 8002e8a:	491b      	ldr	r1, [pc, #108]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e90:	4b1b      	ldr	r3, [pc, #108]	@ (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e96:	f7ff fa1f 	bl	80022d8 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e9e:	f7ff fa1b 	bl	80022d8 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e03d      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eb0:	4b11      	ldr	r3, [pc, #68]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCC_OscConfig+0x46a>
 8002ebc:	e035      	b.n	8002f2a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ebe:	4b10      	ldr	r3, [pc, #64]	@ (8002f00 <HAL_RCC_OscConfig+0x4cc>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec4:	f7ff fa08 	bl	80022d8 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ecc:	f7ff fa04 	bl	80022d8 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e026      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ede:	4b06      	ldr	r3, [pc, #24]	@ (8002ef8 <HAL_RCC_OscConfig+0x4c4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f0      	bne.n	8002ecc <HAL_RCC_OscConfig+0x498>
 8002eea:	e01e      	b.n	8002f2a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	69db      	ldr	r3, [r3, #28]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d107      	bne.n	8002f04 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e019      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40007000 	.word	0x40007000
 8002f00:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f04:	4b0b      	ldr	r3, [pc, #44]	@ (8002f34 <HAL_RCC_OscConfig+0x500>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d106      	bne.n	8002f26 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d001      	beq.n	8002f2a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40021000 	.word	0x40021000

08002f38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0d0      	b.n	80030ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f4c:	4b6a      	ldr	r3, [pc, #424]	@ (80030f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d910      	bls.n	8002f7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5a:	4b67      	ldr	r3, [pc, #412]	@ (80030f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f023 0207 	bic.w	r2, r3, #7
 8002f62:	4965      	ldr	r1, [pc, #404]	@ (80030f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6a:	4b63      	ldr	r3, [pc, #396]	@ (80030f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d001      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0b8      	b.n	80030ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d020      	beq.n	8002fca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f94:	4b59      	ldr	r3, [pc, #356]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	4a58      	ldr	r2, [pc, #352]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 8002f9a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fac:	4b53      	ldr	r3, [pc, #332]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	4a52      	ldr	r2, [pc, #328]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 8002fb2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002fb6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb8:	4b50      	ldr	r3, [pc, #320]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	494d      	ldr	r1, [pc, #308]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d040      	beq.n	8003058 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d107      	bne.n	8002fee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fde:	4b47      	ldr	r3, [pc, #284]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d115      	bne.n	8003016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e07f      	b.n	80030ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d107      	bne.n	8003006 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff6:	4b41      	ldr	r3, [pc, #260]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d109      	bne.n	8003016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e073      	b.n	80030ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003006:	4b3d      	ldr	r3, [pc, #244]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e06b      	b.n	80030ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003016:	4b39      	ldr	r3, [pc, #228]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f023 0203 	bic.w	r2, r3, #3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	4936      	ldr	r1, [pc, #216]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 8003024:	4313      	orrs	r3, r2
 8003026:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003028:	f7ff f956 	bl	80022d8 <HAL_GetTick>
 800302c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302e:	e00a      	b.n	8003046 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003030:	f7ff f952 	bl	80022d8 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800303e:	4293      	cmp	r3, r2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e053      	b.n	80030ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003046:	4b2d      	ldr	r3, [pc, #180]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 020c 	and.w	r2, r3, #12
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	429a      	cmp	r2, r3
 8003056:	d1eb      	bne.n	8003030 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003058:	4b27      	ldr	r3, [pc, #156]	@ (80030f8 <HAL_RCC_ClockConfig+0x1c0>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d210      	bcs.n	8003088 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003066:	4b24      	ldr	r3, [pc, #144]	@ (80030f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 0207 	bic.w	r2, r3, #7
 800306e:	4922      	ldr	r1, [pc, #136]	@ (80030f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	4313      	orrs	r3, r2
 8003074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003076:	4b20      	ldr	r3, [pc, #128]	@ (80030f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e032      	b.n	80030ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003094:	4b19      	ldr	r3, [pc, #100]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	4916      	ldr	r1, [pc, #88]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d009      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030b2:	4b12      	ldr	r3, [pc, #72]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	490e      	ldr	r1, [pc, #56]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030c6:	f000 f821 	bl	800310c <HAL_RCC_GetSysClockFreq>
 80030ca:	4602      	mov	r2, r0
 80030cc:	4b0b      	ldr	r3, [pc, #44]	@ (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	091b      	lsrs	r3, r3, #4
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	490a      	ldr	r1, [pc, #40]	@ (8003100 <HAL_RCC_ClockConfig+0x1c8>)
 80030d8:	5ccb      	ldrb	r3, [r1, r3]
 80030da:	fa22 f303 	lsr.w	r3, r2, r3
 80030de:	4a09      	ldr	r2, [pc, #36]	@ (8003104 <HAL_RCC_ClockConfig+0x1cc>)
 80030e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030e2:	4b09      	ldr	r3, [pc, #36]	@ (8003108 <HAL_RCC_ClockConfig+0x1d0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff f8b4 	bl	8002254 <HAL_InitTick>

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40022000 	.word	0x40022000
 80030fc:	40021000 	.word	0x40021000
 8003100:	08009844 	.word	0x08009844
 8003104:	20000008 	.word	0x20000008
 8003108:	2000000c 	.word	0x2000000c

0800310c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800310c:	b480      	push	{r7}
 800310e:	b087      	sub	sp, #28
 8003110:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	2300      	movs	r3, #0
 8003118:	60bb      	str	r3, [r7, #8]
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	2300      	movs	r3, #0
 8003120:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003122:	2300      	movs	r3, #0
 8003124:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003126:	4b1e      	ldr	r3, [pc, #120]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f003 030c 	and.w	r3, r3, #12
 8003132:	2b04      	cmp	r3, #4
 8003134:	d002      	beq.n	800313c <HAL_RCC_GetSysClockFreq+0x30>
 8003136:	2b08      	cmp	r3, #8
 8003138:	d003      	beq.n	8003142 <HAL_RCC_GetSysClockFreq+0x36>
 800313a:	e027      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800313c:	4b19      	ldr	r3, [pc, #100]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800313e:	613b      	str	r3, [r7, #16]
      break;
 8003140:	e027      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	0c9b      	lsrs	r3, r3, #18
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	4a17      	ldr	r2, [pc, #92]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800314c:	5cd3      	ldrb	r3, [r2, r3]
 800314e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d010      	beq.n	800317c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800315a:	4b11      	ldr	r3, [pc, #68]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	0c5b      	lsrs	r3, r3, #17
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	4a11      	ldr	r2, [pc, #68]	@ (80031ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8003166:	5cd3      	ldrb	r3, [r2, r3]
 8003168:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a0d      	ldr	r2, [pc, #52]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800316e:	fb03 f202 	mul.w	r2, r3, r2
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	fbb2 f3f3 	udiv	r3, r2, r3
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	e004      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a0c      	ldr	r2, [pc, #48]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003180:	fb02 f303 	mul.w	r3, r2, r3
 8003184:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	613b      	str	r3, [r7, #16]
      break;
 800318a:	e002      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800318c:	4b05      	ldr	r3, [pc, #20]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800318e:	613b      	str	r3, [r7, #16]
      break;
 8003190:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003192:	693b      	ldr	r3, [r7, #16]
}
 8003194:	4618      	mov	r0, r3
 8003196:	371c      	adds	r7, #28
 8003198:	46bd      	mov	sp, r7
 800319a:	bc80      	pop	{r7}
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40021000 	.word	0x40021000
 80031a4:	007a1200 	.word	0x007a1200
 80031a8:	0800985c 	.word	0x0800985c
 80031ac:	0800986c 	.word	0x0800986c
 80031b0:	003d0900 	.word	0x003d0900

080031b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031b8:	4b02      	ldr	r3, [pc, #8]	@ (80031c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80031ba:	681b      	ldr	r3, [r3, #0]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr
 80031c4:	20000008 	.word	0x20000008

080031c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031cc:	f7ff fff2 	bl	80031b4 <HAL_RCC_GetHCLKFreq>
 80031d0:	4602      	mov	r2, r0
 80031d2:	4b05      	ldr	r3, [pc, #20]	@ (80031e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	0a1b      	lsrs	r3, r3, #8
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	4903      	ldr	r1, [pc, #12]	@ (80031ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80031de:	5ccb      	ldrb	r3, [r1, r3]
 80031e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40021000 	.word	0x40021000
 80031ec:	08009854 	.word	0x08009854

080031f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031f4:	f7ff ffde 	bl	80031b4 <HAL_RCC_GetHCLKFreq>
 80031f8:	4602      	mov	r2, r0
 80031fa:	4b05      	ldr	r3, [pc, #20]	@ (8003210 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	0adb      	lsrs	r3, r3, #11
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	4903      	ldr	r1, [pc, #12]	@ (8003214 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003206:	5ccb      	ldrb	r3, [r1, r3]
 8003208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800320c:	4618      	mov	r0, r3
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40021000 	.word	0x40021000
 8003214:	08009854 	.word	0x08009854

08003218 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003220:	4b0a      	ldr	r3, [pc, #40]	@ (800324c <RCC_Delay+0x34>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a0a      	ldr	r2, [pc, #40]	@ (8003250 <RCC_Delay+0x38>)
 8003226:	fba2 2303 	umull	r2, r3, r2, r3
 800322a:	0a5b      	lsrs	r3, r3, #9
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	fb02 f303 	mul.w	r3, r2, r3
 8003232:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003234:	bf00      	nop
  }
  while (Delay --);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	1e5a      	subs	r2, r3, #1
 800323a:	60fa      	str	r2, [r7, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f9      	bne.n	8003234 <RCC_Delay+0x1c>
}
 8003240:	bf00      	nop
 8003242:	bf00      	nop
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr
 800324c:	20000008 	.word	0x20000008
 8003250:	10624dd3 	.word	0x10624dd3

08003254 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e076      	b.n	8003354 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326a:	2b00      	cmp	r3, #0
 800326c:	d108      	bne.n	8003280 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003276:	d009      	beq.n	800328c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	61da      	str	r2, [r3, #28]
 800327e:	e005      	b.n	800328c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d106      	bne.n	80032ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7fe fe16 	bl	8001ed8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80032d4:	431a      	orrs	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	431a      	orrs	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032fc:	431a      	orrs	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003310:	ea42 0103 	orr.w	r1, r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003318:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	0c1a      	lsrs	r2, r3, #16
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f002 0204 	and.w	r2, r2, #4
 8003332:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	69da      	ldr	r2, [r3, #28]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003342:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	603b      	str	r3, [r7, #0]
 8003368:	4613      	mov	r3, r2
 800336a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800336c:	f7fe ffb4 	bl	80022d8 <HAL_GetTick>
 8003370:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b01      	cmp	r3, #1
 8003380:	d001      	beq.n	8003386 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003382:	2302      	movs	r3, #2
 8003384:	e12a      	b.n	80035dc <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <HAL_SPI_Transmit+0x36>
 800338c:	88fb      	ldrh	r3, [r7, #6]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e122      	b.n	80035dc <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800339c:	2b01      	cmp	r3, #1
 800339e:	d101      	bne.n	80033a4 <HAL_SPI_Transmit+0x48>
 80033a0:	2302      	movs	r3, #2
 80033a2:	e11b      	b.n	80035dc <HAL_SPI_Transmit+0x280>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2203      	movs	r2, #3
 80033b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	88fa      	ldrh	r2, [r7, #6]
 80033c4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	88fa      	ldrh	r2, [r7, #6]
 80033ca:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033f2:	d10f      	bne.n	8003414 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003402:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003412:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800341e:	2b40      	cmp	r3, #64	@ 0x40
 8003420:	d007      	beq.n	8003432 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003430:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800343a:	d152      	bne.n	80034e2 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d002      	beq.n	800344a <HAL_SPI_Transmit+0xee>
 8003444:	8b7b      	ldrh	r3, [r7, #26]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d145      	bne.n	80034d6 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344e:	881a      	ldrh	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345a:	1c9a      	adds	r2, r3, #2
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003464:	b29b      	uxth	r3, r3
 8003466:	3b01      	subs	r3, #1
 8003468:	b29a      	uxth	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800346e:	e032      	b.n	80034d6 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b02      	cmp	r3, #2
 800347c:	d112      	bne.n	80034a4 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003482:	881a      	ldrh	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348e:	1c9a      	adds	r2, r3, #2
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003498:	b29b      	uxth	r3, r3
 800349a:	3b01      	subs	r3, #1
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80034a2:	e018      	b.n	80034d6 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034a4:	f7fe ff18 	bl	80022d8 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d803      	bhi.n	80034bc <HAL_SPI_Transmit+0x160>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034ba:	d102      	bne.n	80034c2 <HAL_SPI_Transmit+0x166>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d109      	bne.n	80034d6 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e082      	b.n	80035dc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034da:	b29b      	uxth	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1c7      	bne.n	8003470 <HAL_SPI_Transmit+0x114>
 80034e0:	e053      	b.n	800358a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d002      	beq.n	80034f0 <HAL_SPI_Transmit+0x194>
 80034ea:	8b7b      	ldrh	r3, [r7, #26]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d147      	bne.n	8003580 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	330c      	adds	r3, #12
 80034fa:	7812      	ldrb	r2, [r2, #0]
 80034fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800350c:	b29b      	uxth	r3, r3
 800350e:	3b01      	subs	r3, #1
 8003510:	b29a      	uxth	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003516:	e033      	b.n	8003580 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b02      	cmp	r3, #2
 8003524:	d113      	bne.n	800354e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	330c      	adds	r3, #12
 8003530:	7812      	ldrb	r2, [r2, #0]
 8003532:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003538:	1c5a      	adds	r2, r3, #1
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003542:	b29b      	uxth	r3, r3
 8003544:	3b01      	subs	r3, #1
 8003546:	b29a      	uxth	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800354c:	e018      	b.n	8003580 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800354e:	f7fe fec3 	bl	80022d8 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	429a      	cmp	r2, r3
 800355c:	d803      	bhi.n	8003566 <HAL_SPI_Transmit+0x20a>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003564:	d102      	bne.n	800356c <HAL_SPI_Transmit+0x210>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d109      	bne.n	8003580 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e02d      	b.n	80035dc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003584:	b29b      	uxth	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1c6      	bne.n	8003518 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800358a:	69fa      	ldr	r2, [r7, #28]
 800358c:	6839      	ldr	r1, [r7, #0]
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 fbd2 	bl	8003d38 <SPI_EndRxTxTransaction>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2220      	movs	r2, #32
 800359e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10a      	bne.n	80035be <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80035da:	2300      	movs	r3, #0
  }
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3720      	adds	r7, #32
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b088      	sub	sp, #32
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	603b      	str	r3, [r7, #0]
 80035f0:	4613      	mov	r3, r2
 80035f2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d001      	beq.n	8003604 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003600:	2302      	movs	r3, #2
 8003602:	e104      	b.n	800380e <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800360c:	d112      	bne.n	8003634 <HAL_SPI_Receive+0x50>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10e      	bne.n	8003634 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2204      	movs	r2, #4
 800361a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800361e:	88fa      	ldrh	r2, [r7, #6]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	4613      	mov	r3, r2
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	68b9      	ldr	r1, [r7, #8]
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 f8f3 	bl	8003816 <HAL_SPI_TransmitReceive>
 8003630:	4603      	mov	r3, r0
 8003632:	e0ec      	b.n	800380e <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003634:	f7fe fe50 	bl	80022d8 <HAL_GetTick>
 8003638:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <HAL_SPI_Receive+0x62>
 8003640:	88fb      	ldrh	r3, [r7, #6]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e0e1      	b.n	800380e <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003650:	2b01      	cmp	r3, #1
 8003652:	d101      	bne.n	8003658 <HAL_SPI_Receive+0x74>
 8003654:	2302      	movs	r3, #2
 8003656:	e0da      	b.n	800380e <HAL_SPI_Receive+0x22a>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2204      	movs	r2, #4
 8003664:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	88fa      	ldrh	r2, [r7, #6]
 8003678:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	88fa      	ldrh	r2, [r7, #6]
 800367e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036a6:	d10f      	bne.n	80036c8 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80036c6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036d2:	2b40      	cmp	r3, #64	@ 0x40
 80036d4:	d007      	beq.n	80036e6 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036e4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d170      	bne.n	80037d0 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80036ee:	e035      	b.n	800375c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d115      	bne.n	800372a <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f103 020c 	add.w	r2, r3, #12
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800370a:	7812      	ldrb	r2, [r2, #0]
 800370c:	b2d2      	uxtb	r2, r2
 800370e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800371e:	b29b      	uxth	r3, r3
 8003720:	3b01      	subs	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003728:	e018      	b.n	800375c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800372a:	f7fe fdd5 	bl	80022d8 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	429a      	cmp	r2, r3
 8003738:	d803      	bhi.n	8003742 <HAL_SPI_Receive+0x15e>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003740:	d102      	bne.n	8003748 <HAL_SPI_Receive+0x164>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d109      	bne.n	800375c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e058      	b.n	800380e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003760:	b29b      	uxth	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1c4      	bne.n	80036f0 <HAL_SPI_Receive+0x10c>
 8003766:	e038      	b.n	80037da <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b01      	cmp	r3, #1
 8003774:	d113      	bne.n	800379e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003780:	b292      	uxth	r2, r2
 8003782:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003788:	1c9a      	adds	r2, r3, #2
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003792:	b29b      	uxth	r3, r3
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800379c:	e018      	b.n	80037d0 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800379e:	f7fe fd9b 	bl	80022d8 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d803      	bhi.n	80037b6 <HAL_SPI_Receive+0x1d2>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037b4:	d102      	bne.n	80037bc <HAL_SPI_Receive+0x1d8>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d109      	bne.n	80037d0 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e01e      	b.n	800380e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1c6      	bne.n	8003768 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	6839      	ldr	r1, [r7, #0]
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 fa58 	bl	8003c94 <SPI_EndRxTransaction>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2220      	movs	r2, #32
 80037ee:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e000      	b.n	800380e <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800380c:	2300      	movs	r3, #0
  }
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b08a      	sub	sp, #40	@ 0x28
 800381a:	af00      	add	r7, sp, #0
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	607a      	str	r2, [r7, #4]
 8003822:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003824:	2301      	movs	r3, #1
 8003826:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003828:	f7fe fd56 	bl	80022d8 <HAL_GetTick>
 800382c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003834:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800383c:	887b      	ldrh	r3, [r7, #2]
 800383e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003840:	7ffb      	ldrb	r3, [r7, #31]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d00c      	beq.n	8003860 <HAL_SPI_TransmitReceive+0x4a>
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800384c:	d106      	bne.n	800385c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d102      	bne.n	800385c <HAL_SPI_TransmitReceive+0x46>
 8003856:	7ffb      	ldrb	r3, [r7, #31]
 8003858:	2b04      	cmp	r3, #4
 800385a:	d001      	beq.n	8003860 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800385c:	2302      	movs	r3, #2
 800385e:	e17f      	b.n	8003b60 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d005      	beq.n	8003872 <HAL_SPI_TransmitReceive+0x5c>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <HAL_SPI_TransmitReceive+0x5c>
 800386c:	887b      	ldrh	r3, [r7, #2]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e174      	b.n	8003b60 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800387c:	2b01      	cmp	r3, #1
 800387e:	d101      	bne.n	8003884 <HAL_SPI_TransmitReceive+0x6e>
 8003880:	2302      	movs	r3, #2
 8003882:	e16d      	b.n	8003b60 <HAL_SPI_TransmitReceive+0x34a>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b04      	cmp	r3, #4
 8003896:	d003      	beq.n	80038a0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2205      	movs	r2, #5
 800389c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	887a      	ldrh	r2, [r7, #2]
 80038b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	887a      	ldrh	r2, [r7, #2]
 80038b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	887a      	ldrh	r2, [r7, #2]
 80038c2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	887a      	ldrh	r2, [r7, #2]
 80038c8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e0:	2b40      	cmp	r3, #64	@ 0x40
 80038e2:	d007      	beq.n	80038f4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038fc:	d17e      	bne.n	80039fc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <HAL_SPI_TransmitReceive+0xf6>
 8003906:	8afb      	ldrh	r3, [r7, #22]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d16c      	bne.n	80039e6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003910:	881a      	ldrh	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391c:	1c9a      	adds	r2, r3, #2
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003930:	e059      	b.n	80039e6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b02      	cmp	r3, #2
 800393e:	d11b      	bne.n	8003978 <HAL_SPI_TransmitReceive+0x162>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003944:	b29b      	uxth	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d016      	beq.n	8003978 <HAL_SPI_TransmitReceive+0x162>
 800394a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394c:	2b01      	cmp	r3, #1
 800394e:	d113      	bne.n	8003978 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003954:	881a      	ldrh	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003960:	1c9a      	adds	r2, r3, #2
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800396a:	b29b      	uxth	r3, r3
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b01      	cmp	r3, #1
 8003984:	d119      	bne.n	80039ba <HAL_SPI_TransmitReceive+0x1a4>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800398a:	b29b      	uxth	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d014      	beq.n	80039ba <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800399a:	b292      	uxth	r2, r2
 800399c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a2:	1c9a      	adds	r2, r3, #2
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039b6:	2301      	movs	r3, #1
 80039b8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80039ba:	f7fe fc8d 	bl	80022d8 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d80d      	bhi.n	80039e6 <HAL_SPI_TransmitReceive+0x1d0>
 80039ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039d0:	d009      	beq.n	80039e6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e0bc      	b.n	8003b60 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1a0      	bne.n	8003932 <HAL_SPI_TransmitReceive+0x11c>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d19b      	bne.n	8003932 <HAL_SPI_TransmitReceive+0x11c>
 80039fa:	e082      	b.n	8003b02 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <HAL_SPI_TransmitReceive+0x1f4>
 8003a04:	8afb      	ldrh	r3, [r7, #22]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d171      	bne.n	8003aee <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	330c      	adds	r3, #12
 8003a14:	7812      	ldrb	r2, [r2, #0]
 8003a16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a30:	e05d      	b.n	8003aee <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d11c      	bne.n	8003a7a <HAL_SPI_TransmitReceive+0x264>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d017      	beq.n	8003a7a <HAL_SPI_TransmitReceive+0x264>
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d114      	bne.n	8003a7a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	330c      	adds	r3, #12
 8003a5a:	7812      	ldrb	r2, [r2, #0]
 8003a5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d119      	bne.n	8003abc <HAL_SPI_TransmitReceive+0x2a6>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d014      	beq.n	8003abc <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa4:	1c5a      	adds	r2, r3, #1
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003abc:	f7fe fc0c 	bl	80022d8 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d803      	bhi.n	8003ad4 <HAL_SPI_TransmitReceive+0x2be>
 8003acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ace:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ad2:	d102      	bne.n	8003ada <HAL_SPI_TransmitReceive+0x2c4>
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d109      	bne.n	8003aee <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e038      	b.n	8003b60 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d19c      	bne.n	8003a32 <HAL_SPI_TransmitReceive+0x21c>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d197      	bne.n	8003a32 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b02:	6a3a      	ldr	r2, [r7, #32]
 8003b04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 f916 	bl	8003d38 <SPI_EndRxTxTransaction>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d008      	beq.n	8003b24 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2220      	movs	r2, #32
 8003b16:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e01d      	b.n	8003b60 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10a      	bne.n	8003b42 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	613b      	str	r3, [r7, #16]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	613b      	str	r3, [r7, #16]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	613b      	str	r3, [r7, #16]
 8003b40:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
  }
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3728      	adds	r7, #40	@ 0x28
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b76:	b2db      	uxtb	r3, r3
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	4770      	bx	lr
	...

08003b84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b088      	sub	sp, #32
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	603b      	str	r3, [r7, #0]
 8003b90:	4613      	mov	r3, r2
 8003b92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b94:	f7fe fba0 	bl	80022d8 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b9c:	1a9b      	subs	r3, r3, r2
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ba4:	f7fe fb98 	bl	80022d8 <HAL_GetTick>
 8003ba8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003baa:	4b39      	ldr	r3, [pc, #228]	@ (8003c90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	015b      	lsls	r3, r3, #5
 8003bb0:	0d1b      	lsrs	r3, r3, #20
 8003bb2:	69fa      	ldr	r2, [r7, #28]
 8003bb4:	fb02 f303 	mul.w	r3, r2, r3
 8003bb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bba:	e054      	b.n	8003c66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bc2:	d050      	beq.n	8003c66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bc4:	f7fe fb88 	bl	80022d8 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	69fa      	ldr	r2, [r7, #28]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d902      	bls.n	8003bda <SPI_WaitFlagStateUntilTimeout+0x56>
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d13d      	bne.n	8003c56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003be8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bf2:	d111      	bne.n	8003c18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bfc:	d004      	beq.n	8003c08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c06:	d107      	bne.n	8003c18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c20:	d10f      	bne.n	8003c42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e017      	b.n	8003c86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	3b01      	subs	r3, #1
 8003c64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	bf0c      	ite	eq
 8003c76:	2301      	moveq	r3, #1
 8003c78:	2300      	movne	r3, #0
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	79fb      	ldrb	r3, [r7, #7]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d19b      	bne.n	8003bbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3720      	adds	r7, #32
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	20000008 	.word	0x20000008

08003c94 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af02      	add	r7, sp, #8
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ca8:	d111      	bne.n	8003cce <SPI_EndRxTransaction+0x3a>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cb2:	d004      	beq.n	8003cbe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cbc:	d107      	bne.n	8003cce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ccc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cd6:	d117      	bne.n	8003d08 <SPI_EndRxTransaction+0x74>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ce0:	d112      	bne.n	8003d08 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	2101      	movs	r1, #1
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f7ff ff49 	bl	8003b84 <SPI_WaitFlagStateUntilTimeout>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d01a      	beq.n	8003d2e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cfc:	f043 0220 	orr.w	r2, r3, #32
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e013      	b.n	8003d30 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	2180      	movs	r1, #128	@ 0x80
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f7ff ff36 	bl	8003b84 <SPI_WaitFlagStateUntilTimeout>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d007      	beq.n	8003d2e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d22:	f043 0220 	orr.w	r2, r3, #32
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e000      	b.n	8003d30 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af02      	add	r7, sp, #8
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	2102      	movs	r1, #2
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f7ff ff18 	bl	8003b84 <SPI_WaitFlagStateUntilTimeout>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d007      	beq.n	8003d6a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d5e:	f043 0220 	orr.w	r2, r3, #32
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e013      	b.n	8003d92 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2200      	movs	r2, #0
 8003d72:	2180      	movs	r1, #128	@ 0x80
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f7ff ff05 	bl	8003b84 <SPI_WaitFlagStateUntilTimeout>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d007      	beq.n	8003d90 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d84:	f043 0220 	orr.w	r2, r3, #32
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e000      	b.n	8003d92 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b082      	sub	sp, #8
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e042      	b.n	8003e32 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d106      	bne.n	8003dc6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7fe f8d5 	bl	8001f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2224      	movs	r2, #36	@ 0x24
 8003dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ddc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 fcd4 	bl	800478c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	691a      	ldr	r2, [r3, #16]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003df2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695a      	ldr	r2, [r3, #20]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e02:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e12:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2220      	movs	r2, #32
 8003e26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b084      	sub	sp, #16
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	60f8      	str	r0, [r7, #12]
 8003e42:	60b9      	str	r1, [r7, #8]
 8003e44:	4613      	mov	r3, r2
 8003e46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b20      	cmp	r3, #32
 8003e52:	d112      	bne.n	8003e7a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <HAL_UART_Receive_IT+0x26>
 8003e5a:	88fb      	ldrh	r3, [r7, #6]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e00b      	b.n	8003e7c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e6a:	88fb      	ldrh	r3, [r7, #6]
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	68b9      	ldr	r1, [r7, #8]
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 fab6 	bl	80043e2 <UART_Start_Receive_IT>
 8003e76:	4603      	mov	r3, r0
 8003e78:	e000      	b.n	8003e7c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003e7a:	2302      	movs	r3, #2
  }
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b0ba      	sub	sp, #232	@ 0xe8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003ec2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10f      	bne.n	8003eea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ece:	f003 0320 	and.w	r3, r3, #32
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d009      	beq.n	8003eea <HAL_UART_IRQHandler+0x66>
 8003ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eda:	f003 0320 	and.w	r3, r3, #32
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fb93 	bl	800460e <UART_Receive_IT>
      return;
 8003ee8:	e25b      	b.n	80043a2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003eea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 80de 	beq.w	80040b0 <HAL_UART_IRQHandler+0x22c>
 8003ef4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d106      	bne.n	8003f0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f04:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 80d1 	beq.w	80040b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00b      	beq.n	8003f32 <HAL_UART_IRQHandler+0xae>
 8003f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d005      	beq.n	8003f32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2a:	f043 0201 	orr.w	r2, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f36:	f003 0304 	and.w	r3, r3, #4
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00b      	beq.n	8003f56 <HAL_UART_IRQHandler+0xd2>
 8003f3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d005      	beq.n	8003f56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4e:	f043 0202 	orr.w	r2, r3, #2
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00b      	beq.n	8003f7a <HAL_UART_IRQHandler+0xf6>
 8003f62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d005      	beq.n	8003f7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f72:	f043 0204 	orr.w	r2, r3, #4
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d011      	beq.n	8003faa <HAL_UART_IRQHandler+0x126>
 8003f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d105      	bne.n	8003f9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d005      	beq.n	8003faa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa2:	f043 0208 	orr.w	r2, r3, #8
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 81f2 	beq.w	8004398 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fb8:	f003 0320 	and.w	r3, r3, #32
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d008      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x14e>
 8003fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fc4:	f003 0320 	and.w	r3, r3, #32
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 fb1e 	bl	800460e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	bf14      	ite	ne
 8003fe0:	2301      	movne	r3, #1
 8003fe2:	2300      	moveq	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d103      	bne.n	8003ffe <HAL_UART_IRQHandler+0x17a>
 8003ff6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d04f      	beq.n	800409e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fa28 	bl	8004454 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800400e:	2b00      	cmp	r3, #0
 8004010:	d041      	beq.n	8004096 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	3314      	adds	r3, #20
 8004018:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004020:	e853 3f00 	ldrex	r3, [r3]
 8004024:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004028:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800402c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004030:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3314      	adds	r3, #20
 800403a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800403e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004042:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004046:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800404a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800404e:	e841 2300 	strex	r3, r2, [r1]
 8004052:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004056:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1d9      	bne.n	8004012 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004062:	2b00      	cmp	r3, #0
 8004064:	d013      	beq.n	800408e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800406a:	4a7e      	ldr	r2, [pc, #504]	@ (8004264 <HAL_UART_IRQHandler+0x3e0>)
 800406c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004072:	4618      	mov	r0, r3
 8004074:	f7fe fab0 	bl	80025d8 <HAL_DMA_Abort_IT>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d016      	beq.n	80040ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004088:	4610      	mov	r0, r2
 800408a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800408c:	e00e      	b.n	80040ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f993 	bl	80043ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004094:	e00a      	b.n	80040ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f98f 	bl	80043ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800409c:	e006      	b.n	80040ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f98b 	bl	80043ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80040aa:	e175      	b.n	8004398 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ac:	bf00      	nop
    return;
 80040ae:	e173      	b.n	8004398 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	f040 814f 	bne.w	8004358 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80040ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040be:	f003 0310 	and.w	r3, r3, #16
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 8148 	beq.w	8004358 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80040c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040cc:	f003 0310 	and.w	r3, r3, #16
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 8141 	beq.w	8004358 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040d6:	2300      	movs	r3, #0
 80040d8:	60bb      	str	r3, [r7, #8]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60bb      	str	r3, [r7, #8]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	60bb      	str	r3, [r7, #8]
 80040ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 80b6 	beq.w	8004268 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004108:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800410c:	2b00      	cmp	r3, #0
 800410e:	f000 8145 	beq.w	800439c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004116:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800411a:	429a      	cmp	r2, r3
 800411c:	f080 813e 	bcs.w	800439c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004126:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	2b20      	cmp	r3, #32
 8004130:	f000 8088 	beq.w	8004244 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	330c      	adds	r3, #12
 800413a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004142:	e853 3f00 	ldrex	r3, [r3]
 8004146:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800414a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800414e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004152:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	330c      	adds	r3, #12
 800415c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004160:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004164:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004168:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800416c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004170:	e841 2300 	strex	r3, r2, [r1]
 8004174:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004178:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1d9      	bne.n	8004134 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3314      	adds	r3, #20
 8004186:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004188:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800418a:	e853 3f00 	ldrex	r3, [r3]
 800418e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004190:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004192:	f023 0301 	bic.w	r3, r3, #1
 8004196:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3314      	adds	r3, #20
 80041a0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80041a4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80041a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041aa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80041ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80041b0:	e841 2300 	strex	r3, r2, [r1]
 80041b4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80041b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1e1      	bne.n	8004180 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	3314      	adds	r3, #20
 80041c2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041c6:	e853 3f00 	ldrex	r3, [r3]
 80041ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80041cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3314      	adds	r3, #20
 80041dc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80041e0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041e2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80041e6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80041e8:	e841 2300 	strex	r3, r2, [r1]
 80041ec:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80041ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1e3      	bne.n	80041bc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	330c      	adds	r3, #12
 8004208:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800420c:	e853 3f00 	ldrex	r3, [r3]
 8004210:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004212:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004214:	f023 0310 	bic.w	r3, r3, #16
 8004218:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	330c      	adds	r3, #12
 8004222:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004226:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004228:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800422c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800422e:	e841 2300 	strex	r3, r2, [r1]
 8004232:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004234:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1e3      	bne.n	8004202 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800423e:	4618      	mov	r0, r3
 8004240:	f7fe f98f 	bl	8002562 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004252:	b29b      	uxth	r3, r3
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	b29b      	uxth	r3, r3
 8004258:	4619      	mov	r1, r3
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f8b6 	bl	80043cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004260:	e09c      	b.n	800439c <HAL_UART_IRQHandler+0x518>
 8004262:	bf00      	nop
 8004264:	08004519 	.word	0x08004519
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004270:	b29b      	uxth	r3, r3
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800427c:	b29b      	uxth	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 808e 	beq.w	80043a0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004284:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 8089 	beq.w	80043a0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	330c      	adds	r3, #12
 8004294:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004298:	e853 3f00 	ldrex	r3, [r3]
 800429c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800429e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	330c      	adds	r3, #12
 80042ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80042b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80042b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042ba:	e841 2300 	strex	r3, r2, [r1]
 80042be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1e3      	bne.n	800428e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	3314      	adds	r3, #20
 80042cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d0:	e853 3f00 	ldrex	r3, [r3]
 80042d4:	623b      	str	r3, [r7, #32]
   return(result);
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	f023 0301 	bic.w	r3, r3, #1
 80042dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3314      	adds	r3, #20
 80042e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80042ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80042ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042f2:	e841 2300 	strex	r3, r2, [r1]
 80042f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1e3      	bne.n	80042c6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2220      	movs	r2, #32
 8004302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	330c      	adds	r3, #12
 8004312:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	e853 3f00 	ldrex	r3, [r3]
 800431a:	60fb      	str	r3, [r7, #12]
   return(result);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f023 0310 	bic.w	r3, r3, #16
 8004322:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	330c      	adds	r3, #12
 800432c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004330:	61fa      	str	r2, [r7, #28]
 8004332:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004334:	69b9      	ldr	r1, [r7, #24]
 8004336:	69fa      	ldr	r2, [r7, #28]
 8004338:	e841 2300 	strex	r3, r2, [r1]
 800433c:	617b      	str	r3, [r7, #20]
   return(result);
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e3      	bne.n	800430c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2202      	movs	r2, #2
 8004348:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800434a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800434e:	4619      	mov	r1, r3
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f83b 	bl	80043cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004356:	e023      	b.n	80043a0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800435c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004360:	2b00      	cmp	r3, #0
 8004362:	d009      	beq.n	8004378 <HAL_UART_IRQHandler+0x4f4>
 8004364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004368:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800436c:	2b00      	cmp	r3, #0
 800436e:	d003      	beq.n	8004378 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f8e5 	bl	8004540 <UART_Transmit_IT>
    return;
 8004376:	e014      	b.n	80043a2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800437c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00e      	beq.n	80043a2 <HAL_UART_IRQHandler+0x51e>
 8004384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800438c:	2b00      	cmp	r3, #0
 800438e:	d008      	beq.n	80043a2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f924 	bl	80045de <UART_EndTransmit_IT>
    return;
 8004396:	e004      	b.n	80043a2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004398:	bf00      	nop
 800439a:	e002      	b.n	80043a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800439c:	bf00      	nop
 800439e:	e000      	b.n	80043a2 <HAL_UART_IRQHandler+0x51e>
      return;
 80043a0:	bf00      	nop
  }
}
 80043a2:	37e8      	adds	r7, #232	@ 0xe8
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bc80      	pop	{r7}
 80043b8:	4770      	bx	lr

080043ba <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b083      	sub	sp, #12
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr

080043cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	460b      	mov	r3, r1
 80043d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	bc80      	pop	{r7}
 80043e0:	4770      	bx	lr

080043e2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b085      	sub	sp, #20
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	60f8      	str	r0, [r7, #12]
 80043ea:	60b9      	str	r1, [r7, #8]
 80043ec:	4613      	mov	r3, r2
 80043ee:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	88fa      	ldrh	r2, [r7, #6]
 80043fa:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	88fa      	ldrh	r2, [r7, #6]
 8004400:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2222      	movs	r2, #34	@ 0x22
 800440c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d007      	beq.n	8004428 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004426:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	695a      	ldr	r2, [r3, #20]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 0201 	orr.w	r2, r2, #1
 8004436:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68da      	ldr	r2, [r3, #12]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f042 0220 	orr.w	r2, r2, #32
 8004446:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	bc80      	pop	{r7}
 8004452:	4770      	bx	lr

08004454 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004454:	b480      	push	{r7}
 8004456:	b095      	sub	sp, #84	@ 0x54
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	330c      	adds	r3, #12
 8004462:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004466:	e853 3f00 	ldrex	r3, [r3]
 800446a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800446c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800446e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004472:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	330c      	adds	r3, #12
 800447a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800447c:	643a      	str	r2, [r7, #64]	@ 0x40
 800447e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004480:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004482:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004484:	e841 2300 	strex	r3, r2, [r1]
 8004488:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800448a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e5      	bne.n	800445c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3314      	adds	r3, #20
 8004496:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	e853 3f00 	ldrex	r3, [r3]
 800449e:	61fb      	str	r3, [r7, #28]
   return(result);
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	f023 0301 	bic.w	r3, r3, #1
 80044a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3314      	adds	r3, #20
 80044ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044b8:	e841 2300 	strex	r3, r2, [r1]
 80044bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1e5      	bne.n	8004490 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d119      	bne.n	8004500 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	330c      	adds	r3, #12
 80044d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	e853 3f00 	ldrex	r3, [r3]
 80044da:	60bb      	str	r3, [r7, #8]
   return(result);
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f023 0310 	bic.w	r3, r3, #16
 80044e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	330c      	adds	r3, #12
 80044ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044ec:	61ba      	str	r2, [r7, #24]
 80044ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f0:	6979      	ldr	r1, [r7, #20]
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	e841 2300 	strex	r3, r2, [r1]
 80044f8:	613b      	str	r3, [r7, #16]
   return(result);
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e5      	bne.n	80044cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2220      	movs	r2, #32
 8004504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800450e:	bf00      	nop
 8004510:	3754      	adds	r7, #84	@ 0x54
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr

08004518 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004524:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f7ff ff41 	bl	80043ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004538:	bf00      	nop
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b21      	cmp	r3, #33	@ 0x21
 8004552:	d13e      	bne.n	80045d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800455c:	d114      	bne.n	8004588 <UART_Transmit_IT+0x48>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d110      	bne.n	8004588 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	461a      	mov	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800457a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	1c9a      	adds	r2, r3, #2
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	621a      	str	r2, [r3, #32]
 8004586:	e008      	b.n	800459a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	1c59      	adds	r1, r3, #1
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	6211      	str	r1, [r2, #32]
 8004592:	781a      	ldrb	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	4619      	mov	r1, r3
 80045a8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10f      	bne.n	80045ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68da      	ldr	r2, [r3, #12]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68da      	ldr	r2, [r3, #12]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	e000      	b.n	80045d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045d2:	2302      	movs	r3, #2
  }
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	bc80      	pop	{r7}
 80045dc:	4770      	bx	lr

080045de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b082      	sub	sp, #8
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2220      	movs	r2, #32
 80045fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7ff fed2 	bl	80043a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b08c      	sub	sp, #48	@ 0x30
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b22      	cmp	r3, #34	@ 0x22
 8004620:	f040 80ae 	bne.w	8004780 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800462c:	d117      	bne.n	800465e <UART_Receive_IT+0x50>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d113      	bne.n	800465e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004636:	2300      	movs	r3, #0
 8004638:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800463e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	b29b      	uxth	r3, r3
 8004648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800464c:	b29a      	uxth	r2, r3
 800464e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004650:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004656:	1c9a      	adds	r2, r3, #2
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	629a      	str	r2, [r3, #40]	@ 0x28
 800465c:	e026      	b.n	80046ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004662:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004664:	2300      	movs	r3, #0
 8004666:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004670:	d007      	beq.n	8004682 <UART_Receive_IT+0x74>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10a      	bne.n	8004690 <UART_Receive_IT+0x82>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d106      	bne.n	8004690 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	b2da      	uxtb	r2, r3
 800468a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800468c:	701a      	strb	r2, [r3, #0]
 800468e:	e008      	b.n	80046a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	b2db      	uxtb	r3, r3
 8004698:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800469c:	b2da      	uxtb	r2, r3
 800469e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a6:	1c5a      	adds	r2, r3, #1
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	3b01      	subs	r3, #1
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	4619      	mov	r1, r3
 80046ba:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d15d      	bne.n	800477c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68da      	ldr	r2, [r3, #12]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0220 	bic.w	r2, r2, #32
 80046ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	695a      	ldr	r2, [r3, #20]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0201 	bic.w	r2, r2, #1
 80046ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004702:	2b01      	cmp	r3, #1
 8004704:	d135      	bne.n	8004772 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	330c      	adds	r3, #12
 8004712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	e853 3f00 	ldrex	r3, [r3]
 800471a:	613b      	str	r3, [r7, #16]
   return(result);
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	f023 0310 	bic.w	r3, r3, #16
 8004722:	627b      	str	r3, [r7, #36]	@ 0x24
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	330c      	adds	r3, #12
 800472a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800472c:	623a      	str	r2, [r7, #32]
 800472e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004730:	69f9      	ldr	r1, [r7, #28]
 8004732:	6a3a      	ldr	r2, [r7, #32]
 8004734:	e841 2300 	strex	r3, r2, [r1]
 8004738:	61bb      	str	r3, [r7, #24]
   return(result);
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1e5      	bne.n	800470c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0310 	and.w	r3, r3, #16
 800474a:	2b10      	cmp	r3, #16
 800474c:	d10a      	bne.n	8004764 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800474e:	2300      	movs	r3, #0
 8004750:	60fb      	str	r3, [r7, #12]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	60fb      	str	r3, [r7, #12]
 8004762:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004768:	4619      	mov	r1, r3
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7ff fe2e 	bl	80043cc <HAL_UARTEx_RxEventCallback>
 8004770:	e002      	b.n	8004778 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7fc fd36 	bl	80011e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004778:	2300      	movs	r3, #0
 800477a:	e002      	b.n	8004782 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800477c:	2300      	movs	r3, #0
 800477e:	e000      	b.n	8004782 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004780:	2302      	movs	r3, #2
  }
}
 8004782:	4618      	mov	r0, r3
 8004784:	3730      	adds	r7, #48	@ 0x30
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
	...

0800478c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80047c6:	f023 030c 	bic.w	r3, r3, #12
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6812      	ldr	r2, [r2, #0]
 80047ce:	68b9      	ldr	r1, [r7, #8]
 80047d0:	430b      	orrs	r3, r1
 80047d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	699a      	ldr	r2, [r3, #24]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a2c      	ldr	r2, [pc, #176]	@ (80048a0 <UART_SetConfig+0x114>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d103      	bne.n	80047fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80047f4:	f7fe fcfc 	bl	80031f0 <HAL_RCC_GetPCLK2Freq>
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	e002      	b.n	8004802 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80047fc:	f7fe fce4 	bl	80031c8 <HAL_RCC_GetPCLK1Freq>
 8004800:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	4613      	mov	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	009a      	lsls	r2, r3, #2
 800480c:	441a      	add	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	fbb2 f3f3 	udiv	r3, r2, r3
 8004818:	4a22      	ldr	r2, [pc, #136]	@ (80048a4 <UART_SetConfig+0x118>)
 800481a:	fba2 2303 	umull	r2, r3, r2, r3
 800481e:	095b      	lsrs	r3, r3, #5
 8004820:	0119      	lsls	r1, r3, #4
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	4613      	mov	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	009a      	lsls	r2, r3, #2
 800482c:	441a      	add	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	fbb2 f2f3 	udiv	r2, r2, r3
 8004838:	4b1a      	ldr	r3, [pc, #104]	@ (80048a4 <UART_SetConfig+0x118>)
 800483a:	fba3 0302 	umull	r0, r3, r3, r2
 800483e:	095b      	lsrs	r3, r3, #5
 8004840:	2064      	movs	r0, #100	@ 0x64
 8004842:	fb00 f303 	mul.w	r3, r0, r3
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	3332      	adds	r3, #50	@ 0x32
 800484c:	4a15      	ldr	r2, [pc, #84]	@ (80048a4 <UART_SetConfig+0x118>)
 800484e:	fba2 2303 	umull	r2, r3, r2, r3
 8004852:	095b      	lsrs	r3, r3, #5
 8004854:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004858:	4419      	add	r1, r3
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	4613      	mov	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	009a      	lsls	r2, r3, #2
 8004864:	441a      	add	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004870:	4b0c      	ldr	r3, [pc, #48]	@ (80048a4 <UART_SetConfig+0x118>)
 8004872:	fba3 0302 	umull	r0, r3, r3, r2
 8004876:	095b      	lsrs	r3, r3, #5
 8004878:	2064      	movs	r0, #100	@ 0x64
 800487a:	fb00 f303 	mul.w	r3, r0, r3
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	011b      	lsls	r3, r3, #4
 8004882:	3332      	adds	r3, #50	@ 0x32
 8004884:	4a07      	ldr	r2, [pc, #28]	@ (80048a4 <UART_SetConfig+0x118>)
 8004886:	fba2 2303 	umull	r2, r3, r2, r3
 800488a:	095b      	lsrs	r3, r3, #5
 800488c:	f003 020f 	and.w	r2, r3, #15
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	440a      	add	r2, r1
 8004896:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004898:	bf00      	nop
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40013800 	.word	0x40013800
 80048a4:	51eb851f 	.word	0x51eb851f

080048a8 <__cvt>:
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048ae:	461d      	mov	r5, r3
 80048b0:	bfbb      	ittet	lt
 80048b2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80048b6:	461d      	movlt	r5, r3
 80048b8:	2300      	movge	r3, #0
 80048ba:	232d      	movlt	r3, #45	@ 0x2d
 80048bc:	b088      	sub	sp, #32
 80048be:	4614      	mov	r4, r2
 80048c0:	bfb8      	it	lt
 80048c2:	4614      	movlt	r4, r2
 80048c4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80048c6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80048c8:	7013      	strb	r3, [r2, #0]
 80048ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80048cc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80048d0:	f023 0820 	bic.w	r8, r3, #32
 80048d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80048d8:	d005      	beq.n	80048e6 <__cvt+0x3e>
 80048da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80048de:	d100      	bne.n	80048e2 <__cvt+0x3a>
 80048e0:	3601      	adds	r6, #1
 80048e2:	2302      	movs	r3, #2
 80048e4:	e000      	b.n	80048e8 <__cvt+0x40>
 80048e6:	2303      	movs	r3, #3
 80048e8:	aa07      	add	r2, sp, #28
 80048ea:	9204      	str	r2, [sp, #16]
 80048ec:	aa06      	add	r2, sp, #24
 80048ee:	e9cd a202 	strd	sl, r2, [sp, #8]
 80048f2:	e9cd 3600 	strd	r3, r6, [sp]
 80048f6:	4622      	mov	r2, r4
 80048f8:	462b      	mov	r3, r5
 80048fa:	f001 ff65 	bl	80067c8 <_dtoa_r>
 80048fe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004902:	4607      	mov	r7, r0
 8004904:	d119      	bne.n	800493a <__cvt+0x92>
 8004906:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004908:	07db      	lsls	r3, r3, #31
 800490a:	d50e      	bpl.n	800492a <__cvt+0x82>
 800490c:	eb00 0906 	add.w	r9, r0, r6
 8004910:	2200      	movs	r2, #0
 8004912:	2300      	movs	r3, #0
 8004914:	4620      	mov	r0, r4
 8004916:	4629      	mov	r1, r5
 8004918:	f7fc f846 	bl	80009a8 <__aeabi_dcmpeq>
 800491c:	b108      	cbz	r0, 8004922 <__cvt+0x7a>
 800491e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004922:	2230      	movs	r2, #48	@ 0x30
 8004924:	9b07      	ldr	r3, [sp, #28]
 8004926:	454b      	cmp	r3, r9
 8004928:	d31e      	bcc.n	8004968 <__cvt+0xc0>
 800492a:	4638      	mov	r0, r7
 800492c:	9b07      	ldr	r3, [sp, #28]
 800492e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004930:	1bdb      	subs	r3, r3, r7
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	b008      	add	sp, #32
 8004936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800493a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800493e:	eb00 0906 	add.w	r9, r0, r6
 8004942:	d1e5      	bne.n	8004910 <__cvt+0x68>
 8004944:	7803      	ldrb	r3, [r0, #0]
 8004946:	2b30      	cmp	r3, #48	@ 0x30
 8004948:	d10a      	bne.n	8004960 <__cvt+0xb8>
 800494a:	2200      	movs	r2, #0
 800494c:	2300      	movs	r3, #0
 800494e:	4620      	mov	r0, r4
 8004950:	4629      	mov	r1, r5
 8004952:	f7fc f829 	bl	80009a8 <__aeabi_dcmpeq>
 8004956:	b918      	cbnz	r0, 8004960 <__cvt+0xb8>
 8004958:	f1c6 0601 	rsb	r6, r6, #1
 800495c:	f8ca 6000 	str.w	r6, [sl]
 8004960:	f8da 3000 	ldr.w	r3, [sl]
 8004964:	4499      	add	r9, r3
 8004966:	e7d3      	b.n	8004910 <__cvt+0x68>
 8004968:	1c59      	adds	r1, r3, #1
 800496a:	9107      	str	r1, [sp, #28]
 800496c:	701a      	strb	r2, [r3, #0]
 800496e:	e7d9      	b.n	8004924 <__cvt+0x7c>

08004970 <__exponent>:
 8004970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004972:	2900      	cmp	r1, #0
 8004974:	bfb6      	itet	lt
 8004976:	232d      	movlt	r3, #45	@ 0x2d
 8004978:	232b      	movge	r3, #43	@ 0x2b
 800497a:	4249      	neglt	r1, r1
 800497c:	2909      	cmp	r1, #9
 800497e:	7002      	strb	r2, [r0, #0]
 8004980:	7043      	strb	r3, [r0, #1]
 8004982:	dd29      	ble.n	80049d8 <__exponent+0x68>
 8004984:	f10d 0307 	add.w	r3, sp, #7
 8004988:	461d      	mov	r5, r3
 800498a:	270a      	movs	r7, #10
 800498c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004990:	461a      	mov	r2, r3
 8004992:	fb07 1416 	mls	r4, r7, r6, r1
 8004996:	3430      	adds	r4, #48	@ 0x30
 8004998:	f802 4c01 	strb.w	r4, [r2, #-1]
 800499c:	460c      	mov	r4, r1
 800499e:	2c63      	cmp	r4, #99	@ 0x63
 80049a0:	4631      	mov	r1, r6
 80049a2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80049a6:	dcf1      	bgt.n	800498c <__exponent+0x1c>
 80049a8:	3130      	adds	r1, #48	@ 0x30
 80049aa:	1e94      	subs	r4, r2, #2
 80049ac:	f803 1c01 	strb.w	r1, [r3, #-1]
 80049b0:	4623      	mov	r3, r4
 80049b2:	1c41      	adds	r1, r0, #1
 80049b4:	42ab      	cmp	r3, r5
 80049b6:	d30a      	bcc.n	80049ce <__exponent+0x5e>
 80049b8:	f10d 0309 	add.w	r3, sp, #9
 80049bc:	1a9b      	subs	r3, r3, r2
 80049be:	42ac      	cmp	r4, r5
 80049c0:	bf88      	it	hi
 80049c2:	2300      	movhi	r3, #0
 80049c4:	3302      	adds	r3, #2
 80049c6:	4403      	add	r3, r0
 80049c8:	1a18      	subs	r0, r3, r0
 80049ca:	b003      	add	sp, #12
 80049cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049ce:	f813 6b01 	ldrb.w	r6, [r3], #1
 80049d2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80049d6:	e7ed      	b.n	80049b4 <__exponent+0x44>
 80049d8:	2330      	movs	r3, #48	@ 0x30
 80049da:	3130      	adds	r1, #48	@ 0x30
 80049dc:	7083      	strb	r3, [r0, #2]
 80049de:	70c1      	strb	r1, [r0, #3]
 80049e0:	1d03      	adds	r3, r0, #4
 80049e2:	e7f1      	b.n	80049c8 <__exponent+0x58>

080049e4 <_printf_float>:
 80049e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049e8:	b091      	sub	sp, #68	@ 0x44
 80049ea:	460c      	mov	r4, r1
 80049ec:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80049f0:	4616      	mov	r6, r2
 80049f2:	461f      	mov	r7, r3
 80049f4:	4605      	mov	r5, r0
 80049f6:	f001 fdbf 	bl	8006578 <_localeconv_r>
 80049fa:	6803      	ldr	r3, [r0, #0]
 80049fc:	4618      	mov	r0, r3
 80049fe:	9308      	str	r3, [sp, #32]
 8004a00:	f7fb fba6 	bl	8000150 <strlen>
 8004a04:	2300      	movs	r3, #0
 8004a06:	930e      	str	r3, [sp, #56]	@ 0x38
 8004a08:	f8d8 3000 	ldr.w	r3, [r8]
 8004a0c:	9009      	str	r0, [sp, #36]	@ 0x24
 8004a0e:	3307      	adds	r3, #7
 8004a10:	f023 0307 	bic.w	r3, r3, #7
 8004a14:	f103 0208 	add.w	r2, r3, #8
 8004a18:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004a1c:	f8d4 b000 	ldr.w	fp, [r4]
 8004a20:	f8c8 2000 	str.w	r2, [r8]
 8004a24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004a28:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004a2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a2e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004a32:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004a3a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004a3e:	4b9c      	ldr	r3, [pc, #624]	@ (8004cb0 <_printf_float+0x2cc>)
 8004a40:	f7fb ffe4 	bl	8000a0c <__aeabi_dcmpun>
 8004a44:	bb70      	cbnz	r0, 8004aa4 <_printf_float+0xc0>
 8004a46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004a4a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a4e:	4b98      	ldr	r3, [pc, #608]	@ (8004cb0 <_printf_float+0x2cc>)
 8004a50:	f7fb ffbe 	bl	80009d0 <__aeabi_dcmple>
 8004a54:	bb30      	cbnz	r0, 8004aa4 <_printf_float+0xc0>
 8004a56:	2200      	movs	r2, #0
 8004a58:	2300      	movs	r3, #0
 8004a5a:	4640      	mov	r0, r8
 8004a5c:	4649      	mov	r1, r9
 8004a5e:	f7fb ffad 	bl	80009bc <__aeabi_dcmplt>
 8004a62:	b110      	cbz	r0, 8004a6a <_printf_float+0x86>
 8004a64:	232d      	movs	r3, #45	@ 0x2d
 8004a66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a6a:	4a92      	ldr	r2, [pc, #584]	@ (8004cb4 <_printf_float+0x2d0>)
 8004a6c:	4b92      	ldr	r3, [pc, #584]	@ (8004cb8 <_printf_float+0x2d4>)
 8004a6e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004a72:	bf94      	ite	ls
 8004a74:	4690      	movls	r8, r2
 8004a76:	4698      	movhi	r8, r3
 8004a78:	2303      	movs	r3, #3
 8004a7a:	f04f 0900 	mov.w	r9, #0
 8004a7e:	6123      	str	r3, [r4, #16]
 8004a80:	f02b 0304 	bic.w	r3, fp, #4
 8004a84:	6023      	str	r3, [r4, #0]
 8004a86:	4633      	mov	r3, r6
 8004a88:	4621      	mov	r1, r4
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	9700      	str	r7, [sp, #0]
 8004a8e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004a90:	f000 f9d4 	bl	8004e3c <_printf_common>
 8004a94:	3001      	adds	r0, #1
 8004a96:	f040 8090 	bne.w	8004bba <_printf_float+0x1d6>
 8004a9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a9e:	b011      	add	sp, #68	@ 0x44
 8004aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aa4:	4642      	mov	r2, r8
 8004aa6:	464b      	mov	r3, r9
 8004aa8:	4640      	mov	r0, r8
 8004aaa:	4649      	mov	r1, r9
 8004aac:	f7fb ffae 	bl	8000a0c <__aeabi_dcmpun>
 8004ab0:	b148      	cbz	r0, 8004ac6 <_printf_float+0xe2>
 8004ab2:	464b      	mov	r3, r9
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	bfb8      	it	lt
 8004ab8:	232d      	movlt	r3, #45	@ 0x2d
 8004aba:	4a80      	ldr	r2, [pc, #512]	@ (8004cbc <_printf_float+0x2d8>)
 8004abc:	bfb8      	it	lt
 8004abe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004ac2:	4b7f      	ldr	r3, [pc, #508]	@ (8004cc0 <_printf_float+0x2dc>)
 8004ac4:	e7d3      	b.n	8004a6e <_printf_float+0x8a>
 8004ac6:	6863      	ldr	r3, [r4, #4]
 8004ac8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	d13f      	bne.n	8004b50 <_printf_float+0x16c>
 8004ad0:	2306      	movs	r3, #6
 8004ad2:	6063      	str	r3, [r4, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004ada:	6023      	str	r3, [r4, #0]
 8004adc:	9206      	str	r2, [sp, #24]
 8004ade:	aa0e      	add	r2, sp, #56	@ 0x38
 8004ae0:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004ae4:	aa0d      	add	r2, sp, #52	@ 0x34
 8004ae6:	9203      	str	r2, [sp, #12]
 8004ae8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004aec:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004af0:	6863      	ldr	r3, [r4, #4]
 8004af2:	4642      	mov	r2, r8
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	4628      	mov	r0, r5
 8004af8:	464b      	mov	r3, r9
 8004afa:	910a      	str	r1, [sp, #40]	@ 0x28
 8004afc:	f7ff fed4 	bl	80048a8 <__cvt>
 8004b00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004b02:	4680      	mov	r8, r0
 8004b04:	2947      	cmp	r1, #71	@ 0x47
 8004b06:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004b08:	d128      	bne.n	8004b5c <_printf_float+0x178>
 8004b0a:	1cc8      	adds	r0, r1, #3
 8004b0c:	db02      	blt.n	8004b14 <_printf_float+0x130>
 8004b0e:	6863      	ldr	r3, [r4, #4]
 8004b10:	4299      	cmp	r1, r3
 8004b12:	dd40      	ble.n	8004b96 <_printf_float+0x1b2>
 8004b14:	f1aa 0a02 	sub.w	sl, sl, #2
 8004b18:	fa5f fa8a 	uxtb.w	sl, sl
 8004b1c:	4652      	mov	r2, sl
 8004b1e:	3901      	subs	r1, #1
 8004b20:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004b24:	910d      	str	r1, [sp, #52]	@ 0x34
 8004b26:	f7ff ff23 	bl	8004970 <__exponent>
 8004b2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004b2c:	4681      	mov	r9, r0
 8004b2e:	1813      	adds	r3, r2, r0
 8004b30:	2a01      	cmp	r2, #1
 8004b32:	6123      	str	r3, [r4, #16]
 8004b34:	dc02      	bgt.n	8004b3c <_printf_float+0x158>
 8004b36:	6822      	ldr	r2, [r4, #0]
 8004b38:	07d2      	lsls	r2, r2, #31
 8004b3a:	d501      	bpl.n	8004b40 <_printf_float+0x15c>
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	6123      	str	r3, [r4, #16]
 8004b40:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d09e      	beq.n	8004a86 <_printf_float+0xa2>
 8004b48:	232d      	movs	r3, #45	@ 0x2d
 8004b4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b4e:	e79a      	b.n	8004a86 <_printf_float+0xa2>
 8004b50:	2947      	cmp	r1, #71	@ 0x47
 8004b52:	d1bf      	bne.n	8004ad4 <_printf_float+0xf0>
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1bd      	bne.n	8004ad4 <_printf_float+0xf0>
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e7ba      	b.n	8004ad2 <_printf_float+0xee>
 8004b5c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004b60:	d9dc      	bls.n	8004b1c <_printf_float+0x138>
 8004b62:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004b66:	d118      	bne.n	8004b9a <_printf_float+0x1b6>
 8004b68:	2900      	cmp	r1, #0
 8004b6a:	6863      	ldr	r3, [r4, #4]
 8004b6c:	dd0b      	ble.n	8004b86 <_printf_float+0x1a2>
 8004b6e:	6121      	str	r1, [r4, #16]
 8004b70:	b913      	cbnz	r3, 8004b78 <_printf_float+0x194>
 8004b72:	6822      	ldr	r2, [r4, #0]
 8004b74:	07d0      	lsls	r0, r2, #31
 8004b76:	d502      	bpl.n	8004b7e <_printf_float+0x19a>
 8004b78:	3301      	adds	r3, #1
 8004b7a:	440b      	add	r3, r1
 8004b7c:	6123      	str	r3, [r4, #16]
 8004b7e:	f04f 0900 	mov.w	r9, #0
 8004b82:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004b84:	e7dc      	b.n	8004b40 <_printf_float+0x15c>
 8004b86:	b913      	cbnz	r3, 8004b8e <_printf_float+0x1aa>
 8004b88:	6822      	ldr	r2, [r4, #0]
 8004b8a:	07d2      	lsls	r2, r2, #31
 8004b8c:	d501      	bpl.n	8004b92 <_printf_float+0x1ae>
 8004b8e:	3302      	adds	r3, #2
 8004b90:	e7f4      	b.n	8004b7c <_printf_float+0x198>
 8004b92:	2301      	movs	r3, #1
 8004b94:	e7f2      	b.n	8004b7c <_printf_float+0x198>
 8004b96:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004b9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b9c:	4299      	cmp	r1, r3
 8004b9e:	db05      	blt.n	8004bac <_printf_float+0x1c8>
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	6121      	str	r1, [r4, #16]
 8004ba4:	07d8      	lsls	r0, r3, #31
 8004ba6:	d5ea      	bpl.n	8004b7e <_printf_float+0x19a>
 8004ba8:	1c4b      	adds	r3, r1, #1
 8004baa:	e7e7      	b.n	8004b7c <_printf_float+0x198>
 8004bac:	2900      	cmp	r1, #0
 8004bae:	bfcc      	ite	gt
 8004bb0:	2201      	movgt	r2, #1
 8004bb2:	f1c1 0202 	rsble	r2, r1, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	e7e0      	b.n	8004b7c <_printf_float+0x198>
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	055a      	lsls	r2, r3, #21
 8004bbe:	d407      	bmi.n	8004bd0 <_printf_float+0x1ec>
 8004bc0:	6923      	ldr	r3, [r4, #16]
 8004bc2:	4642      	mov	r2, r8
 8004bc4:	4631      	mov	r1, r6
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	47b8      	blx	r7
 8004bca:	3001      	adds	r0, #1
 8004bcc:	d12b      	bne.n	8004c26 <_printf_float+0x242>
 8004bce:	e764      	b.n	8004a9a <_printf_float+0xb6>
 8004bd0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004bd4:	f240 80dc 	bls.w	8004d90 <_printf_float+0x3ac>
 8004bd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004bdc:	2200      	movs	r2, #0
 8004bde:	2300      	movs	r3, #0
 8004be0:	f7fb fee2 	bl	80009a8 <__aeabi_dcmpeq>
 8004be4:	2800      	cmp	r0, #0
 8004be6:	d033      	beq.n	8004c50 <_printf_float+0x26c>
 8004be8:	2301      	movs	r3, #1
 8004bea:	4631      	mov	r1, r6
 8004bec:	4628      	mov	r0, r5
 8004bee:	4a35      	ldr	r2, [pc, #212]	@ (8004cc4 <_printf_float+0x2e0>)
 8004bf0:	47b8      	blx	r7
 8004bf2:	3001      	adds	r0, #1
 8004bf4:	f43f af51 	beq.w	8004a9a <_printf_float+0xb6>
 8004bf8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004bfc:	4543      	cmp	r3, r8
 8004bfe:	db02      	blt.n	8004c06 <_printf_float+0x222>
 8004c00:	6823      	ldr	r3, [r4, #0]
 8004c02:	07d8      	lsls	r0, r3, #31
 8004c04:	d50f      	bpl.n	8004c26 <_printf_float+0x242>
 8004c06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c0a:	4631      	mov	r1, r6
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	47b8      	blx	r7
 8004c10:	3001      	adds	r0, #1
 8004c12:	f43f af42 	beq.w	8004a9a <_printf_float+0xb6>
 8004c16:	f04f 0900 	mov.w	r9, #0
 8004c1a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004c1e:	f104 0a1a 	add.w	sl, r4, #26
 8004c22:	45c8      	cmp	r8, r9
 8004c24:	dc09      	bgt.n	8004c3a <_printf_float+0x256>
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	079b      	lsls	r3, r3, #30
 8004c2a:	f100 8102 	bmi.w	8004e32 <_printf_float+0x44e>
 8004c2e:	68e0      	ldr	r0, [r4, #12]
 8004c30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004c32:	4298      	cmp	r0, r3
 8004c34:	bfb8      	it	lt
 8004c36:	4618      	movlt	r0, r3
 8004c38:	e731      	b.n	8004a9e <_printf_float+0xba>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	4652      	mov	r2, sl
 8004c3e:	4631      	mov	r1, r6
 8004c40:	4628      	mov	r0, r5
 8004c42:	47b8      	blx	r7
 8004c44:	3001      	adds	r0, #1
 8004c46:	f43f af28 	beq.w	8004a9a <_printf_float+0xb6>
 8004c4a:	f109 0901 	add.w	r9, r9, #1
 8004c4e:	e7e8      	b.n	8004c22 <_printf_float+0x23e>
 8004c50:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	dc38      	bgt.n	8004cc8 <_printf_float+0x2e4>
 8004c56:	2301      	movs	r3, #1
 8004c58:	4631      	mov	r1, r6
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	4a19      	ldr	r2, [pc, #100]	@ (8004cc4 <_printf_float+0x2e0>)
 8004c5e:	47b8      	blx	r7
 8004c60:	3001      	adds	r0, #1
 8004c62:	f43f af1a 	beq.w	8004a9a <_printf_float+0xb6>
 8004c66:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004c6a:	ea59 0303 	orrs.w	r3, r9, r3
 8004c6e:	d102      	bne.n	8004c76 <_printf_float+0x292>
 8004c70:	6823      	ldr	r3, [r4, #0]
 8004c72:	07d9      	lsls	r1, r3, #31
 8004c74:	d5d7      	bpl.n	8004c26 <_printf_float+0x242>
 8004c76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c7a:	4631      	mov	r1, r6
 8004c7c:	4628      	mov	r0, r5
 8004c7e:	47b8      	blx	r7
 8004c80:	3001      	adds	r0, #1
 8004c82:	f43f af0a 	beq.w	8004a9a <_printf_float+0xb6>
 8004c86:	f04f 0a00 	mov.w	sl, #0
 8004c8a:	f104 0b1a 	add.w	fp, r4, #26
 8004c8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c90:	425b      	negs	r3, r3
 8004c92:	4553      	cmp	r3, sl
 8004c94:	dc01      	bgt.n	8004c9a <_printf_float+0x2b6>
 8004c96:	464b      	mov	r3, r9
 8004c98:	e793      	b.n	8004bc2 <_printf_float+0x1de>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	465a      	mov	r2, fp
 8004c9e:	4631      	mov	r1, r6
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	47b8      	blx	r7
 8004ca4:	3001      	adds	r0, #1
 8004ca6:	f43f aef8 	beq.w	8004a9a <_printf_float+0xb6>
 8004caa:	f10a 0a01 	add.w	sl, sl, #1
 8004cae:	e7ee      	b.n	8004c8e <_printf_float+0x2aa>
 8004cb0:	7fefffff 	.word	0x7fefffff
 8004cb4:	0800986e 	.word	0x0800986e
 8004cb8:	08009872 	.word	0x08009872
 8004cbc:	08009876 	.word	0x08009876
 8004cc0:	0800987a 	.word	0x0800987a
 8004cc4:	08009b15 	.word	0x08009b15
 8004cc8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004cca:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004cce:	4553      	cmp	r3, sl
 8004cd0:	bfa8      	it	ge
 8004cd2:	4653      	movge	r3, sl
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	4699      	mov	r9, r3
 8004cd8:	dc36      	bgt.n	8004d48 <_printf_float+0x364>
 8004cda:	f04f 0b00 	mov.w	fp, #0
 8004cde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ce2:	f104 021a 	add.w	r2, r4, #26
 8004ce6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004ce8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004cea:	eba3 0309 	sub.w	r3, r3, r9
 8004cee:	455b      	cmp	r3, fp
 8004cf0:	dc31      	bgt.n	8004d56 <_printf_float+0x372>
 8004cf2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004cf4:	459a      	cmp	sl, r3
 8004cf6:	dc3a      	bgt.n	8004d6e <_printf_float+0x38a>
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	07da      	lsls	r2, r3, #31
 8004cfc:	d437      	bmi.n	8004d6e <_printf_float+0x38a>
 8004cfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d00:	ebaa 0903 	sub.w	r9, sl, r3
 8004d04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d06:	ebaa 0303 	sub.w	r3, sl, r3
 8004d0a:	4599      	cmp	r9, r3
 8004d0c:	bfa8      	it	ge
 8004d0e:	4699      	movge	r9, r3
 8004d10:	f1b9 0f00 	cmp.w	r9, #0
 8004d14:	dc33      	bgt.n	8004d7e <_printf_float+0x39a>
 8004d16:	f04f 0800 	mov.w	r8, #0
 8004d1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d1e:	f104 0b1a 	add.w	fp, r4, #26
 8004d22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d24:	ebaa 0303 	sub.w	r3, sl, r3
 8004d28:	eba3 0309 	sub.w	r3, r3, r9
 8004d2c:	4543      	cmp	r3, r8
 8004d2e:	f77f af7a 	ble.w	8004c26 <_printf_float+0x242>
 8004d32:	2301      	movs	r3, #1
 8004d34:	465a      	mov	r2, fp
 8004d36:	4631      	mov	r1, r6
 8004d38:	4628      	mov	r0, r5
 8004d3a:	47b8      	blx	r7
 8004d3c:	3001      	adds	r0, #1
 8004d3e:	f43f aeac 	beq.w	8004a9a <_printf_float+0xb6>
 8004d42:	f108 0801 	add.w	r8, r8, #1
 8004d46:	e7ec      	b.n	8004d22 <_printf_float+0x33e>
 8004d48:	4642      	mov	r2, r8
 8004d4a:	4631      	mov	r1, r6
 8004d4c:	4628      	mov	r0, r5
 8004d4e:	47b8      	blx	r7
 8004d50:	3001      	adds	r0, #1
 8004d52:	d1c2      	bne.n	8004cda <_printf_float+0x2f6>
 8004d54:	e6a1      	b.n	8004a9a <_printf_float+0xb6>
 8004d56:	2301      	movs	r3, #1
 8004d58:	4631      	mov	r1, r6
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	920a      	str	r2, [sp, #40]	@ 0x28
 8004d5e:	47b8      	blx	r7
 8004d60:	3001      	adds	r0, #1
 8004d62:	f43f ae9a 	beq.w	8004a9a <_printf_float+0xb6>
 8004d66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d68:	f10b 0b01 	add.w	fp, fp, #1
 8004d6c:	e7bb      	b.n	8004ce6 <_printf_float+0x302>
 8004d6e:	4631      	mov	r1, r6
 8004d70:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d74:	4628      	mov	r0, r5
 8004d76:	47b8      	blx	r7
 8004d78:	3001      	adds	r0, #1
 8004d7a:	d1c0      	bne.n	8004cfe <_printf_float+0x31a>
 8004d7c:	e68d      	b.n	8004a9a <_printf_float+0xb6>
 8004d7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d80:	464b      	mov	r3, r9
 8004d82:	4631      	mov	r1, r6
 8004d84:	4628      	mov	r0, r5
 8004d86:	4442      	add	r2, r8
 8004d88:	47b8      	blx	r7
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	d1c3      	bne.n	8004d16 <_printf_float+0x332>
 8004d8e:	e684      	b.n	8004a9a <_printf_float+0xb6>
 8004d90:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004d94:	f1ba 0f01 	cmp.w	sl, #1
 8004d98:	dc01      	bgt.n	8004d9e <_printf_float+0x3ba>
 8004d9a:	07db      	lsls	r3, r3, #31
 8004d9c:	d536      	bpl.n	8004e0c <_printf_float+0x428>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	4642      	mov	r2, r8
 8004da2:	4631      	mov	r1, r6
 8004da4:	4628      	mov	r0, r5
 8004da6:	47b8      	blx	r7
 8004da8:	3001      	adds	r0, #1
 8004daa:	f43f ae76 	beq.w	8004a9a <_printf_float+0xb6>
 8004dae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004db2:	4631      	mov	r1, r6
 8004db4:	4628      	mov	r0, r5
 8004db6:	47b8      	blx	r7
 8004db8:	3001      	adds	r0, #1
 8004dba:	f43f ae6e 	beq.w	8004a9a <_printf_float+0xb6>
 8004dbe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004dca:	f7fb fded 	bl	80009a8 <__aeabi_dcmpeq>
 8004dce:	b9c0      	cbnz	r0, 8004e02 <_printf_float+0x41e>
 8004dd0:	4653      	mov	r3, sl
 8004dd2:	f108 0201 	add.w	r2, r8, #1
 8004dd6:	4631      	mov	r1, r6
 8004dd8:	4628      	mov	r0, r5
 8004dda:	47b8      	blx	r7
 8004ddc:	3001      	adds	r0, #1
 8004dde:	d10c      	bne.n	8004dfa <_printf_float+0x416>
 8004de0:	e65b      	b.n	8004a9a <_printf_float+0xb6>
 8004de2:	2301      	movs	r3, #1
 8004de4:	465a      	mov	r2, fp
 8004de6:	4631      	mov	r1, r6
 8004de8:	4628      	mov	r0, r5
 8004dea:	47b8      	blx	r7
 8004dec:	3001      	adds	r0, #1
 8004dee:	f43f ae54 	beq.w	8004a9a <_printf_float+0xb6>
 8004df2:	f108 0801 	add.w	r8, r8, #1
 8004df6:	45d0      	cmp	r8, sl
 8004df8:	dbf3      	blt.n	8004de2 <_printf_float+0x3fe>
 8004dfa:	464b      	mov	r3, r9
 8004dfc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004e00:	e6e0      	b.n	8004bc4 <_printf_float+0x1e0>
 8004e02:	f04f 0800 	mov.w	r8, #0
 8004e06:	f104 0b1a 	add.w	fp, r4, #26
 8004e0a:	e7f4      	b.n	8004df6 <_printf_float+0x412>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	4642      	mov	r2, r8
 8004e10:	e7e1      	b.n	8004dd6 <_printf_float+0x3f2>
 8004e12:	2301      	movs	r3, #1
 8004e14:	464a      	mov	r2, r9
 8004e16:	4631      	mov	r1, r6
 8004e18:	4628      	mov	r0, r5
 8004e1a:	47b8      	blx	r7
 8004e1c:	3001      	adds	r0, #1
 8004e1e:	f43f ae3c 	beq.w	8004a9a <_printf_float+0xb6>
 8004e22:	f108 0801 	add.w	r8, r8, #1
 8004e26:	68e3      	ldr	r3, [r4, #12]
 8004e28:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004e2a:	1a5b      	subs	r3, r3, r1
 8004e2c:	4543      	cmp	r3, r8
 8004e2e:	dcf0      	bgt.n	8004e12 <_printf_float+0x42e>
 8004e30:	e6fd      	b.n	8004c2e <_printf_float+0x24a>
 8004e32:	f04f 0800 	mov.w	r8, #0
 8004e36:	f104 0919 	add.w	r9, r4, #25
 8004e3a:	e7f4      	b.n	8004e26 <_printf_float+0x442>

08004e3c <_printf_common>:
 8004e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e40:	4616      	mov	r6, r2
 8004e42:	4698      	mov	r8, r3
 8004e44:	688a      	ldr	r2, [r1, #8]
 8004e46:	690b      	ldr	r3, [r1, #16]
 8004e48:	4607      	mov	r7, r0
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	bfb8      	it	lt
 8004e4e:	4613      	movlt	r3, r2
 8004e50:	6033      	str	r3, [r6, #0]
 8004e52:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e56:	460c      	mov	r4, r1
 8004e58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e5c:	b10a      	cbz	r2, 8004e62 <_printf_common+0x26>
 8004e5e:	3301      	adds	r3, #1
 8004e60:	6033      	str	r3, [r6, #0]
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	0699      	lsls	r1, r3, #26
 8004e66:	bf42      	ittt	mi
 8004e68:	6833      	ldrmi	r3, [r6, #0]
 8004e6a:	3302      	addmi	r3, #2
 8004e6c:	6033      	strmi	r3, [r6, #0]
 8004e6e:	6825      	ldr	r5, [r4, #0]
 8004e70:	f015 0506 	ands.w	r5, r5, #6
 8004e74:	d106      	bne.n	8004e84 <_printf_common+0x48>
 8004e76:	f104 0a19 	add.w	sl, r4, #25
 8004e7a:	68e3      	ldr	r3, [r4, #12]
 8004e7c:	6832      	ldr	r2, [r6, #0]
 8004e7e:	1a9b      	subs	r3, r3, r2
 8004e80:	42ab      	cmp	r3, r5
 8004e82:	dc2b      	bgt.n	8004edc <_printf_common+0xa0>
 8004e84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e88:	6822      	ldr	r2, [r4, #0]
 8004e8a:	3b00      	subs	r3, #0
 8004e8c:	bf18      	it	ne
 8004e8e:	2301      	movne	r3, #1
 8004e90:	0692      	lsls	r2, r2, #26
 8004e92:	d430      	bmi.n	8004ef6 <_printf_common+0xba>
 8004e94:	4641      	mov	r1, r8
 8004e96:	4638      	mov	r0, r7
 8004e98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e9c:	47c8      	blx	r9
 8004e9e:	3001      	adds	r0, #1
 8004ea0:	d023      	beq.n	8004eea <_printf_common+0xae>
 8004ea2:	6823      	ldr	r3, [r4, #0]
 8004ea4:	6922      	ldr	r2, [r4, #16]
 8004ea6:	f003 0306 	and.w	r3, r3, #6
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	bf14      	ite	ne
 8004eae:	2500      	movne	r5, #0
 8004eb0:	6833      	ldreq	r3, [r6, #0]
 8004eb2:	f04f 0600 	mov.w	r6, #0
 8004eb6:	bf08      	it	eq
 8004eb8:	68e5      	ldreq	r5, [r4, #12]
 8004eba:	f104 041a 	add.w	r4, r4, #26
 8004ebe:	bf08      	it	eq
 8004ec0:	1aed      	subeq	r5, r5, r3
 8004ec2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004ec6:	bf08      	it	eq
 8004ec8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	bfc4      	itt	gt
 8004ed0:	1a9b      	subgt	r3, r3, r2
 8004ed2:	18ed      	addgt	r5, r5, r3
 8004ed4:	42b5      	cmp	r5, r6
 8004ed6:	d11a      	bne.n	8004f0e <_printf_common+0xd2>
 8004ed8:	2000      	movs	r0, #0
 8004eda:	e008      	b.n	8004eee <_printf_common+0xb2>
 8004edc:	2301      	movs	r3, #1
 8004ede:	4652      	mov	r2, sl
 8004ee0:	4641      	mov	r1, r8
 8004ee2:	4638      	mov	r0, r7
 8004ee4:	47c8      	blx	r9
 8004ee6:	3001      	adds	r0, #1
 8004ee8:	d103      	bne.n	8004ef2 <_printf_common+0xb6>
 8004eea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ef2:	3501      	adds	r5, #1
 8004ef4:	e7c1      	b.n	8004e7a <_printf_common+0x3e>
 8004ef6:	2030      	movs	r0, #48	@ 0x30
 8004ef8:	18e1      	adds	r1, r4, r3
 8004efa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004efe:	1c5a      	adds	r2, r3, #1
 8004f00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f04:	4422      	add	r2, r4
 8004f06:	3302      	adds	r3, #2
 8004f08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f0c:	e7c2      	b.n	8004e94 <_printf_common+0x58>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	4622      	mov	r2, r4
 8004f12:	4641      	mov	r1, r8
 8004f14:	4638      	mov	r0, r7
 8004f16:	47c8      	blx	r9
 8004f18:	3001      	adds	r0, #1
 8004f1a:	d0e6      	beq.n	8004eea <_printf_common+0xae>
 8004f1c:	3601      	adds	r6, #1
 8004f1e:	e7d9      	b.n	8004ed4 <_printf_common+0x98>

08004f20 <_printf_i>:
 8004f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f24:	7e0f      	ldrb	r7, [r1, #24]
 8004f26:	4691      	mov	r9, r2
 8004f28:	2f78      	cmp	r7, #120	@ 0x78
 8004f2a:	4680      	mov	r8, r0
 8004f2c:	460c      	mov	r4, r1
 8004f2e:	469a      	mov	sl, r3
 8004f30:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f36:	d807      	bhi.n	8004f48 <_printf_i+0x28>
 8004f38:	2f62      	cmp	r7, #98	@ 0x62
 8004f3a:	d80a      	bhi.n	8004f52 <_printf_i+0x32>
 8004f3c:	2f00      	cmp	r7, #0
 8004f3e:	f000 80d3 	beq.w	80050e8 <_printf_i+0x1c8>
 8004f42:	2f58      	cmp	r7, #88	@ 0x58
 8004f44:	f000 80ba 	beq.w	80050bc <_printf_i+0x19c>
 8004f48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f50:	e03a      	b.n	8004fc8 <_printf_i+0xa8>
 8004f52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f56:	2b15      	cmp	r3, #21
 8004f58:	d8f6      	bhi.n	8004f48 <_printf_i+0x28>
 8004f5a:	a101      	add	r1, pc, #4	@ (adr r1, 8004f60 <_printf_i+0x40>)
 8004f5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f60:	08004fb9 	.word	0x08004fb9
 8004f64:	08004fcd 	.word	0x08004fcd
 8004f68:	08004f49 	.word	0x08004f49
 8004f6c:	08004f49 	.word	0x08004f49
 8004f70:	08004f49 	.word	0x08004f49
 8004f74:	08004f49 	.word	0x08004f49
 8004f78:	08004fcd 	.word	0x08004fcd
 8004f7c:	08004f49 	.word	0x08004f49
 8004f80:	08004f49 	.word	0x08004f49
 8004f84:	08004f49 	.word	0x08004f49
 8004f88:	08004f49 	.word	0x08004f49
 8004f8c:	080050cf 	.word	0x080050cf
 8004f90:	08004ff7 	.word	0x08004ff7
 8004f94:	08005089 	.word	0x08005089
 8004f98:	08004f49 	.word	0x08004f49
 8004f9c:	08004f49 	.word	0x08004f49
 8004fa0:	080050f1 	.word	0x080050f1
 8004fa4:	08004f49 	.word	0x08004f49
 8004fa8:	08004ff7 	.word	0x08004ff7
 8004fac:	08004f49 	.word	0x08004f49
 8004fb0:	08004f49 	.word	0x08004f49
 8004fb4:	08005091 	.word	0x08005091
 8004fb8:	6833      	ldr	r3, [r6, #0]
 8004fba:	1d1a      	adds	r2, r3, #4
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	6032      	str	r2, [r6, #0]
 8004fc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e09e      	b.n	800510a <_printf_i+0x1ea>
 8004fcc:	6833      	ldr	r3, [r6, #0]
 8004fce:	6820      	ldr	r0, [r4, #0]
 8004fd0:	1d19      	adds	r1, r3, #4
 8004fd2:	6031      	str	r1, [r6, #0]
 8004fd4:	0606      	lsls	r6, r0, #24
 8004fd6:	d501      	bpl.n	8004fdc <_printf_i+0xbc>
 8004fd8:	681d      	ldr	r5, [r3, #0]
 8004fda:	e003      	b.n	8004fe4 <_printf_i+0xc4>
 8004fdc:	0645      	lsls	r5, r0, #25
 8004fde:	d5fb      	bpl.n	8004fd8 <_printf_i+0xb8>
 8004fe0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004fe4:	2d00      	cmp	r5, #0
 8004fe6:	da03      	bge.n	8004ff0 <_printf_i+0xd0>
 8004fe8:	232d      	movs	r3, #45	@ 0x2d
 8004fea:	426d      	negs	r5, r5
 8004fec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ff0:	230a      	movs	r3, #10
 8004ff2:	4859      	ldr	r0, [pc, #356]	@ (8005158 <_printf_i+0x238>)
 8004ff4:	e011      	b.n	800501a <_printf_i+0xfa>
 8004ff6:	6821      	ldr	r1, [r4, #0]
 8004ff8:	6833      	ldr	r3, [r6, #0]
 8004ffa:	0608      	lsls	r0, r1, #24
 8004ffc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005000:	d402      	bmi.n	8005008 <_printf_i+0xe8>
 8005002:	0649      	lsls	r1, r1, #25
 8005004:	bf48      	it	mi
 8005006:	b2ad      	uxthmi	r5, r5
 8005008:	2f6f      	cmp	r7, #111	@ 0x6f
 800500a:	6033      	str	r3, [r6, #0]
 800500c:	bf14      	ite	ne
 800500e:	230a      	movne	r3, #10
 8005010:	2308      	moveq	r3, #8
 8005012:	4851      	ldr	r0, [pc, #324]	@ (8005158 <_printf_i+0x238>)
 8005014:	2100      	movs	r1, #0
 8005016:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800501a:	6866      	ldr	r6, [r4, #4]
 800501c:	2e00      	cmp	r6, #0
 800501e:	bfa8      	it	ge
 8005020:	6821      	ldrge	r1, [r4, #0]
 8005022:	60a6      	str	r6, [r4, #8]
 8005024:	bfa4      	itt	ge
 8005026:	f021 0104 	bicge.w	r1, r1, #4
 800502a:	6021      	strge	r1, [r4, #0]
 800502c:	b90d      	cbnz	r5, 8005032 <_printf_i+0x112>
 800502e:	2e00      	cmp	r6, #0
 8005030:	d04b      	beq.n	80050ca <_printf_i+0x1aa>
 8005032:	4616      	mov	r6, r2
 8005034:	fbb5 f1f3 	udiv	r1, r5, r3
 8005038:	fb03 5711 	mls	r7, r3, r1, r5
 800503c:	5dc7      	ldrb	r7, [r0, r7]
 800503e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005042:	462f      	mov	r7, r5
 8005044:	42bb      	cmp	r3, r7
 8005046:	460d      	mov	r5, r1
 8005048:	d9f4      	bls.n	8005034 <_printf_i+0x114>
 800504a:	2b08      	cmp	r3, #8
 800504c:	d10b      	bne.n	8005066 <_printf_i+0x146>
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	07df      	lsls	r7, r3, #31
 8005052:	d508      	bpl.n	8005066 <_printf_i+0x146>
 8005054:	6923      	ldr	r3, [r4, #16]
 8005056:	6861      	ldr	r1, [r4, #4]
 8005058:	4299      	cmp	r1, r3
 800505a:	bfde      	ittt	le
 800505c:	2330      	movle	r3, #48	@ 0x30
 800505e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005062:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005066:	1b92      	subs	r2, r2, r6
 8005068:	6122      	str	r2, [r4, #16]
 800506a:	464b      	mov	r3, r9
 800506c:	4621      	mov	r1, r4
 800506e:	4640      	mov	r0, r8
 8005070:	f8cd a000 	str.w	sl, [sp]
 8005074:	aa03      	add	r2, sp, #12
 8005076:	f7ff fee1 	bl	8004e3c <_printf_common>
 800507a:	3001      	adds	r0, #1
 800507c:	d14a      	bne.n	8005114 <_printf_i+0x1f4>
 800507e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005082:	b004      	add	sp, #16
 8005084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005088:	6823      	ldr	r3, [r4, #0]
 800508a:	f043 0320 	orr.w	r3, r3, #32
 800508e:	6023      	str	r3, [r4, #0]
 8005090:	2778      	movs	r7, #120	@ 0x78
 8005092:	4832      	ldr	r0, [pc, #200]	@ (800515c <_printf_i+0x23c>)
 8005094:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005098:	6823      	ldr	r3, [r4, #0]
 800509a:	6831      	ldr	r1, [r6, #0]
 800509c:	061f      	lsls	r7, r3, #24
 800509e:	f851 5b04 	ldr.w	r5, [r1], #4
 80050a2:	d402      	bmi.n	80050aa <_printf_i+0x18a>
 80050a4:	065f      	lsls	r7, r3, #25
 80050a6:	bf48      	it	mi
 80050a8:	b2ad      	uxthmi	r5, r5
 80050aa:	6031      	str	r1, [r6, #0]
 80050ac:	07d9      	lsls	r1, r3, #31
 80050ae:	bf44      	itt	mi
 80050b0:	f043 0320 	orrmi.w	r3, r3, #32
 80050b4:	6023      	strmi	r3, [r4, #0]
 80050b6:	b11d      	cbz	r5, 80050c0 <_printf_i+0x1a0>
 80050b8:	2310      	movs	r3, #16
 80050ba:	e7ab      	b.n	8005014 <_printf_i+0xf4>
 80050bc:	4826      	ldr	r0, [pc, #152]	@ (8005158 <_printf_i+0x238>)
 80050be:	e7e9      	b.n	8005094 <_printf_i+0x174>
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	f023 0320 	bic.w	r3, r3, #32
 80050c6:	6023      	str	r3, [r4, #0]
 80050c8:	e7f6      	b.n	80050b8 <_printf_i+0x198>
 80050ca:	4616      	mov	r6, r2
 80050cc:	e7bd      	b.n	800504a <_printf_i+0x12a>
 80050ce:	6833      	ldr	r3, [r6, #0]
 80050d0:	6825      	ldr	r5, [r4, #0]
 80050d2:	1d18      	adds	r0, r3, #4
 80050d4:	6961      	ldr	r1, [r4, #20]
 80050d6:	6030      	str	r0, [r6, #0]
 80050d8:	062e      	lsls	r6, r5, #24
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	d501      	bpl.n	80050e2 <_printf_i+0x1c2>
 80050de:	6019      	str	r1, [r3, #0]
 80050e0:	e002      	b.n	80050e8 <_printf_i+0x1c8>
 80050e2:	0668      	lsls	r0, r5, #25
 80050e4:	d5fb      	bpl.n	80050de <_printf_i+0x1be>
 80050e6:	8019      	strh	r1, [r3, #0]
 80050e8:	2300      	movs	r3, #0
 80050ea:	4616      	mov	r6, r2
 80050ec:	6123      	str	r3, [r4, #16]
 80050ee:	e7bc      	b.n	800506a <_printf_i+0x14a>
 80050f0:	6833      	ldr	r3, [r6, #0]
 80050f2:	2100      	movs	r1, #0
 80050f4:	1d1a      	adds	r2, r3, #4
 80050f6:	6032      	str	r2, [r6, #0]
 80050f8:	681e      	ldr	r6, [r3, #0]
 80050fa:	6862      	ldr	r2, [r4, #4]
 80050fc:	4630      	mov	r0, r6
 80050fe:	f001 fab2 	bl	8006666 <memchr>
 8005102:	b108      	cbz	r0, 8005108 <_printf_i+0x1e8>
 8005104:	1b80      	subs	r0, r0, r6
 8005106:	6060      	str	r0, [r4, #4]
 8005108:	6863      	ldr	r3, [r4, #4]
 800510a:	6123      	str	r3, [r4, #16]
 800510c:	2300      	movs	r3, #0
 800510e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005112:	e7aa      	b.n	800506a <_printf_i+0x14a>
 8005114:	4632      	mov	r2, r6
 8005116:	4649      	mov	r1, r9
 8005118:	4640      	mov	r0, r8
 800511a:	6923      	ldr	r3, [r4, #16]
 800511c:	47d0      	blx	sl
 800511e:	3001      	adds	r0, #1
 8005120:	d0ad      	beq.n	800507e <_printf_i+0x15e>
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	079b      	lsls	r3, r3, #30
 8005126:	d413      	bmi.n	8005150 <_printf_i+0x230>
 8005128:	68e0      	ldr	r0, [r4, #12]
 800512a:	9b03      	ldr	r3, [sp, #12]
 800512c:	4298      	cmp	r0, r3
 800512e:	bfb8      	it	lt
 8005130:	4618      	movlt	r0, r3
 8005132:	e7a6      	b.n	8005082 <_printf_i+0x162>
 8005134:	2301      	movs	r3, #1
 8005136:	4632      	mov	r2, r6
 8005138:	4649      	mov	r1, r9
 800513a:	4640      	mov	r0, r8
 800513c:	47d0      	blx	sl
 800513e:	3001      	adds	r0, #1
 8005140:	d09d      	beq.n	800507e <_printf_i+0x15e>
 8005142:	3501      	adds	r5, #1
 8005144:	68e3      	ldr	r3, [r4, #12]
 8005146:	9903      	ldr	r1, [sp, #12]
 8005148:	1a5b      	subs	r3, r3, r1
 800514a:	42ab      	cmp	r3, r5
 800514c:	dcf2      	bgt.n	8005134 <_printf_i+0x214>
 800514e:	e7eb      	b.n	8005128 <_printf_i+0x208>
 8005150:	2500      	movs	r5, #0
 8005152:	f104 0619 	add.w	r6, r4, #25
 8005156:	e7f5      	b.n	8005144 <_printf_i+0x224>
 8005158:	0800987e 	.word	0x0800987e
 800515c:	0800988f 	.word	0x0800988f

08005160 <_scanf_float>:
 8005160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005164:	b087      	sub	sp, #28
 8005166:	9303      	str	r3, [sp, #12]
 8005168:	688b      	ldr	r3, [r1, #8]
 800516a:	4617      	mov	r7, r2
 800516c:	1e5a      	subs	r2, r3, #1
 800516e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005172:	bf82      	ittt	hi
 8005174:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005178:	eb03 0b05 	addhi.w	fp, r3, r5
 800517c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005180:	460a      	mov	r2, r1
 8005182:	f04f 0500 	mov.w	r5, #0
 8005186:	bf88      	it	hi
 8005188:	608b      	strhi	r3, [r1, #8]
 800518a:	680b      	ldr	r3, [r1, #0]
 800518c:	4680      	mov	r8, r0
 800518e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005192:	f842 3b1c 	str.w	r3, [r2], #28
 8005196:	460c      	mov	r4, r1
 8005198:	bf98      	it	ls
 800519a:	f04f 0b00 	movls.w	fp, #0
 800519e:	4616      	mov	r6, r2
 80051a0:	46aa      	mov	sl, r5
 80051a2:	46a9      	mov	r9, r5
 80051a4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80051a8:	9201      	str	r2, [sp, #4]
 80051aa:	9502      	str	r5, [sp, #8]
 80051ac:	68a2      	ldr	r2, [r4, #8]
 80051ae:	b152      	cbz	r2, 80051c6 <_scanf_float+0x66>
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	2b4e      	cmp	r3, #78	@ 0x4e
 80051b6:	d865      	bhi.n	8005284 <_scanf_float+0x124>
 80051b8:	2b40      	cmp	r3, #64	@ 0x40
 80051ba:	d83d      	bhi.n	8005238 <_scanf_float+0xd8>
 80051bc:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80051c0:	b2c8      	uxtb	r0, r1
 80051c2:	280e      	cmp	r0, #14
 80051c4:	d93b      	bls.n	800523e <_scanf_float+0xde>
 80051c6:	f1b9 0f00 	cmp.w	r9, #0
 80051ca:	d003      	beq.n	80051d4 <_scanf_float+0x74>
 80051cc:	6823      	ldr	r3, [r4, #0]
 80051ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051d2:	6023      	str	r3, [r4, #0]
 80051d4:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80051d8:	f1ba 0f01 	cmp.w	sl, #1
 80051dc:	f200 8118 	bhi.w	8005410 <_scanf_float+0x2b0>
 80051e0:	9b01      	ldr	r3, [sp, #4]
 80051e2:	429e      	cmp	r6, r3
 80051e4:	f200 8109 	bhi.w	80053fa <_scanf_float+0x29a>
 80051e8:	2001      	movs	r0, #1
 80051ea:	b007      	add	sp, #28
 80051ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051f0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80051f4:	2a0d      	cmp	r2, #13
 80051f6:	d8e6      	bhi.n	80051c6 <_scanf_float+0x66>
 80051f8:	a101      	add	r1, pc, #4	@ (adr r1, 8005200 <_scanf_float+0xa0>)
 80051fa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80051fe:	bf00      	nop
 8005200:	08005347 	.word	0x08005347
 8005204:	080051c7 	.word	0x080051c7
 8005208:	080051c7 	.word	0x080051c7
 800520c:	080051c7 	.word	0x080051c7
 8005210:	080053a7 	.word	0x080053a7
 8005214:	0800537f 	.word	0x0800537f
 8005218:	080051c7 	.word	0x080051c7
 800521c:	080051c7 	.word	0x080051c7
 8005220:	08005355 	.word	0x08005355
 8005224:	080051c7 	.word	0x080051c7
 8005228:	080051c7 	.word	0x080051c7
 800522c:	080051c7 	.word	0x080051c7
 8005230:	080051c7 	.word	0x080051c7
 8005234:	0800530d 	.word	0x0800530d
 8005238:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800523c:	e7da      	b.n	80051f4 <_scanf_float+0x94>
 800523e:	290e      	cmp	r1, #14
 8005240:	d8c1      	bhi.n	80051c6 <_scanf_float+0x66>
 8005242:	a001      	add	r0, pc, #4	@ (adr r0, 8005248 <_scanf_float+0xe8>)
 8005244:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005248:	080052fd 	.word	0x080052fd
 800524c:	080051c7 	.word	0x080051c7
 8005250:	080052fd 	.word	0x080052fd
 8005254:	08005393 	.word	0x08005393
 8005258:	080051c7 	.word	0x080051c7
 800525c:	080052a5 	.word	0x080052a5
 8005260:	080052e3 	.word	0x080052e3
 8005264:	080052e3 	.word	0x080052e3
 8005268:	080052e3 	.word	0x080052e3
 800526c:	080052e3 	.word	0x080052e3
 8005270:	080052e3 	.word	0x080052e3
 8005274:	080052e3 	.word	0x080052e3
 8005278:	080052e3 	.word	0x080052e3
 800527c:	080052e3 	.word	0x080052e3
 8005280:	080052e3 	.word	0x080052e3
 8005284:	2b6e      	cmp	r3, #110	@ 0x6e
 8005286:	d809      	bhi.n	800529c <_scanf_float+0x13c>
 8005288:	2b60      	cmp	r3, #96	@ 0x60
 800528a:	d8b1      	bhi.n	80051f0 <_scanf_float+0x90>
 800528c:	2b54      	cmp	r3, #84	@ 0x54
 800528e:	d07b      	beq.n	8005388 <_scanf_float+0x228>
 8005290:	2b59      	cmp	r3, #89	@ 0x59
 8005292:	d198      	bne.n	80051c6 <_scanf_float+0x66>
 8005294:	2d07      	cmp	r5, #7
 8005296:	d196      	bne.n	80051c6 <_scanf_float+0x66>
 8005298:	2508      	movs	r5, #8
 800529a:	e02c      	b.n	80052f6 <_scanf_float+0x196>
 800529c:	2b74      	cmp	r3, #116	@ 0x74
 800529e:	d073      	beq.n	8005388 <_scanf_float+0x228>
 80052a0:	2b79      	cmp	r3, #121	@ 0x79
 80052a2:	e7f6      	b.n	8005292 <_scanf_float+0x132>
 80052a4:	6821      	ldr	r1, [r4, #0]
 80052a6:	05c8      	lsls	r0, r1, #23
 80052a8:	d51b      	bpl.n	80052e2 <_scanf_float+0x182>
 80052aa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80052ae:	6021      	str	r1, [r4, #0]
 80052b0:	f109 0901 	add.w	r9, r9, #1
 80052b4:	f1bb 0f00 	cmp.w	fp, #0
 80052b8:	d003      	beq.n	80052c2 <_scanf_float+0x162>
 80052ba:	3201      	adds	r2, #1
 80052bc:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80052c0:	60a2      	str	r2, [r4, #8]
 80052c2:	68a3      	ldr	r3, [r4, #8]
 80052c4:	3b01      	subs	r3, #1
 80052c6:	60a3      	str	r3, [r4, #8]
 80052c8:	6923      	ldr	r3, [r4, #16]
 80052ca:	3301      	adds	r3, #1
 80052cc:	6123      	str	r3, [r4, #16]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	3b01      	subs	r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	607b      	str	r3, [r7, #4]
 80052d6:	f340 8087 	ble.w	80053e8 <_scanf_float+0x288>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	3301      	adds	r3, #1
 80052de:	603b      	str	r3, [r7, #0]
 80052e0:	e764      	b.n	80051ac <_scanf_float+0x4c>
 80052e2:	eb1a 0105 	adds.w	r1, sl, r5
 80052e6:	f47f af6e 	bne.w	80051c6 <_scanf_float+0x66>
 80052ea:	460d      	mov	r5, r1
 80052ec:	468a      	mov	sl, r1
 80052ee:	6822      	ldr	r2, [r4, #0]
 80052f0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80052f4:	6022      	str	r2, [r4, #0]
 80052f6:	f806 3b01 	strb.w	r3, [r6], #1
 80052fa:	e7e2      	b.n	80052c2 <_scanf_float+0x162>
 80052fc:	6822      	ldr	r2, [r4, #0]
 80052fe:	0610      	lsls	r0, r2, #24
 8005300:	f57f af61 	bpl.w	80051c6 <_scanf_float+0x66>
 8005304:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005308:	6022      	str	r2, [r4, #0]
 800530a:	e7f4      	b.n	80052f6 <_scanf_float+0x196>
 800530c:	f1ba 0f00 	cmp.w	sl, #0
 8005310:	d10e      	bne.n	8005330 <_scanf_float+0x1d0>
 8005312:	f1b9 0f00 	cmp.w	r9, #0
 8005316:	d10e      	bne.n	8005336 <_scanf_float+0x1d6>
 8005318:	6822      	ldr	r2, [r4, #0]
 800531a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800531e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005322:	d108      	bne.n	8005336 <_scanf_float+0x1d6>
 8005324:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005328:	f04f 0a01 	mov.w	sl, #1
 800532c:	6022      	str	r2, [r4, #0]
 800532e:	e7e2      	b.n	80052f6 <_scanf_float+0x196>
 8005330:	f1ba 0f02 	cmp.w	sl, #2
 8005334:	d055      	beq.n	80053e2 <_scanf_float+0x282>
 8005336:	2d01      	cmp	r5, #1
 8005338:	d002      	beq.n	8005340 <_scanf_float+0x1e0>
 800533a:	2d04      	cmp	r5, #4
 800533c:	f47f af43 	bne.w	80051c6 <_scanf_float+0x66>
 8005340:	3501      	adds	r5, #1
 8005342:	b2ed      	uxtb	r5, r5
 8005344:	e7d7      	b.n	80052f6 <_scanf_float+0x196>
 8005346:	f1ba 0f01 	cmp.w	sl, #1
 800534a:	f47f af3c 	bne.w	80051c6 <_scanf_float+0x66>
 800534e:	f04f 0a02 	mov.w	sl, #2
 8005352:	e7d0      	b.n	80052f6 <_scanf_float+0x196>
 8005354:	b97d      	cbnz	r5, 8005376 <_scanf_float+0x216>
 8005356:	f1b9 0f00 	cmp.w	r9, #0
 800535a:	f47f af37 	bne.w	80051cc <_scanf_float+0x6c>
 800535e:	6822      	ldr	r2, [r4, #0]
 8005360:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005364:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005368:	f040 8103 	bne.w	8005572 <_scanf_float+0x412>
 800536c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005370:	2501      	movs	r5, #1
 8005372:	6022      	str	r2, [r4, #0]
 8005374:	e7bf      	b.n	80052f6 <_scanf_float+0x196>
 8005376:	2d03      	cmp	r5, #3
 8005378:	d0e2      	beq.n	8005340 <_scanf_float+0x1e0>
 800537a:	2d05      	cmp	r5, #5
 800537c:	e7de      	b.n	800533c <_scanf_float+0x1dc>
 800537e:	2d02      	cmp	r5, #2
 8005380:	f47f af21 	bne.w	80051c6 <_scanf_float+0x66>
 8005384:	2503      	movs	r5, #3
 8005386:	e7b6      	b.n	80052f6 <_scanf_float+0x196>
 8005388:	2d06      	cmp	r5, #6
 800538a:	f47f af1c 	bne.w	80051c6 <_scanf_float+0x66>
 800538e:	2507      	movs	r5, #7
 8005390:	e7b1      	b.n	80052f6 <_scanf_float+0x196>
 8005392:	6822      	ldr	r2, [r4, #0]
 8005394:	0591      	lsls	r1, r2, #22
 8005396:	f57f af16 	bpl.w	80051c6 <_scanf_float+0x66>
 800539a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800539e:	6022      	str	r2, [r4, #0]
 80053a0:	f8cd 9008 	str.w	r9, [sp, #8]
 80053a4:	e7a7      	b.n	80052f6 <_scanf_float+0x196>
 80053a6:	6822      	ldr	r2, [r4, #0]
 80053a8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80053ac:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80053b0:	d006      	beq.n	80053c0 <_scanf_float+0x260>
 80053b2:	0550      	lsls	r0, r2, #21
 80053b4:	f57f af07 	bpl.w	80051c6 <_scanf_float+0x66>
 80053b8:	f1b9 0f00 	cmp.w	r9, #0
 80053bc:	f000 80d9 	beq.w	8005572 <_scanf_float+0x412>
 80053c0:	0591      	lsls	r1, r2, #22
 80053c2:	bf58      	it	pl
 80053c4:	9902      	ldrpl	r1, [sp, #8]
 80053c6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80053ca:	bf58      	it	pl
 80053cc:	eba9 0101 	subpl.w	r1, r9, r1
 80053d0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80053d4:	f04f 0900 	mov.w	r9, #0
 80053d8:	bf58      	it	pl
 80053da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80053de:	6022      	str	r2, [r4, #0]
 80053e0:	e789      	b.n	80052f6 <_scanf_float+0x196>
 80053e2:	f04f 0a03 	mov.w	sl, #3
 80053e6:	e786      	b.n	80052f6 <_scanf_float+0x196>
 80053e8:	4639      	mov	r1, r7
 80053ea:	4640      	mov	r0, r8
 80053ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80053f0:	4798      	blx	r3
 80053f2:	2800      	cmp	r0, #0
 80053f4:	f43f aeda 	beq.w	80051ac <_scanf_float+0x4c>
 80053f8:	e6e5      	b.n	80051c6 <_scanf_float+0x66>
 80053fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80053fe:	463a      	mov	r2, r7
 8005400:	4640      	mov	r0, r8
 8005402:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005406:	4798      	blx	r3
 8005408:	6923      	ldr	r3, [r4, #16]
 800540a:	3b01      	subs	r3, #1
 800540c:	6123      	str	r3, [r4, #16]
 800540e:	e6e7      	b.n	80051e0 <_scanf_float+0x80>
 8005410:	1e6b      	subs	r3, r5, #1
 8005412:	2b06      	cmp	r3, #6
 8005414:	d824      	bhi.n	8005460 <_scanf_float+0x300>
 8005416:	2d02      	cmp	r5, #2
 8005418:	d836      	bhi.n	8005488 <_scanf_float+0x328>
 800541a:	9b01      	ldr	r3, [sp, #4]
 800541c:	429e      	cmp	r6, r3
 800541e:	f67f aee3 	bls.w	80051e8 <_scanf_float+0x88>
 8005422:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005426:	463a      	mov	r2, r7
 8005428:	4640      	mov	r0, r8
 800542a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800542e:	4798      	blx	r3
 8005430:	6923      	ldr	r3, [r4, #16]
 8005432:	3b01      	subs	r3, #1
 8005434:	6123      	str	r3, [r4, #16]
 8005436:	e7f0      	b.n	800541a <_scanf_float+0x2ba>
 8005438:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800543c:	463a      	mov	r2, r7
 800543e:	4640      	mov	r0, r8
 8005440:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005444:	4798      	blx	r3
 8005446:	6923      	ldr	r3, [r4, #16]
 8005448:	3b01      	subs	r3, #1
 800544a:	6123      	str	r3, [r4, #16]
 800544c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005450:	fa5f fa8a 	uxtb.w	sl, sl
 8005454:	f1ba 0f02 	cmp.w	sl, #2
 8005458:	d1ee      	bne.n	8005438 <_scanf_float+0x2d8>
 800545a:	3d03      	subs	r5, #3
 800545c:	b2ed      	uxtb	r5, r5
 800545e:	1b76      	subs	r6, r6, r5
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	05da      	lsls	r2, r3, #23
 8005464:	d530      	bpl.n	80054c8 <_scanf_float+0x368>
 8005466:	055b      	lsls	r3, r3, #21
 8005468:	d511      	bpl.n	800548e <_scanf_float+0x32e>
 800546a:	9b01      	ldr	r3, [sp, #4]
 800546c:	429e      	cmp	r6, r3
 800546e:	f67f aebb 	bls.w	80051e8 <_scanf_float+0x88>
 8005472:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005476:	463a      	mov	r2, r7
 8005478:	4640      	mov	r0, r8
 800547a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800547e:	4798      	blx	r3
 8005480:	6923      	ldr	r3, [r4, #16]
 8005482:	3b01      	subs	r3, #1
 8005484:	6123      	str	r3, [r4, #16]
 8005486:	e7f0      	b.n	800546a <_scanf_float+0x30a>
 8005488:	46aa      	mov	sl, r5
 800548a:	46b3      	mov	fp, r6
 800548c:	e7de      	b.n	800544c <_scanf_float+0x2ec>
 800548e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005492:	6923      	ldr	r3, [r4, #16]
 8005494:	2965      	cmp	r1, #101	@ 0x65
 8005496:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800549a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800549e:	6123      	str	r3, [r4, #16]
 80054a0:	d00c      	beq.n	80054bc <_scanf_float+0x35c>
 80054a2:	2945      	cmp	r1, #69	@ 0x45
 80054a4:	d00a      	beq.n	80054bc <_scanf_float+0x35c>
 80054a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80054aa:	463a      	mov	r2, r7
 80054ac:	4640      	mov	r0, r8
 80054ae:	4798      	blx	r3
 80054b0:	6923      	ldr	r3, [r4, #16]
 80054b2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80054b6:	3b01      	subs	r3, #1
 80054b8:	1eb5      	subs	r5, r6, #2
 80054ba:	6123      	str	r3, [r4, #16]
 80054bc:	463a      	mov	r2, r7
 80054be:	4640      	mov	r0, r8
 80054c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80054c4:	4798      	blx	r3
 80054c6:	462e      	mov	r6, r5
 80054c8:	6822      	ldr	r2, [r4, #0]
 80054ca:	f012 0210 	ands.w	r2, r2, #16
 80054ce:	d001      	beq.n	80054d4 <_scanf_float+0x374>
 80054d0:	2000      	movs	r0, #0
 80054d2:	e68a      	b.n	80051ea <_scanf_float+0x8a>
 80054d4:	7032      	strb	r2, [r6, #0]
 80054d6:	6823      	ldr	r3, [r4, #0]
 80054d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80054dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054e0:	d11c      	bne.n	800551c <_scanf_float+0x3bc>
 80054e2:	9b02      	ldr	r3, [sp, #8]
 80054e4:	454b      	cmp	r3, r9
 80054e6:	eba3 0209 	sub.w	r2, r3, r9
 80054ea:	d123      	bne.n	8005534 <_scanf_float+0x3d4>
 80054ec:	2200      	movs	r2, #0
 80054ee:	4640      	mov	r0, r8
 80054f0:	9901      	ldr	r1, [sp, #4]
 80054f2:	f000 ff75 	bl	80063e0 <_strtod_r>
 80054f6:	9b03      	ldr	r3, [sp, #12]
 80054f8:	6825      	ldr	r5, [r4, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f015 0f02 	tst.w	r5, #2
 8005500:	4606      	mov	r6, r0
 8005502:	460f      	mov	r7, r1
 8005504:	f103 0204 	add.w	r2, r3, #4
 8005508:	d01f      	beq.n	800554a <_scanf_float+0x3ea>
 800550a:	9903      	ldr	r1, [sp, #12]
 800550c:	600a      	str	r2, [r1, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	e9c3 6700 	strd	r6, r7, [r3]
 8005514:	68e3      	ldr	r3, [r4, #12]
 8005516:	3301      	adds	r3, #1
 8005518:	60e3      	str	r3, [r4, #12]
 800551a:	e7d9      	b.n	80054d0 <_scanf_float+0x370>
 800551c:	9b04      	ldr	r3, [sp, #16]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d0e4      	beq.n	80054ec <_scanf_float+0x38c>
 8005522:	9905      	ldr	r1, [sp, #20]
 8005524:	230a      	movs	r3, #10
 8005526:	4640      	mov	r0, r8
 8005528:	3101      	adds	r1, #1
 800552a:	f000 ffd9 	bl	80064e0 <_strtol_r>
 800552e:	9b04      	ldr	r3, [sp, #16]
 8005530:	9e05      	ldr	r6, [sp, #20]
 8005532:	1ac2      	subs	r2, r0, r3
 8005534:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005538:	429e      	cmp	r6, r3
 800553a:	bf28      	it	cs
 800553c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005540:	4630      	mov	r0, r6
 8005542:	490d      	ldr	r1, [pc, #52]	@ (8005578 <_scanf_float+0x418>)
 8005544:	f000 f81c 	bl	8005580 <siprintf>
 8005548:	e7d0      	b.n	80054ec <_scanf_float+0x38c>
 800554a:	076d      	lsls	r5, r5, #29
 800554c:	d4dd      	bmi.n	800550a <_scanf_float+0x3aa>
 800554e:	9d03      	ldr	r5, [sp, #12]
 8005550:	602a      	str	r2, [r5, #0]
 8005552:	681d      	ldr	r5, [r3, #0]
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	f7fb fa58 	bl	8000a0c <__aeabi_dcmpun>
 800555c:	b120      	cbz	r0, 8005568 <_scanf_float+0x408>
 800555e:	4807      	ldr	r0, [pc, #28]	@ (800557c <_scanf_float+0x41c>)
 8005560:	f001 f8a4 	bl	80066ac <nanf>
 8005564:	6028      	str	r0, [r5, #0]
 8005566:	e7d5      	b.n	8005514 <_scanf_float+0x3b4>
 8005568:	4630      	mov	r0, r6
 800556a:	4639      	mov	r1, r7
 800556c:	f7fb faac 	bl	8000ac8 <__aeabi_d2f>
 8005570:	e7f8      	b.n	8005564 <_scanf_float+0x404>
 8005572:	f04f 0900 	mov.w	r9, #0
 8005576:	e62d      	b.n	80051d4 <_scanf_float+0x74>
 8005578:	080098a0 	.word	0x080098a0
 800557c:	08009cab 	.word	0x08009cab

08005580 <siprintf>:
 8005580:	b40e      	push	{r1, r2, r3}
 8005582:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005586:	b500      	push	{lr}
 8005588:	b09c      	sub	sp, #112	@ 0x70
 800558a:	ab1d      	add	r3, sp, #116	@ 0x74
 800558c:	9002      	str	r0, [sp, #8]
 800558e:	9006      	str	r0, [sp, #24]
 8005590:	9107      	str	r1, [sp, #28]
 8005592:	9104      	str	r1, [sp, #16]
 8005594:	4808      	ldr	r0, [pc, #32]	@ (80055b8 <siprintf+0x38>)
 8005596:	4909      	ldr	r1, [pc, #36]	@ (80055bc <siprintf+0x3c>)
 8005598:	f853 2b04 	ldr.w	r2, [r3], #4
 800559c:	9105      	str	r1, [sp, #20]
 800559e:	6800      	ldr	r0, [r0, #0]
 80055a0:	a902      	add	r1, sp, #8
 80055a2:	9301      	str	r3, [sp, #4]
 80055a4:	f002 fab4 	bl	8007b10 <_svfiprintf_r>
 80055a8:	2200      	movs	r2, #0
 80055aa:	9b02      	ldr	r3, [sp, #8]
 80055ac:	701a      	strb	r2, [r3, #0]
 80055ae:	b01c      	add	sp, #112	@ 0x70
 80055b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80055b4:	b003      	add	sp, #12
 80055b6:	4770      	bx	lr
 80055b8:	2000018c 	.word	0x2000018c
 80055bc:	ffff0208 	.word	0xffff0208

080055c0 <siscanf>:
 80055c0:	b40e      	push	{r1, r2, r3}
 80055c2:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80055c6:	b530      	push	{r4, r5, lr}
 80055c8:	b09c      	sub	sp, #112	@ 0x70
 80055ca:	ac1f      	add	r4, sp, #124	@ 0x7c
 80055cc:	f854 5b04 	ldr.w	r5, [r4], #4
 80055d0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80055d4:	9002      	str	r0, [sp, #8]
 80055d6:	9006      	str	r0, [sp, #24]
 80055d8:	f7fa fdba 	bl	8000150 <strlen>
 80055dc:	4b0b      	ldr	r3, [pc, #44]	@ (800560c <siscanf+0x4c>)
 80055de:	9003      	str	r0, [sp, #12]
 80055e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80055e2:	2300      	movs	r3, #0
 80055e4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80055e6:	9314      	str	r3, [sp, #80]	@ 0x50
 80055e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80055ec:	9007      	str	r0, [sp, #28]
 80055ee:	4808      	ldr	r0, [pc, #32]	@ (8005610 <siscanf+0x50>)
 80055f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80055f4:	462a      	mov	r2, r5
 80055f6:	4623      	mov	r3, r4
 80055f8:	a902      	add	r1, sp, #8
 80055fa:	6800      	ldr	r0, [r0, #0]
 80055fc:	9401      	str	r4, [sp, #4]
 80055fe:	f002 fbdb 	bl	8007db8 <__ssvfiscanf_r>
 8005602:	b01c      	add	sp, #112	@ 0x70
 8005604:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005608:	b003      	add	sp, #12
 800560a:	4770      	bx	lr
 800560c:	08005637 	.word	0x08005637
 8005610:	2000018c 	.word	0x2000018c

08005614 <__sread>:
 8005614:	b510      	push	{r4, lr}
 8005616:	460c      	mov	r4, r1
 8005618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800561c:	f000 ffd2 	bl	80065c4 <_read_r>
 8005620:	2800      	cmp	r0, #0
 8005622:	bfab      	itete	ge
 8005624:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005626:	89a3      	ldrhlt	r3, [r4, #12]
 8005628:	181b      	addge	r3, r3, r0
 800562a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800562e:	bfac      	ite	ge
 8005630:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005632:	81a3      	strhlt	r3, [r4, #12]
 8005634:	bd10      	pop	{r4, pc}

08005636 <__seofread>:
 8005636:	2000      	movs	r0, #0
 8005638:	4770      	bx	lr

0800563a <__swrite>:
 800563a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800563e:	461f      	mov	r7, r3
 8005640:	898b      	ldrh	r3, [r1, #12]
 8005642:	4605      	mov	r5, r0
 8005644:	05db      	lsls	r3, r3, #23
 8005646:	460c      	mov	r4, r1
 8005648:	4616      	mov	r6, r2
 800564a:	d505      	bpl.n	8005658 <__swrite+0x1e>
 800564c:	2302      	movs	r3, #2
 800564e:	2200      	movs	r2, #0
 8005650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005654:	f000 ffa4 	bl	80065a0 <_lseek_r>
 8005658:	89a3      	ldrh	r3, [r4, #12]
 800565a:	4632      	mov	r2, r6
 800565c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005660:	81a3      	strh	r3, [r4, #12]
 8005662:	4628      	mov	r0, r5
 8005664:	463b      	mov	r3, r7
 8005666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800566a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800566e:	f000 bfbb 	b.w	80065e8 <_write_r>

08005672 <__sseek>:
 8005672:	b510      	push	{r4, lr}
 8005674:	460c      	mov	r4, r1
 8005676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800567a:	f000 ff91 	bl	80065a0 <_lseek_r>
 800567e:	1c43      	adds	r3, r0, #1
 8005680:	89a3      	ldrh	r3, [r4, #12]
 8005682:	bf15      	itete	ne
 8005684:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005686:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800568a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800568e:	81a3      	strheq	r3, [r4, #12]
 8005690:	bf18      	it	ne
 8005692:	81a3      	strhne	r3, [r4, #12]
 8005694:	bd10      	pop	{r4, pc}

08005696 <__sclose>:
 8005696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800569a:	f000 bf71 	b.w	8006580 <_close_r>
	...

080056a0 <std>:
 80056a0:	2300      	movs	r3, #0
 80056a2:	b510      	push	{r4, lr}
 80056a4:	4604      	mov	r4, r0
 80056a6:	e9c0 3300 	strd	r3, r3, [r0]
 80056aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056ae:	6083      	str	r3, [r0, #8]
 80056b0:	8181      	strh	r1, [r0, #12]
 80056b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80056b4:	81c2      	strh	r2, [r0, #14]
 80056b6:	6183      	str	r3, [r0, #24]
 80056b8:	4619      	mov	r1, r3
 80056ba:	2208      	movs	r2, #8
 80056bc:	305c      	adds	r0, #92	@ 0x5c
 80056be:	f000 ff53 	bl	8006568 <memset>
 80056c2:	4b0d      	ldr	r3, [pc, #52]	@ (80056f8 <std+0x58>)
 80056c4:	6224      	str	r4, [r4, #32]
 80056c6:	6263      	str	r3, [r4, #36]	@ 0x24
 80056c8:	4b0c      	ldr	r3, [pc, #48]	@ (80056fc <std+0x5c>)
 80056ca:	62a3      	str	r3, [r4, #40]	@ 0x28
 80056cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005700 <std+0x60>)
 80056ce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80056d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005704 <std+0x64>)
 80056d2:	6323      	str	r3, [r4, #48]	@ 0x30
 80056d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005708 <std+0x68>)
 80056d6:	429c      	cmp	r4, r3
 80056d8:	d006      	beq.n	80056e8 <std+0x48>
 80056da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80056de:	4294      	cmp	r4, r2
 80056e0:	d002      	beq.n	80056e8 <std+0x48>
 80056e2:	33d0      	adds	r3, #208	@ 0xd0
 80056e4:	429c      	cmp	r4, r3
 80056e6:	d105      	bne.n	80056f4 <std+0x54>
 80056e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80056ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056f0:	f000 bfb6 	b.w	8006660 <__retarget_lock_init_recursive>
 80056f4:	bd10      	pop	{r4, pc}
 80056f6:	bf00      	nop
 80056f8:	08005615 	.word	0x08005615
 80056fc:	0800563b 	.word	0x0800563b
 8005700:	08005673 	.word	0x08005673
 8005704:	08005697 	.word	0x08005697
 8005708:	20000374 	.word	0x20000374

0800570c <stdio_exit_handler>:
 800570c:	4a02      	ldr	r2, [pc, #8]	@ (8005718 <stdio_exit_handler+0xc>)
 800570e:	4903      	ldr	r1, [pc, #12]	@ (800571c <stdio_exit_handler+0x10>)
 8005710:	4803      	ldr	r0, [pc, #12]	@ (8005720 <stdio_exit_handler+0x14>)
 8005712:	f000 bee7 	b.w	80064e4 <_fwalk_sglue>
 8005716:	bf00      	nop
 8005718:	20000014 	.word	0x20000014
 800571c:	080088a1 	.word	0x080088a1
 8005720:	20000190 	.word	0x20000190

08005724 <cleanup_stdio>:
 8005724:	6841      	ldr	r1, [r0, #4]
 8005726:	4b0c      	ldr	r3, [pc, #48]	@ (8005758 <cleanup_stdio+0x34>)
 8005728:	b510      	push	{r4, lr}
 800572a:	4299      	cmp	r1, r3
 800572c:	4604      	mov	r4, r0
 800572e:	d001      	beq.n	8005734 <cleanup_stdio+0x10>
 8005730:	f003 f8b6 	bl	80088a0 <_fflush_r>
 8005734:	68a1      	ldr	r1, [r4, #8]
 8005736:	4b09      	ldr	r3, [pc, #36]	@ (800575c <cleanup_stdio+0x38>)
 8005738:	4299      	cmp	r1, r3
 800573a:	d002      	beq.n	8005742 <cleanup_stdio+0x1e>
 800573c:	4620      	mov	r0, r4
 800573e:	f003 f8af 	bl	80088a0 <_fflush_r>
 8005742:	68e1      	ldr	r1, [r4, #12]
 8005744:	4b06      	ldr	r3, [pc, #24]	@ (8005760 <cleanup_stdio+0x3c>)
 8005746:	4299      	cmp	r1, r3
 8005748:	d004      	beq.n	8005754 <cleanup_stdio+0x30>
 800574a:	4620      	mov	r0, r4
 800574c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005750:	f003 b8a6 	b.w	80088a0 <_fflush_r>
 8005754:	bd10      	pop	{r4, pc}
 8005756:	bf00      	nop
 8005758:	20000374 	.word	0x20000374
 800575c:	200003dc 	.word	0x200003dc
 8005760:	20000444 	.word	0x20000444

08005764 <global_stdio_init.part.0>:
 8005764:	b510      	push	{r4, lr}
 8005766:	4b0b      	ldr	r3, [pc, #44]	@ (8005794 <global_stdio_init.part.0+0x30>)
 8005768:	4c0b      	ldr	r4, [pc, #44]	@ (8005798 <global_stdio_init.part.0+0x34>)
 800576a:	4a0c      	ldr	r2, [pc, #48]	@ (800579c <global_stdio_init.part.0+0x38>)
 800576c:	4620      	mov	r0, r4
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	2104      	movs	r1, #4
 8005772:	2200      	movs	r2, #0
 8005774:	f7ff ff94 	bl	80056a0 <std>
 8005778:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800577c:	2201      	movs	r2, #1
 800577e:	2109      	movs	r1, #9
 8005780:	f7ff ff8e 	bl	80056a0 <std>
 8005784:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005788:	2202      	movs	r2, #2
 800578a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800578e:	2112      	movs	r1, #18
 8005790:	f7ff bf86 	b.w	80056a0 <std>
 8005794:	200004ac 	.word	0x200004ac
 8005798:	20000374 	.word	0x20000374
 800579c:	0800570d 	.word	0x0800570d

080057a0 <__sfp_lock_acquire>:
 80057a0:	4801      	ldr	r0, [pc, #4]	@ (80057a8 <__sfp_lock_acquire+0x8>)
 80057a2:	f000 bf5e 	b.w	8006662 <__retarget_lock_acquire_recursive>
 80057a6:	bf00      	nop
 80057a8:	200004b5 	.word	0x200004b5

080057ac <__sfp_lock_release>:
 80057ac:	4801      	ldr	r0, [pc, #4]	@ (80057b4 <__sfp_lock_release+0x8>)
 80057ae:	f000 bf59 	b.w	8006664 <__retarget_lock_release_recursive>
 80057b2:	bf00      	nop
 80057b4:	200004b5 	.word	0x200004b5

080057b8 <__sinit>:
 80057b8:	b510      	push	{r4, lr}
 80057ba:	4604      	mov	r4, r0
 80057bc:	f7ff fff0 	bl	80057a0 <__sfp_lock_acquire>
 80057c0:	6a23      	ldr	r3, [r4, #32]
 80057c2:	b11b      	cbz	r3, 80057cc <__sinit+0x14>
 80057c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057c8:	f7ff bff0 	b.w	80057ac <__sfp_lock_release>
 80057cc:	4b04      	ldr	r3, [pc, #16]	@ (80057e0 <__sinit+0x28>)
 80057ce:	6223      	str	r3, [r4, #32]
 80057d0:	4b04      	ldr	r3, [pc, #16]	@ (80057e4 <__sinit+0x2c>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1f5      	bne.n	80057c4 <__sinit+0xc>
 80057d8:	f7ff ffc4 	bl	8005764 <global_stdio_init.part.0>
 80057dc:	e7f2      	b.n	80057c4 <__sinit+0xc>
 80057de:	bf00      	nop
 80057e0:	08005725 	.word	0x08005725
 80057e4:	200004ac 	.word	0x200004ac

080057e8 <sulp>:
 80057e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057ec:	460f      	mov	r7, r1
 80057ee:	4690      	mov	r8, r2
 80057f0:	f003 fbfc 	bl	8008fec <__ulp>
 80057f4:	4604      	mov	r4, r0
 80057f6:	460d      	mov	r5, r1
 80057f8:	f1b8 0f00 	cmp.w	r8, #0
 80057fc:	d011      	beq.n	8005822 <sulp+0x3a>
 80057fe:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005802:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005806:	2b00      	cmp	r3, #0
 8005808:	dd0b      	ble.n	8005822 <sulp+0x3a>
 800580a:	2400      	movs	r4, #0
 800580c:	051b      	lsls	r3, r3, #20
 800580e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005812:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005816:	4622      	mov	r2, r4
 8005818:	462b      	mov	r3, r5
 800581a:	f7fa fe5d 	bl	80004d8 <__aeabi_dmul>
 800581e:	4604      	mov	r4, r0
 8005820:	460d      	mov	r5, r1
 8005822:	4620      	mov	r0, r4
 8005824:	4629      	mov	r1, r5
 8005826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800582a:	0000      	movs	r0, r0
 800582c:	0000      	movs	r0, r0
	...

08005830 <_strtod_l>:
 8005830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005834:	b09f      	sub	sp, #124	@ 0x7c
 8005836:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005838:	2200      	movs	r2, #0
 800583a:	460c      	mov	r4, r1
 800583c:	921a      	str	r2, [sp, #104]	@ 0x68
 800583e:	f04f 0a00 	mov.w	sl, #0
 8005842:	f04f 0b00 	mov.w	fp, #0
 8005846:	460a      	mov	r2, r1
 8005848:	9005      	str	r0, [sp, #20]
 800584a:	9219      	str	r2, [sp, #100]	@ 0x64
 800584c:	7811      	ldrb	r1, [r2, #0]
 800584e:	292b      	cmp	r1, #43	@ 0x2b
 8005850:	d048      	beq.n	80058e4 <_strtod_l+0xb4>
 8005852:	d836      	bhi.n	80058c2 <_strtod_l+0x92>
 8005854:	290d      	cmp	r1, #13
 8005856:	d830      	bhi.n	80058ba <_strtod_l+0x8a>
 8005858:	2908      	cmp	r1, #8
 800585a:	d830      	bhi.n	80058be <_strtod_l+0x8e>
 800585c:	2900      	cmp	r1, #0
 800585e:	d039      	beq.n	80058d4 <_strtod_l+0xa4>
 8005860:	2200      	movs	r2, #0
 8005862:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005864:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005866:	782a      	ldrb	r2, [r5, #0]
 8005868:	2a30      	cmp	r2, #48	@ 0x30
 800586a:	f040 80b1 	bne.w	80059d0 <_strtod_l+0x1a0>
 800586e:	786a      	ldrb	r2, [r5, #1]
 8005870:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005874:	2a58      	cmp	r2, #88	@ 0x58
 8005876:	d16c      	bne.n	8005952 <_strtod_l+0x122>
 8005878:	9302      	str	r3, [sp, #8]
 800587a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800587c:	4a8e      	ldr	r2, [pc, #568]	@ (8005ab8 <_strtod_l+0x288>)
 800587e:	9301      	str	r3, [sp, #4]
 8005880:	ab1a      	add	r3, sp, #104	@ 0x68
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	9805      	ldr	r0, [sp, #20]
 8005886:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005888:	a919      	add	r1, sp, #100	@ 0x64
 800588a:	f001 fe15 	bl	80074b8 <__gethex>
 800588e:	f010 060f 	ands.w	r6, r0, #15
 8005892:	4604      	mov	r4, r0
 8005894:	d005      	beq.n	80058a2 <_strtod_l+0x72>
 8005896:	2e06      	cmp	r6, #6
 8005898:	d126      	bne.n	80058e8 <_strtod_l+0xb8>
 800589a:	2300      	movs	r3, #0
 800589c:	3501      	adds	r5, #1
 800589e:	9519      	str	r5, [sp, #100]	@ 0x64
 80058a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f040 8584 	bne.w	80063b2 <_strtod_l+0xb82>
 80058aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80058ac:	b1bb      	cbz	r3, 80058de <_strtod_l+0xae>
 80058ae:	4650      	mov	r0, sl
 80058b0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80058b4:	b01f      	add	sp, #124	@ 0x7c
 80058b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ba:	2920      	cmp	r1, #32
 80058bc:	d1d0      	bne.n	8005860 <_strtod_l+0x30>
 80058be:	3201      	adds	r2, #1
 80058c0:	e7c3      	b.n	800584a <_strtod_l+0x1a>
 80058c2:	292d      	cmp	r1, #45	@ 0x2d
 80058c4:	d1cc      	bne.n	8005860 <_strtod_l+0x30>
 80058c6:	2101      	movs	r1, #1
 80058c8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80058ca:	1c51      	adds	r1, r2, #1
 80058cc:	9119      	str	r1, [sp, #100]	@ 0x64
 80058ce:	7852      	ldrb	r2, [r2, #1]
 80058d0:	2a00      	cmp	r2, #0
 80058d2:	d1c7      	bne.n	8005864 <_strtod_l+0x34>
 80058d4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80058d6:	9419      	str	r4, [sp, #100]	@ 0x64
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f040 8568 	bne.w	80063ae <_strtod_l+0xb7e>
 80058de:	4650      	mov	r0, sl
 80058e0:	4659      	mov	r1, fp
 80058e2:	e7e7      	b.n	80058b4 <_strtod_l+0x84>
 80058e4:	2100      	movs	r1, #0
 80058e6:	e7ef      	b.n	80058c8 <_strtod_l+0x98>
 80058e8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80058ea:	b13a      	cbz	r2, 80058fc <_strtod_l+0xcc>
 80058ec:	2135      	movs	r1, #53	@ 0x35
 80058ee:	a81c      	add	r0, sp, #112	@ 0x70
 80058f0:	f003 fc6c 	bl	80091cc <__copybits>
 80058f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80058f6:	9805      	ldr	r0, [sp, #20]
 80058f8:	f003 f846 	bl	8008988 <_Bfree>
 80058fc:	3e01      	subs	r6, #1
 80058fe:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005900:	2e04      	cmp	r6, #4
 8005902:	d806      	bhi.n	8005912 <_strtod_l+0xe2>
 8005904:	e8df f006 	tbb	[pc, r6]
 8005908:	201d0314 	.word	0x201d0314
 800590c:	14          	.byte	0x14
 800590d:	00          	.byte	0x00
 800590e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005912:	05e1      	lsls	r1, r4, #23
 8005914:	bf48      	it	mi
 8005916:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800591a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800591e:	0d1b      	lsrs	r3, r3, #20
 8005920:	051b      	lsls	r3, r3, #20
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1bd      	bne.n	80058a2 <_strtod_l+0x72>
 8005926:	f000 fe71 	bl	800660c <__errno>
 800592a:	2322      	movs	r3, #34	@ 0x22
 800592c:	6003      	str	r3, [r0, #0]
 800592e:	e7b8      	b.n	80058a2 <_strtod_l+0x72>
 8005930:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005934:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005938:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800593c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005940:	e7e7      	b.n	8005912 <_strtod_l+0xe2>
 8005942:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8005abc <_strtod_l+0x28c>
 8005946:	e7e4      	b.n	8005912 <_strtod_l+0xe2>
 8005948:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800594c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8005950:	e7df      	b.n	8005912 <_strtod_l+0xe2>
 8005952:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005954:	1c5a      	adds	r2, r3, #1
 8005956:	9219      	str	r2, [sp, #100]	@ 0x64
 8005958:	785b      	ldrb	r3, [r3, #1]
 800595a:	2b30      	cmp	r3, #48	@ 0x30
 800595c:	d0f9      	beq.n	8005952 <_strtod_l+0x122>
 800595e:	2b00      	cmp	r3, #0
 8005960:	d09f      	beq.n	80058a2 <_strtod_l+0x72>
 8005962:	2301      	movs	r3, #1
 8005964:	9309      	str	r3, [sp, #36]	@ 0x24
 8005966:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005968:	220a      	movs	r2, #10
 800596a:	930c      	str	r3, [sp, #48]	@ 0x30
 800596c:	2300      	movs	r3, #0
 800596e:	461f      	mov	r7, r3
 8005970:	9308      	str	r3, [sp, #32]
 8005972:	930a      	str	r3, [sp, #40]	@ 0x28
 8005974:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005976:	7805      	ldrb	r5, [r0, #0]
 8005978:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800597c:	b2d9      	uxtb	r1, r3
 800597e:	2909      	cmp	r1, #9
 8005980:	d928      	bls.n	80059d4 <_strtod_l+0x1a4>
 8005982:	2201      	movs	r2, #1
 8005984:	494e      	ldr	r1, [pc, #312]	@ (8005ac0 <_strtod_l+0x290>)
 8005986:	f000 fddd 	bl	8006544 <strncmp>
 800598a:	2800      	cmp	r0, #0
 800598c:	d032      	beq.n	80059f4 <_strtod_l+0x1c4>
 800598e:	2000      	movs	r0, #0
 8005990:	462a      	mov	r2, r5
 8005992:	4681      	mov	r9, r0
 8005994:	463d      	mov	r5, r7
 8005996:	4603      	mov	r3, r0
 8005998:	2a65      	cmp	r2, #101	@ 0x65
 800599a:	d001      	beq.n	80059a0 <_strtod_l+0x170>
 800599c:	2a45      	cmp	r2, #69	@ 0x45
 800599e:	d114      	bne.n	80059ca <_strtod_l+0x19a>
 80059a0:	b91d      	cbnz	r5, 80059aa <_strtod_l+0x17a>
 80059a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80059a4:	4302      	orrs	r2, r0
 80059a6:	d095      	beq.n	80058d4 <_strtod_l+0xa4>
 80059a8:	2500      	movs	r5, #0
 80059aa:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80059ac:	1c62      	adds	r2, r4, #1
 80059ae:	9219      	str	r2, [sp, #100]	@ 0x64
 80059b0:	7862      	ldrb	r2, [r4, #1]
 80059b2:	2a2b      	cmp	r2, #43	@ 0x2b
 80059b4:	d077      	beq.n	8005aa6 <_strtod_l+0x276>
 80059b6:	2a2d      	cmp	r2, #45	@ 0x2d
 80059b8:	d07b      	beq.n	8005ab2 <_strtod_l+0x282>
 80059ba:	f04f 0c00 	mov.w	ip, #0
 80059be:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80059c2:	2909      	cmp	r1, #9
 80059c4:	f240 8082 	bls.w	8005acc <_strtod_l+0x29c>
 80059c8:	9419      	str	r4, [sp, #100]	@ 0x64
 80059ca:	f04f 0800 	mov.w	r8, #0
 80059ce:	e0a2      	b.n	8005b16 <_strtod_l+0x2e6>
 80059d0:	2300      	movs	r3, #0
 80059d2:	e7c7      	b.n	8005964 <_strtod_l+0x134>
 80059d4:	2f08      	cmp	r7, #8
 80059d6:	bfd5      	itete	le
 80059d8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80059da:	9908      	ldrgt	r1, [sp, #32]
 80059dc:	fb02 3301 	mlale	r3, r2, r1, r3
 80059e0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80059e4:	f100 0001 	add.w	r0, r0, #1
 80059e8:	bfd4      	ite	le
 80059ea:	930a      	strle	r3, [sp, #40]	@ 0x28
 80059ec:	9308      	strgt	r3, [sp, #32]
 80059ee:	3701      	adds	r7, #1
 80059f0:	9019      	str	r0, [sp, #100]	@ 0x64
 80059f2:	e7bf      	b.n	8005974 <_strtod_l+0x144>
 80059f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80059f6:	1c5a      	adds	r2, r3, #1
 80059f8:	9219      	str	r2, [sp, #100]	@ 0x64
 80059fa:	785a      	ldrb	r2, [r3, #1]
 80059fc:	b37f      	cbz	r7, 8005a5e <_strtod_l+0x22e>
 80059fe:	4681      	mov	r9, r0
 8005a00:	463d      	mov	r5, r7
 8005a02:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005a06:	2b09      	cmp	r3, #9
 8005a08:	d912      	bls.n	8005a30 <_strtod_l+0x200>
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e7c4      	b.n	8005998 <_strtod_l+0x168>
 8005a0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005a10:	3001      	adds	r0, #1
 8005a12:	1c5a      	adds	r2, r3, #1
 8005a14:	9219      	str	r2, [sp, #100]	@ 0x64
 8005a16:	785a      	ldrb	r2, [r3, #1]
 8005a18:	2a30      	cmp	r2, #48	@ 0x30
 8005a1a:	d0f8      	beq.n	8005a0e <_strtod_l+0x1de>
 8005a1c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005a20:	2b08      	cmp	r3, #8
 8005a22:	f200 84cb 	bhi.w	80063bc <_strtod_l+0xb8c>
 8005a26:	4681      	mov	r9, r0
 8005a28:	2000      	movs	r0, #0
 8005a2a:	4605      	mov	r5, r0
 8005a2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005a2e:	930c      	str	r3, [sp, #48]	@ 0x30
 8005a30:	3a30      	subs	r2, #48	@ 0x30
 8005a32:	f100 0301 	add.w	r3, r0, #1
 8005a36:	d02a      	beq.n	8005a8e <_strtod_l+0x25e>
 8005a38:	4499      	add	r9, r3
 8005a3a:	210a      	movs	r1, #10
 8005a3c:	462b      	mov	r3, r5
 8005a3e:	eb00 0c05 	add.w	ip, r0, r5
 8005a42:	4563      	cmp	r3, ip
 8005a44:	d10d      	bne.n	8005a62 <_strtod_l+0x232>
 8005a46:	1c69      	adds	r1, r5, #1
 8005a48:	4401      	add	r1, r0
 8005a4a:	4428      	add	r0, r5
 8005a4c:	2808      	cmp	r0, #8
 8005a4e:	dc16      	bgt.n	8005a7e <_strtod_l+0x24e>
 8005a50:	230a      	movs	r3, #10
 8005a52:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005a54:	fb03 2300 	mla	r3, r3, r0, r2
 8005a58:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	e018      	b.n	8005a90 <_strtod_l+0x260>
 8005a5e:	4638      	mov	r0, r7
 8005a60:	e7da      	b.n	8005a18 <_strtod_l+0x1e8>
 8005a62:	2b08      	cmp	r3, #8
 8005a64:	f103 0301 	add.w	r3, r3, #1
 8005a68:	dc03      	bgt.n	8005a72 <_strtod_l+0x242>
 8005a6a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005a6c:	434e      	muls	r6, r1
 8005a6e:	960a      	str	r6, [sp, #40]	@ 0x28
 8005a70:	e7e7      	b.n	8005a42 <_strtod_l+0x212>
 8005a72:	2b10      	cmp	r3, #16
 8005a74:	bfde      	ittt	le
 8005a76:	9e08      	ldrle	r6, [sp, #32]
 8005a78:	434e      	mulle	r6, r1
 8005a7a:	9608      	strle	r6, [sp, #32]
 8005a7c:	e7e1      	b.n	8005a42 <_strtod_l+0x212>
 8005a7e:	280f      	cmp	r0, #15
 8005a80:	dceb      	bgt.n	8005a5a <_strtod_l+0x22a>
 8005a82:	230a      	movs	r3, #10
 8005a84:	9808      	ldr	r0, [sp, #32]
 8005a86:	fb03 2300 	mla	r3, r3, r0, r2
 8005a8a:	9308      	str	r3, [sp, #32]
 8005a8c:	e7e5      	b.n	8005a5a <_strtod_l+0x22a>
 8005a8e:	4629      	mov	r1, r5
 8005a90:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005a92:	460d      	mov	r5, r1
 8005a94:	1c50      	adds	r0, r2, #1
 8005a96:	9019      	str	r0, [sp, #100]	@ 0x64
 8005a98:	7852      	ldrb	r2, [r2, #1]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	e7b1      	b.n	8005a02 <_strtod_l+0x1d2>
 8005a9e:	f04f 0900 	mov.w	r9, #0
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e77d      	b.n	80059a2 <_strtod_l+0x172>
 8005aa6:	f04f 0c00 	mov.w	ip, #0
 8005aaa:	1ca2      	adds	r2, r4, #2
 8005aac:	9219      	str	r2, [sp, #100]	@ 0x64
 8005aae:	78a2      	ldrb	r2, [r4, #2]
 8005ab0:	e785      	b.n	80059be <_strtod_l+0x18e>
 8005ab2:	f04f 0c01 	mov.w	ip, #1
 8005ab6:	e7f8      	b.n	8005aaa <_strtod_l+0x27a>
 8005ab8:	080098bc 	.word	0x080098bc
 8005abc:	7ff00000 	.word	0x7ff00000
 8005ac0:	080098a5 	.word	0x080098a5
 8005ac4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005ac6:	1c51      	adds	r1, r2, #1
 8005ac8:	9119      	str	r1, [sp, #100]	@ 0x64
 8005aca:	7852      	ldrb	r2, [r2, #1]
 8005acc:	2a30      	cmp	r2, #48	@ 0x30
 8005ace:	d0f9      	beq.n	8005ac4 <_strtod_l+0x294>
 8005ad0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005ad4:	2908      	cmp	r1, #8
 8005ad6:	f63f af78 	bhi.w	80059ca <_strtod_l+0x19a>
 8005ada:	f04f 080a 	mov.w	r8, #10
 8005ade:	3a30      	subs	r2, #48	@ 0x30
 8005ae0:	920e      	str	r2, [sp, #56]	@ 0x38
 8005ae2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005ae4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005ae6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005ae8:	1c56      	adds	r6, r2, #1
 8005aea:	9619      	str	r6, [sp, #100]	@ 0x64
 8005aec:	7852      	ldrb	r2, [r2, #1]
 8005aee:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005af2:	f1be 0f09 	cmp.w	lr, #9
 8005af6:	d939      	bls.n	8005b6c <_strtod_l+0x33c>
 8005af8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005afa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005afe:	1a76      	subs	r6, r6, r1
 8005b00:	2e08      	cmp	r6, #8
 8005b02:	dc03      	bgt.n	8005b0c <_strtod_l+0x2dc>
 8005b04:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005b06:	4588      	cmp	r8, r1
 8005b08:	bfa8      	it	ge
 8005b0a:	4688      	movge	r8, r1
 8005b0c:	f1bc 0f00 	cmp.w	ip, #0
 8005b10:	d001      	beq.n	8005b16 <_strtod_l+0x2e6>
 8005b12:	f1c8 0800 	rsb	r8, r8, #0
 8005b16:	2d00      	cmp	r5, #0
 8005b18:	d14e      	bne.n	8005bb8 <_strtod_l+0x388>
 8005b1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005b1c:	4308      	orrs	r0, r1
 8005b1e:	f47f aec0 	bne.w	80058a2 <_strtod_l+0x72>
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f47f aed6 	bne.w	80058d4 <_strtod_l+0xa4>
 8005b28:	2a69      	cmp	r2, #105	@ 0x69
 8005b2a:	d028      	beq.n	8005b7e <_strtod_l+0x34e>
 8005b2c:	dc25      	bgt.n	8005b7a <_strtod_l+0x34a>
 8005b2e:	2a49      	cmp	r2, #73	@ 0x49
 8005b30:	d025      	beq.n	8005b7e <_strtod_l+0x34e>
 8005b32:	2a4e      	cmp	r2, #78	@ 0x4e
 8005b34:	f47f aece 	bne.w	80058d4 <_strtod_l+0xa4>
 8005b38:	499a      	ldr	r1, [pc, #616]	@ (8005da4 <_strtod_l+0x574>)
 8005b3a:	a819      	add	r0, sp, #100	@ 0x64
 8005b3c:	f001 fede 	bl	80078fc <__match>
 8005b40:	2800      	cmp	r0, #0
 8005b42:	f43f aec7 	beq.w	80058d4 <_strtod_l+0xa4>
 8005b46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	2b28      	cmp	r3, #40	@ 0x28
 8005b4c:	d12e      	bne.n	8005bac <_strtod_l+0x37c>
 8005b4e:	4996      	ldr	r1, [pc, #600]	@ (8005da8 <_strtod_l+0x578>)
 8005b50:	aa1c      	add	r2, sp, #112	@ 0x70
 8005b52:	a819      	add	r0, sp, #100	@ 0x64
 8005b54:	f001 fee6 	bl	8007924 <__hexnan>
 8005b58:	2805      	cmp	r0, #5
 8005b5a:	d127      	bne.n	8005bac <_strtod_l+0x37c>
 8005b5c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005b5e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005b62:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005b66:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005b6a:	e69a      	b.n	80058a2 <_strtod_l+0x72>
 8005b6c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005b6e:	fb08 2101 	mla	r1, r8, r1, r2
 8005b72:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005b76:	920e      	str	r2, [sp, #56]	@ 0x38
 8005b78:	e7b5      	b.n	8005ae6 <_strtod_l+0x2b6>
 8005b7a:	2a6e      	cmp	r2, #110	@ 0x6e
 8005b7c:	e7da      	b.n	8005b34 <_strtod_l+0x304>
 8005b7e:	498b      	ldr	r1, [pc, #556]	@ (8005dac <_strtod_l+0x57c>)
 8005b80:	a819      	add	r0, sp, #100	@ 0x64
 8005b82:	f001 febb 	bl	80078fc <__match>
 8005b86:	2800      	cmp	r0, #0
 8005b88:	f43f aea4 	beq.w	80058d4 <_strtod_l+0xa4>
 8005b8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b8e:	4988      	ldr	r1, [pc, #544]	@ (8005db0 <_strtod_l+0x580>)
 8005b90:	3b01      	subs	r3, #1
 8005b92:	a819      	add	r0, sp, #100	@ 0x64
 8005b94:	9319      	str	r3, [sp, #100]	@ 0x64
 8005b96:	f001 feb1 	bl	80078fc <__match>
 8005b9a:	b910      	cbnz	r0, 8005ba2 <_strtod_l+0x372>
 8005b9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	9319      	str	r3, [sp, #100]	@ 0x64
 8005ba2:	f04f 0a00 	mov.w	sl, #0
 8005ba6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8005db4 <_strtod_l+0x584>
 8005baa:	e67a      	b.n	80058a2 <_strtod_l+0x72>
 8005bac:	4882      	ldr	r0, [pc, #520]	@ (8005db8 <_strtod_l+0x588>)
 8005bae:	f000 fd77 	bl	80066a0 <nan>
 8005bb2:	4682      	mov	sl, r0
 8005bb4:	468b      	mov	fp, r1
 8005bb6:	e674      	b.n	80058a2 <_strtod_l+0x72>
 8005bb8:	eba8 0309 	sub.w	r3, r8, r9
 8005bbc:	2f00      	cmp	r7, #0
 8005bbe:	bf08      	it	eq
 8005bc0:	462f      	moveq	r7, r5
 8005bc2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005bc4:	2d10      	cmp	r5, #16
 8005bc6:	462c      	mov	r4, r5
 8005bc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bca:	bfa8      	it	ge
 8005bcc:	2410      	movge	r4, #16
 8005bce:	f7fa fc09 	bl	80003e4 <__aeabi_ui2d>
 8005bd2:	2d09      	cmp	r5, #9
 8005bd4:	4682      	mov	sl, r0
 8005bd6:	468b      	mov	fp, r1
 8005bd8:	dc11      	bgt.n	8005bfe <_strtod_l+0x3ce>
 8005bda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f43f ae60 	beq.w	80058a2 <_strtod_l+0x72>
 8005be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005be4:	dd76      	ble.n	8005cd4 <_strtod_l+0x4a4>
 8005be6:	2b16      	cmp	r3, #22
 8005be8:	dc5d      	bgt.n	8005ca6 <_strtod_l+0x476>
 8005bea:	4974      	ldr	r1, [pc, #464]	@ (8005dbc <_strtod_l+0x58c>)
 8005bec:	4652      	mov	r2, sl
 8005bee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005bf2:	465b      	mov	r3, fp
 8005bf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005bf8:	f7fa fc6e 	bl	80004d8 <__aeabi_dmul>
 8005bfc:	e7d9      	b.n	8005bb2 <_strtod_l+0x382>
 8005bfe:	4b6f      	ldr	r3, [pc, #444]	@ (8005dbc <_strtod_l+0x58c>)
 8005c00:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c04:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005c08:	f7fa fc66 	bl	80004d8 <__aeabi_dmul>
 8005c0c:	4682      	mov	sl, r0
 8005c0e:	9808      	ldr	r0, [sp, #32]
 8005c10:	468b      	mov	fp, r1
 8005c12:	f7fa fbe7 	bl	80003e4 <__aeabi_ui2d>
 8005c16:	4602      	mov	r2, r0
 8005c18:	460b      	mov	r3, r1
 8005c1a:	4650      	mov	r0, sl
 8005c1c:	4659      	mov	r1, fp
 8005c1e:	f7fa faa5 	bl	800016c <__adddf3>
 8005c22:	2d0f      	cmp	r5, #15
 8005c24:	4682      	mov	sl, r0
 8005c26:	468b      	mov	fp, r1
 8005c28:	ddd7      	ble.n	8005bda <_strtod_l+0x3aa>
 8005c2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c2c:	1b2c      	subs	r4, r5, r4
 8005c2e:	441c      	add	r4, r3
 8005c30:	2c00      	cmp	r4, #0
 8005c32:	f340 8096 	ble.w	8005d62 <_strtod_l+0x532>
 8005c36:	f014 030f 	ands.w	r3, r4, #15
 8005c3a:	d00a      	beq.n	8005c52 <_strtod_l+0x422>
 8005c3c:	495f      	ldr	r1, [pc, #380]	@ (8005dbc <_strtod_l+0x58c>)
 8005c3e:	4652      	mov	r2, sl
 8005c40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005c44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c48:	465b      	mov	r3, fp
 8005c4a:	f7fa fc45 	bl	80004d8 <__aeabi_dmul>
 8005c4e:	4682      	mov	sl, r0
 8005c50:	468b      	mov	fp, r1
 8005c52:	f034 040f 	bics.w	r4, r4, #15
 8005c56:	d073      	beq.n	8005d40 <_strtod_l+0x510>
 8005c58:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005c5c:	dd48      	ble.n	8005cf0 <_strtod_l+0x4c0>
 8005c5e:	2400      	movs	r4, #0
 8005c60:	46a0      	mov	r8, r4
 8005c62:	46a1      	mov	r9, r4
 8005c64:	940a      	str	r4, [sp, #40]	@ 0x28
 8005c66:	2322      	movs	r3, #34	@ 0x22
 8005c68:	f04f 0a00 	mov.w	sl, #0
 8005c6c:	9a05      	ldr	r2, [sp, #20]
 8005c6e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8005db4 <_strtod_l+0x584>
 8005c72:	6013      	str	r3, [r2, #0]
 8005c74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f43f ae13 	beq.w	80058a2 <_strtod_l+0x72>
 8005c7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005c7e:	9805      	ldr	r0, [sp, #20]
 8005c80:	f002 fe82 	bl	8008988 <_Bfree>
 8005c84:	4649      	mov	r1, r9
 8005c86:	9805      	ldr	r0, [sp, #20]
 8005c88:	f002 fe7e 	bl	8008988 <_Bfree>
 8005c8c:	4641      	mov	r1, r8
 8005c8e:	9805      	ldr	r0, [sp, #20]
 8005c90:	f002 fe7a 	bl	8008988 <_Bfree>
 8005c94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005c96:	9805      	ldr	r0, [sp, #20]
 8005c98:	f002 fe76 	bl	8008988 <_Bfree>
 8005c9c:	4621      	mov	r1, r4
 8005c9e:	9805      	ldr	r0, [sp, #20]
 8005ca0:	f002 fe72 	bl	8008988 <_Bfree>
 8005ca4:	e5fd      	b.n	80058a2 <_strtod_l+0x72>
 8005ca6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ca8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005cac:	4293      	cmp	r3, r2
 8005cae:	dbbc      	blt.n	8005c2a <_strtod_l+0x3fa>
 8005cb0:	4c42      	ldr	r4, [pc, #264]	@ (8005dbc <_strtod_l+0x58c>)
 8005cb2:	f1c5 050f 	rsb	r5, r5, #15
 8005cb6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005cba:	4652      	mov	r2, sl
 8005cbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cc0:	465b      	mov	r3, fp
 8005cc2:	f7fa fc09 	bl	80004d8 <__aeabi_dmul>
 8005cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cc8:	1b5d      	subs	r5, r3, r5
 8005cca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005cce:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005cd2:	e791      	b.n	8005bf8 <_strtod_l+0x3c8>
 8005cd4:	3316      	adds	r3, #22
 8005cd6:	dba8      	blt.n	8005c2a <_strtod_l+0x3fa>
 8005cd8:	4b38      	ldr	r3, [pc, #224]	@ (8005dbc <_strtod_l+0x58c>)
 8005cda:	eba9 0808 	sub.w	r8, r9, r8
 8005cde:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005ce2:	4650      	mov	r0, sl
 8005ce4:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005ce8:	4659      	mov	r1, fp
 8005cea:	f7fa fd1f 	bl	800072c <__aeabi_ddiv>
 8005cee:	e760      	b.n	8005bb2 <_strtod_l+0x382>
 8005cf0:	4b33      	ldr	r3, [pc, #204]	@ (8005dc0 <_strtod_l+0x590>)
 8005cf2:	4650      	mov	r0, sl
 8005cf4:	9308      	str	r3, [sp, #32]
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	4659      	mov	r1, fp
 8005cfa:	461e      	mov	r6, r3
 8005cfc:	1124      	asrs	r4, r4, #4
 8005cfe:	2c01      	cmp	r4, #1
 8005d00:	dc21      	bgt.n	8005d46 <_strtod_l+0x516>
 8005d02:	b10b      	cbz	r3, 8005d08 <_strtod_l+0x4d8>
 8005d04:	4682      	mov	sl, r0
 8005d06:	468b      	mov	fp, r1
 8005d08:	492d      	ldr	r1, [pc, #180]	@ (8005dc0 <_strtod_l+0x590>)
 8005d0a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005d0e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005d12:	4652      	mov	r2, sl
 8005d14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d18:	465b      	mov	r3, fp
 8005d1a:	f7fa fbdd 	bl	80004d8 <__aeabi_dmul>
 8005d1e:	4b25      	ldr	r3, [pc, #148]	@ (8005db4 <_strtod_l+0x584>)
 8005d20:	460a      	mov	r2, r1
 8005d22:	400b      	ands	r3, r1
 8005d24:	4927      	ldr	r1, [pc, #156]	@ (8005dc4 <_strtod_l+0x594>)
 8005d26:	4682      	mov	sl, r0
 8005d28:	428b      	cmp	r3, r1
 8005d2a:	d898      	bhi.n	8005c5e <_strtod_l+0x42e>
 8005d2c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005d30:	428b      	cmp	r3, r1
 8005d32:	bf86      	itte	hi
 8005d34:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8005d38:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8005dc8 <_strtod_l+0x598>
 8005d3c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005d40:	2300      	movs	r3, #0
 8005d42:	9308      	str	r3, [sp, #32]
 8005d44:	e07a      	b.n	8005e3c <_strtod_l+0x60c>
 8005d46:	07e2      	lsls	r2, r4, #31
 8005d48:	d505      	bpl.n	8005d56 <_strtod_l+0x526>
 8005d4a:	9b08      	ldr	r3, [sp, #32]
 8005d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d50:	f7fa fbc2 	bl	80004d8 <__aeabi_dmul>
 8005d54:	2301      	movs	r3, #1
 8005d56:	9a08      	ldr	r2, [sp, #32]
 8005d58:	3601      	adds	r6, #1
 8005d5a:	3208      	adds	r2, #8
 8005d5c:	1064      	asrs	r4, r4, #1
 8005d5e:	9208      	str	r2, [sp, #32]
 8005d60:	e7cd      	b.n	8005cfe <_strtod_l+0x4ce>
 8005d62:	d0ed      	beq.n	8005d40 <_strtod_l+0x510>
 8005d64:	4264      	negs	r4, r4
 8005d66:	f014 020f 	ands.w	r2, r4, #15
 8005d6a:	d00a      	beq.n	8005d82 <_strtod_l+0x552>
 8005d6c:	4b13      	ldr	r3, [pc, #76]	@ (8005dbc <_strtod_l+0x58c>)
 8005d6e:	4650      	mov	r0, sl
 8005d70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d74:	4659      	mov	r1, fp
 8005d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7a:	f7fa fcd7 	bl	800072c <__aeabi_ddiv>
 8005d7e:	4682      	mov	sl, r0
 8005d80:	468b      	mov	fp, r1
 8005d82:	1124      	asrs	r4, r4, #4
 8005d84:	d0dc      	beq.n	8005d40 <_strtod_l+0x510>
 8005d86:	2c1f      	cmp	r4, #31
 8005d88:	dd20      	ble.n	8005dcc <_strtod_l+0x59c>
 8005d8a:	2400      	movs	r4, #0
 8005d8c:	46a0      	mov	r8, r4
 8005d8e:	46a1      	mov	r9, r4
 8005d90:	940a      	str	r4, [sp, #40]	@ 0x28
 8005d92:	2322      	movs	r3, #34	@ 0x22
 8005d94:	9a05      	ldr	r2, [sp, #20]
 8005d96:	f04f 0a00 	mov.w	sl, #0
 8005d9a:	f04f 0b00 	mov.w	fp, #0
 8005d9e:	6013      	str	r3, [r2, #0]
 8005da0:	e768      	b.n	8005c74 <_strtod_l+0x444>
 8005da2:	bf00      	nop
 8005da4:	0800987b 	.word	0x0800987b
 8005da8:	080098a8 	.word	0x080098a8
 8005dac:	08009873 	.word	0x08009873
 8005db0:	08009a04 	.word	0x08009a04
 8005db4:	7ff00000 	.word	0x7ff00000
 8005db8:	08009cab 	.word	0x08009cab
 8005dbc:	08009ba8 	.word	0x08009ba8
 8005dc0:	08009b80 	.word	0x08009b80
 8005dc4:	7ca00000 	.word	0x7ca00000
 8005dc8:	7fefffff 	.word	0x7fefffff
 8005dcc:	f014 0310 	ands.w	r3, r4, #16
 8005dd0:	bf18      	it	ne
 8005dd2:	236a      	movne	r3, #106	@ 0x6a
 8005dd4:	4650      	mov	r0, sl
 8005dd6:	9308      	str	r3, [sp, #32]
 8005dd8:	4659      	mov	r1, fp
 8005dda:	2300      	movs	r3, #0
 8005ddc:	4ea9      	ldr	r6, [pc, #676]	@ (8006084 <_strtod_l+0x854>)
 8005dde:	07e2      	lsls	r2, r4, #31
 8005de0:	d504      	bpl.n	8005dec <_strtod_l+0x5bc>
 8005de2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005de6:	f7fa fb77 	bl	80004d8 <__aeabi_dmul>
 8005dea:	2301      	movs	r3, #1
 8005dec:	1064      	asrs	r4, r4, #1
 8005dee:	f106 0608 	add.w	r6, r6, #8
 8005df2:	d1f4      	bne.n	8005dde <_strtod_l+0x5ae>
 8005df4:	b10b      	cbz	r3, 8005dfa <_strtod_l+0x5ca>
 8005df6:	4682      	mov	sl, r0
 8005df8:	468b      	mov	fp, r1
 8005dfa:	9b08      	ldr	r3, [sp, #32]
 8005dfc:	b1b3      	cbz	r3, 8005e2c <_strtod_l+0x5fc>
 8005dfe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005e02:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	4659      	mov	r1, fp
 8005e0a:	dd0f      	ble.n	8005e2c <_strtod_l+0x5fc>
 8005e0c:	2b1f      	cmp	r3, #31
 8005e0e:	dd57      	ble.n	8005ec0 <_strtod_l+0x690>
 8005e10:	2b34      	cmp	r3, #52	@ 0x34
 8005e12:	bfd8      	it	le
 8005e14:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8005e18:	f04f 0a00 	mov.w	sl, #0
 8005e1c:	bfcf      	iteee	gt
 8005e1e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005e22:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8005e26:	4093      	lslle	r3, r2
 8005e28:	ea03 0b01 	andle.w	fp, r3, r1
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	2300      	movs	r3, #0
 8005e30:	4650      	mov	r0, sl
 8005e32:	4659      	mov	r1, fp
 8005e34:	f7fa fdb8 	bl	80009a8 <__aeabi_dcmpeq>
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	d1a6      	bne.n	8005d8a <_strtod_l+0x55a>
 8005e3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e3e:	463a      	mov	r2, r7
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005e44:	462b      	mov	r3, r5
 8005e46:	9805      	ldr	r0, [sp, #20]
 8005e48:	f002 fe06 	bl	8008a58 <__s2b>
 8005e4c:	900a      	str	r0, [sp, #40]	@ 0x28
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	f43f af05 	beq.w	8005c5e <_strtod_l+0x42e>
 8005e54:	2400      	movs	r4, #0
 8005e56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e58:	eba9 0308 	sub.w	r3, r9, r8
 8005e5c:	2a00      	cmp	r2, #0
 8005e5e:	bfa8      	it	ge
 8005e60:	2300      	movge	r3, #0
 8005e62:	46a0      	mov	r8, r4
 8005e64:	9312      	str	r3, [sp, #72]	@ 0x48
 8005e66:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005e6a:	9316      	str	r3, [sp, #88]	@ 0x58
 8005e6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e6e:	9805      	ldr	r0, [sp, #20]
 8005e70:	6859      	ldr	r1, [r3, #4]
 8005e72:	f002 fd49 	bl	8008908 <_Balloc>
 8005e76:	4681      	mov	r9, r0
 8005e78:	2800      	cmp	r0, #0
 8005e7a:	f43f aef4 	beq.w	8005c66 <_strtod_l+0x436>
 8005e7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e80:	300c      	adds	r0, #12
 8005e82:	691a      	ldr	r2, [r3, #16]
 8005e84:	f103 010c 	add.w	r1, r3, #12
 8005e88:	3202      	adds	r2, #2
 8005e8a:	0092      	lsls	r2, r2, #2
 8005e8c:	f000 fbf9 	bl	8006682 <memcpy>
 8005e90:	ab1c      	add	r3, sp, #112	@ 0x70
 8005e92:	9301      	str	r3, [sp, #4]
 8005e94:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	4652      	mov	r2, sl
 8005e9a:	465b      	mov	r3, fp
 8005e9c:	9805      	ldr	r0, [sp, #20]
 8005e9e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8005ea2:	f003 f90b 	bl	80090bc <__d2b>
 8005ea6:	901a      	str	r0, [sp, #104]	@ 0x68
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	f43f aedc 	beq.w	8005c66 <_strtod_l+0x436>
 8005eae:	2101      	movs	r1, #1
 8005eb0:	9805      	ldr	r0, [sp, #20]
 8005eb2:	f002 fe67 	bl	8008b84 <__i2b>
 8005eb6:	4680      	mov	r8, r0
 8005eb8:	b948      	cbnz	r0, 8005ece <_strtod_l+0x69e>
 8005eba:	f04f 0800 	mov.w	r8, #0
 8005ebe:	e6d2      	b.n	8005c66 <_strtod_l+0x436>
 8005ec0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec8:	ea03 0a0a 	and.w	sl, r3, sl
 8005ecc:	e7ae      	b.n	8005e2c <_strtod_l+0x5fc>
 8005ece:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8005ed0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8005ed2:	2d00      	cmp	r5, #0
 8005ed4:	bfab      	itete	ge
 8005ed6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005ed8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005eda:	18ef      	addge	r7, r5, r3
 8005edc:	1b5e      	sublt	r6, r3, r5
 8005ede:	9b08      	ldr	r3, [sp, #32]
 8005ee0:	bfa8      	it	ge
 8005ee2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005ee4:	eba5 0503 	sub.w	r5, r5, r3
 8005ee8:	4415      	add	r5, r2
 8005eea:	4b67      	ldr	r3, [pc, #412]	@ (8006088 <_strtod_l+0x858>)
 8005eec:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 8005ef0:	bfb8      	it	lt
 8005ef2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8005ef4:	429d      	cmp	r5, r3
 8005ef6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005efa:	da50      	bge.n	8005f9e <_strtod_l+0x76e>
 8005efc:	1b5b      	subs	r3, r3, r5
 8005efe:	2b1f      	cmp	r3, #31
 8005f00:	f04f 0101 	mov.w	r1, #1
 8005f04:	eba2 0203 	sub.w	r2, r2, r3
 8005f08:	dc3d      	bgt.n	8005f86 <_strtod_l+0x756>
 8005f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f0e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005f10:	2300      	movs	r3, #0
 8005f12:	9310      	str	r3, [sp, #64]	@ 0x40
 8005f14:	18bd      	adds	r5, r7, r2
 8005f16:	9b08      	ldr	r3, [sp, #32]
 8005f18:	42af      	cmp	r7, r5
 8005f1a:	4416      	add	r6, r2
 8005f1c:	441e      	add	r6, r3
 8005f1e:	463b      	mov	r3, r7
 8005f20:	bfa8      	it	ge
 8005f22:	462b      	movge	r3, r5
 8005f24:	42b3      	cmp	r3, r6
 8005f26:	bfa8      	it	ge
 8005f28:	4633      	movge	r3, r6
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	bfc2      	ittt	gt
 8005f2e:	1aed      	subgt	r5, r5, r3
 8005f30:	1af6      	subgt	r6, r6, r3
 8005f32:	1aff      	subgt	r7, r7, r3
 8005f34:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	dd16      	ble.n	8005f68 <_strtod_l+0x738>
 8005f3a:	4641      	mov	r1, r8
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	9805      	ldr	r0, [sp, #20]
 8005f40:	f002 fede 	bl	8008d00 <__pow5mult>
 8005f44:	4680      	mov	r8, r0
 8005f46:	2800      	cmp	r0, #0
 8005f48:	d0b7      	beq.n	8005eba <_strtod_l+0x68a>
 8005f4a:	4601      	mov	r1, r0
 8005f4c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005f4e:	9805      	ldr	r0, [sp, #20]
 8005f50:	f002 fe2e 	bl	8008bb0 <__multiply>
 8005f54:	900e      	str	r0, [sp, #56]	@ 0x38
 8005f56:	2800      	cmp	r0, #0
 8005f58:	f43f ae85 	beq.w	8005c66 <_strtod_l+0x436>
 8005f5c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005f5e:	9805      	ldr	r0, [sp, #20]
 8005f60:	f002 fd12 	bl	8008988 <_Bfree>
 8005f64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f66:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f68:	2d00      	cmp	r5, #0
 8005f6a:	dc1d      	bgt.n	8005fa8 <_strtod_l+0x778>
 8005f6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	dd23      	ble.n	8005fba <_strtod_l+0x78a>
 8005f72:	4649      	mov	r1, r9
 8005f74:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8005f76:	9805      	ldr	r0, [sp, #20]
 8005f78:	f002 fec2 	bl	8008d00 <__pow5mult>
 8005f7c:	4681      	mov	r9, r0
 8005f7e:	b9e0      	cbnz	r0, 8005fba <_strtod_l+0x78a>
 8005f80:	f04f 0900 	mov.w	r9, #0
 8005f84:	e66f      	b.n	8005c66 <_strtod_l+0x436>
 8005f86:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8005f8a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8005f8e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8005f92:	35e2      	adds	r5, #226	@ 0xe2
 8005f94:	fa01 f305 	lsl.w	r3, r1, r5
 8005f98:	9310      	str	r3, [sp, #64]	@ 0x40
 8005f9a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005f9c:	e7ba      	b.n	8005f14 <_strtod_l+0x6e4>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	9310      	str	r3, [sp, #64]	@ 0x40
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005fa6:	e7b5      	b.n	8005f14 <_strtod_l+0x6e4>
 8005fa8:	462a      	mov	r2, r5
 8005faa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005fac:	9805      	ldr	r0, [sp, #20]
 8005fae:	f002 ff01 	bl	8008db4 <__lshift>
 8005fb2:	901a      	str	r0, [sp, #104]	@ 0x68
 8005fb4:	2800      	cmp	r0, #0
 8005fb6:	d1d9      	bne.n	8005f6c <_strtod_l+0x73c>
 8005fb8:	e655      	b.n	8005c66 <_strtod_l+0x436>
 8005fba:	2e00      	cmp	r6, #0
 8005fbc:	dd07      	ble.n	8005fce <_strtod_l+0x79e>
 8005fbe:	4649      	mov	r1, r9
 8005fc0:	4632      	mov	r2, r6
 8005fc2:	9805      	ldr	r0, [sp, #20]
 8005fc4:	f002 fef6 	bl	8008db4 <__lshift>
 8005fc8:	4681      	mov	r9, r0
 8005fca:	2800      	cmp	r0, #0
 8005fcc:	d0d8      	beq.n	8005f80 <_strtod_l+0x750>
 8005fce:	2f00      	cmp	r7, #0
 8005fd0:	dd08      	ble.n	8005fe4 <_strtod_l+0x7b4>
 8005fd2:	4641      	mov	r1, r8
 8005fd4:	463a      	mov	r2, r7
 8005fd6:	9805      	ldr	r0, [sp, #20]
 8005fd8:	f002 feec 	bl	8008db4 <__lshift>
 8005fdc:	4680      	mov	r8, r0
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	f43f ae41 	beq.w	8005c66 <_strtod_l+0x436>
 8005fe4:	464a      	mov	r2, r9
 8005fe6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005fe8:	9805      	ldr	r0, [sp, #20]
 8005fea:	f002 ff6b 	bl	8008ec4 <__mdiff>
 8005fee:	4604      	mov	r4, r0
 8005ff0:	2800      	cmp	r0, #0
 8005ff2:	f43f ae38 	beq.w	8005c66 <_strtod_l+0x436>
 8005ff6:	68c3      	ldr	r3, [r0, #12]
 8005ff8:	4641      	mov	r1, r8
 8005ffa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	60c3      	str	r3, [r0, #12]
 8006000:	f002 ff44 	bl	8008e8c <__mcmp>
 8006004:	2800      	cmp	r0, #0
 8006006:	da45      	bge.n	8006094 <_strtod_l+0x864>
 8006008:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800600a:	ea53 030a 	orrs.w	r3, r3, sl
 800600e:	d16b      	bne.n	80060e8 <_strtod_l+0x8b8>
 8006010:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006014:	2b00      	cmp	r3, #0
 8006016:	d167      	bne.n	80060e8 <_strtod_l+0x8b8>
 8006018:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800601c:	0d1b      	lsrs	r3, r3, #20
 800601e:	051b      	lsls	r3, r3, #20
 8006020:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006024:	d960      	bls.n	80060e8 <_strtod_l+0x8b8>
 8006026:	6963      	ldr	r3, [r4, #20]
 8006028:	b913      	cbnz	r3, 8006030 <_strtod_l+0x800>
 800602a:	6923      	ldr	r3, [r4, #16]
 800602c:	2b01      	cmp	r3, #1
 800602e:	dd5b      	ble.n	80060e8 <_strtod_l+0x8b8>
 8006030:	4621      	mov	r1, r4
 8006032:	2201      	movs	r2, #1
 8006034:	9805      	ldr	r0, [sp, #20]
 8006036:	f002 febd 	bl	8008db4 <__lshift>
 800603a:	4641      	mov	r1, r8
 800603c:	4604      	mov	r4, r0
 800603e:	f002 ff25 	bl	8008e8c <__mcmp>
 8006042:	2800      	cmp	r0, #0
 8006044:	dd50      	ble.n	80060e8 <_strtod_l+0x8b8>
 8006046:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800604a:	9a08      	ldr	r2, [sp, #32]
 800604c:	0d1b      	lsrs	r3, r3, #20
 800604e:	051b      	lsls	r3, r3, #20
 8006050:	2a00      	cmp	r2, #0
 8006052:	d06a      	beq.n	800612a <_strtod_l+0x8fa>
 8006054:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006058:	d867      	bhi.n	800612a <_strtod_l+0x8fa>
 800605a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800605e:	f67f ae98 	bls.w	8005d92 <_strtod_l+0x562>
 8006062:	4650      	mov	r0, sl
 8006064:	4659      	mov	r1, fp
 8006066:	4b09      	ldr	r3, [pc, #36]	@ (800608c <_strtod_l+0x85c>)
 8006068:	2200      	movs	r2, #0
 800606a:	f7fa fa35 	bl	80004d8 <__aeabi_dmul>
 800606e:	4b08      	ldr	r3, [pc, #32]	@ (8006090 <_strtod_l+0x860>)
 8006070:	4682      	mov	sl, r0
 8006072:	400b      	ands	r3, r1
 8006074:	468b      	mov	fp, r1
 8006076:	2b00      	cmp	r3, #0
 8006078:	f47f ae00 	bne.w	8005c7c <_strtod_l+0x44c>
 800607c:	2322      	movs	r3, #34	@ 0x22
 800607e:	9a05      	ldr	r2, [sp, #20]
 8006080:	6013      	str	r3, [r2, #0]
 8006082:	e5fb      	b.n	8005c7c <_strtod_l+0x44c>
 8006084:	080098d0 	.word	0x080098d0
 8006088:	fffffc02 	.word	0xfffffc02
 800608c:	39500000 	.word	0x39500000
 8006090:	7ff00000 	.word	0x7ff00000
 8006094:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006098:	d165      	bne.n	8006166 <_strtod_l+0x936>
 800609a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800609c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80060a0:	b35a      	cbz	r2, 80060fa <_strtod_l+0x8ca>
 80060a2:	4a99      	ldr	r2, [pc, #612]	@ (8006308 <_strtod_l+0xad8>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d12b      	bne.n	8006100 <_strtod_l+0x8d0>
 80060a8:	9b08      	ldr	r3, [sp, #32]
 80060aa:	4651      	mov	r1, sl
 80060ac:	b303      	cbz	r3, 80060f0 <_strtod_l+0x8c0>
 80060ae:	465a      	mov	r2, fp
 80060b0:	4b96      	ldr	r3, [pc, #600]	@ (800630c <_strtod_l+0xadc>)
 80060b2:	4013      	ands	r3, r2
 80060b4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80060b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80060bc:	d81b      	bhi.n	80060f6 <_strtod_l+0x8c6>
 80060be:	0d1b      	lsrs	r3, r3, #20
 80060c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80060c4:	fa02 f303 	lsl.w	r3, r2, r3
 80060c8:	4299      	cmp	r1, r3
 80060ca:	d119      	bne.n	8006100 <_strtod_l+0x8d0>
 80060cc:	4b90      	ldr	r3, [pc, #576]	@ (8006310 <_strtod_l+0xae0>)
 80060ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d102      	bne.n	80060da <_strtod_l+0x8aa>
 80060d4:	3101      	adds	r1, #1
 80060d6:	f43f adc6 	beq.w	8005c66 <_strtod_l+0x436>
 80060da:	f04f 0a00 	mov.w	sl, #0
 80060de:	4b8b      	ldr	r3, [pc, #556]	@ (800630c <_strtod_l+0xadc>)
 80060e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80060e2:	401a      	ands	r2, r3
 80060e4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80060e8:	9b08      	ldr	r3, [sp, #32]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1b9      	bne.n	8006062 <_strtod_l+0x832>
 80060ee:	e5c5      	b.n	8005c7c <_strtod_l+0x44c>
 80060f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80060f4:	e7e8      	b.n	80060c8 <_strtod_l+0x898>
 80060f6:	4613      	mov	r3, r2
 80060f8:	e7e6      	b.n	80060c8 <_strtod_l+0x898>
 80060fa:	ea53 030a 	orrs.w	r3, r3, sl
 80060fe:	d0a2      	beq.n	8006046 <_strtod_l+0x816>
 8006100:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006102:	b1db      	cbz	r3, 800613c <_strtod_l+0x90c>
 8006104:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006106:	4213      	tst	r3, r2
 8006108:	d0ee      	beq.n	80060e8 <_strtod_l+0x8b8>
 800610a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800610c:	4650      	mov	r0, sl
 800610e:	4659      	mov	r1, fp
 8006110:	9a08      	ldr	r2, [sp, #32]
 8006112:	b1bb      	cbz	r3, 8006144 <_strtod_l+0x914>
 8006114:	f7ff fb68 	bl	80057e8 <sulp>
 8006118:	4602      	mov	r2, r0
 800611a:	460b      	mov	r3, r1
 800611c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006120:	f7fa f824 	bl	800016c <__adddf3>
 8006124:	4682      	mov	sl, r0
 8006126:	468b      	mov	fp, r1
 8006128:	e7de      	b.n	80060e8 <_strtod_l+0x8b8>
 800612a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800612e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006132:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006136:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800613a:	e7d5      	b.n	80060e8 <_strtod_l+0x8b8>
 800613c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800613e:	ea13 0f0a 	tst.w	r3, sl
 8006142:	e7e1      	b.n	8006108 <_strtod_l+0x8d8>
 8006144:	f7ff fb50 	bl	80057e8 <sulp>
 8006148:	4602      	mov	r2, r0
 800614a:	460b      	mov	r3, r1
 800614c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006150:	f7fa f80a 	bl	8000168 <__aeabi_dsub>
 8006154:	2200      	movs	r2, #0
 8006156:	2300      	movs	r3, #0
 8006158:	4682      	mov	sl, r0
 800615a:	468b      	mov	fp, r1
 800615c:	f7fa fc24 	bl	80009a8 <__aeabi_dcmpeq>
 8006160:	2800      	cmp	r0, #0
 8006162:	d0c1      	beq.n	80060e8 <_strtod_l+0x8b8>
 8006164:	e615      	b.n	8005d92 <_strtod_l+0x562>
 8006166:	4641      	mov	r1, r8
 8006168:	4620      	mov	r0, r4
 800616a:	f002 ffff 	bl	800916c <__ratio>
 800616e:	2200      	movs	r2, #0
 8006170:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006174:	4606      	mov	r6, r0
 8006176:	460f      	mov	r7, r1
 8006178:	f7fa fc2a 	bl	80009d0 <__aeabi_dcmple>
 800617c:	2800      	cmp	r0, #0
 800617e:	d06d      	beq.n	800625c <_strtod_l+0xa2c>
 8006180:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006182:	2b00      	cmp	r3, #0
 8006184:	d178      	bne.n	8006278 <_strtod_l+0xa48>
 8006186:	f1ba 0f00 	cmp.w	sl, #0
 800618a:	d156      	bne.n	800623a <_strtod_l+0xa0a>
 800618c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800618e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006192:	2b00      	cmp	r3, #0
 8006194:	d158      	bne.n	8006248 <_strtod_l+0xa18>
 8006196:	2200      	movs	r2, #0
 8006198:	4630      	mov	r0, r6
 800619a:	4639      	mov	r1, r7
 800619c:	4b5d      	ldr	r3, [pc, #372]	@ (8006314 <_strtod_l+0xae4>)
 800619e:	f7fa fc0d 	bl	80009bc <__aeabi_dcmplt>
 80061a2:	2800      	cmp	r0, #0
 80061a4:	d157      	bne.n	8006256 <_strtod_l+0xa26>
 80061a6:	4630      	mov	r0, r6
 80061a8:	4639      	mov	r1, r7
 80061aa:	2200      	movs	r2, #0
 80061ac:	4b5a      	ldr	r3, [pc, #360]	@ (8006318 <_strtod_l+0xae8>)
 80061ae:	f7fa f993 	bl	80004d8 <__aeabi_dmul>
 80061b2:	4606      	mov	r6, r0
 80061b4:	460f      	mov	r7, r1
 80061b6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80061ba:	9606      	str	r6, [sp, #24]
 80061bc:	9307      	str	r3, [sp, #28]
 80061be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80061c2:	4d52      	ldr	r5, [pc, #328]	@ (800630c <_strtod_l+0xadc>)
 80061c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80061c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80061ca:	401d      	ands	r5, r3
 80061cc:	4b53      	ldr	r3, [pc, #332]	@ (800631c <_strtod_l+0xaec>)
 80061ce:	429d      	cmp	r5, r3
 80061d0:	f040 80aa 	bne.w	8006328 <_strtod_l+0xaf8>
 80061d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80061d6:	4650      	mov	r0, sl
 80061d8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80061dc:	4659      	mov	r1, fp
 80061de:	f002 ff05 	bl	8008fec <__ulp>
 80061e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80061e6:	f7fa f977 	bl	80004d8 <__aeabi_dmul>
 80061ea:	4652      	mov	r2, sl
 80061ec:	465b      	mov	r3, fp
 80061ee:	f7f9 ffbd 	bl	800016c <__adddf3>
 80061f2:	460b      	mov	r3, r1
 80061f4:	4945      	ldr	r1, [pc, #276]	@ (800630c <_strtod_l+0xadc>)
 80061f6:	4a4a      	ldr	r2, [pc, #296]	@ (8006320 <_strtod_l+0xaf0>)
 80061f8:	4019      	ands	r1, r3
 80061fa:	4291      	cmp	r1, r2
 80061fc:	4682      	mov	sl, r0
 80061fe:	d942      	bls.n	8006286 <_strtod_l+0xa56>
 8006200:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006202:	4b43      	ldr	r3, [pc, #268]	@ (8006310 <_strtod_l+0xae0>)
 8006204:	429a      	cmp	r2, r3
 8006206:	d103      	bne.n	8006210 <_strtod_l+0x9e0>
 8006208:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800620a:	3301      	adds	r3, #1
 800620c:	f43f ad2b 	beq.w	8005c66 <_strtod_l+0x436>
 8006210:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006214:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8006310 <_strtod_l+0xae0>
 8006218:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800621a:	9805      	ldr	r0, [sp, #20]
 800621c:	f002 fbb4 	bl	8008988 <_Bfree>
 8006220:	4649      	mov	r1, r9
 8006222:	9805      	ldr	r0, [sp, #20]
 8006224:	f002 fbb0 	bl	8008988 <_Bfree>
 8006228:	4641      	mov	r1, r8
 800622a:	9805      	ldr	r0, [sp, #20]
 800622c:	f002 fbac 	bl	8008988 <_Bfree>
 8006230:	4621      	mov	r1, r4
 8006232:	9805      	ldr	r0, [sp, #20]
 8006234:	f002 fba8 	bl	8008988 <_Bfree>
 8006238:	e618      	b.n	8005e6c <_strtod_l+0x63c>
 800623a:	f1ba 0f01 	cmp.w	sl, #1
 800623e:	d103      	bne.n	8006248 <_strtod_l+0xa18>
 8006240:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006242:	2b00      	cmp	r3, #0
 8006244:	f43f ada5 	beq.w	8005d92 <_strtod_l+0x562>
 8006248:	2200      	movs	r2, #0
 800624a:	4b36      	ldr	r3, [pc, #216]	@ (8006324 <_strtod_l+0xaf4>)
 800624c:	2600      	movs	r6, #0
 800624e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006252:	4f30      	ldr	r7, [pc, #192]	@ (8006314 <_strtod_l+0xae4>)
 8006254:	e7b3      	b.n	80061be <_strtod_l+0x98e>
 8006256:	2600      	movs	r6, #0
 8006258:	4f2f      	ldr	r7, [pc, #188]	@ (8006318 <_strtod_l+0xae8>)
 800625a:	e7ac      	b.n	80061b6 <_strtod_l+0x986>
 800625c:	4630      	mov	r0, r6
 800625e:	4639      	mov	r1, r7
 8006260:	4b2d      	ldr	r3, [pc, #180]	@ (8006318 <_strtod_l+0xae8>)
 8006262:	2200      	movs	r2, #0
 8006264:	f7fa f938 	bl	80004d8 <__aeabi_dmul>
 8006268:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800626a:	4606      	mov	r6, r0
 800626c:	460f      	mov	r7, r1
 800626e:	2b00      	cmp	r3, #0
 8006270:	d0a1      	beq.n	80061b6 <_strtod_l+0x986>
 8006272:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006276:	e7a2      	b.n	80061be <_strtod_l+0x98e>
 8006278:	2200      	movs	r2, #0
 800627a:	4b26      	ldr	r3, [pc, #152]	@ (8006314 <_strtod_l+0xae4>)
 800627c:	4616      	mov	r6, r2
 800627e:	461f      	mov	r7, r3
 8006280:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006284:	e79b      	b.n	80061be <_strtod_l+0x98e>
 8006286:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800628a:	9b08      	ldr	r3, [sp, #32]
 800628c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1c1      	bne.n	8006218 <_strtod_l+0x9e8>
 8006294:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006298:	0d1b      	lsrs	r3, r3, #20
 800629a:	051b      	lsls	r3, r3, #20
 800629c:	429d      	cmp	r5, r3
 800629e:	d1bb      	bne.n	8006218 <_strtod_l+0x9e8>
 80062a0:	4630      	mov	r0, r6
 80062a2:	4639      	mov	r1, r7
 80062a4:	f7fa fee4 	bl	8001070 <__aeabi_d2lz>
 80062a8:	f7fa f8e8 	bl	800047c <__aeabi_l2d>
 80062ac:	4602      	mov	r2, r0
 80062ae:	460b      	mov	r3, r1
 80062b0:	4630      	mov	r0, r6
 80062b2:	4639      	mov	r1, r7
 80062b4:	f7f9 ff58 	bl	8000168 <__aeabi_dsub>
 80062b8:	460b      	mov	r3, r1
 80062ba:	4602      	mov	r2, r0
 80062bc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80062c0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80062c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80062c6:	ea46 060a 	orr.w	r6, r6, sl
 80062ca:	431e      	orrs	r6, r3
 80062cc:	d069      	beq.n	80063a2 <_strtod_l+0xb72>
 80062ce:	a30a      	add	r3, pc, #40	@ (adr r3, 80062f8 <_strtod_l+0xac8>)
 80062d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d4:	f7fa fb72 	bl	80009bc <__aeabi_dcmplt>
 80062d8:	2800      	cmp	r0, #0
 80062da:	f47f accf 	bne.w	8005c7c <_strtod_l+0x44c>
 80062de:	a308      	add	r3, pc, #32	@ (adr r3, 8006300 <_strtod_l+0xad0>)
 80062e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062e8:	f7fa fb86 	bl	80009f8 <__aeabi_dcmpgt>
 80062ec:	2800      	cmp	r0, #0
 80062ee:	d093      	beq.n	8006218 <_strtod_l+0x9e8>
 80062f0:	e4c4      	b.n	8005c7c <_strtod_l+0x44c>
 80062f2:	bf00      	nop
 80062f4:	f3af 8000 	nop.w
 80062f8:	94a03595 	.word	0x94a03595
 80062fc:	3fdfffff 	.word	0x3fdfffff
 8006300:	35afe535 	.word	0x35afe535
 8006304:	3fe00000 	.word	0x3fe00000
 8006308:	000fffff 	.word	0x000fffff
 800630c:	7ff00000 	.word	0x7ff00000
 8006310:	7fefffff 	.word	0x7fefffff
 8006314:	3ff00000 	.word	0x3ff00000
 8006318:	3fe00000 	.word	0x3fe00000
 800631c:	7fe00000 	.word	0x7fe00000
 8006320:	7c9fffff 	.word	0x7c9fffff
 8006324:	bff00000 	.word	0xbff00000
 8006328:	9b08      	ldr	r3, [sp, #32]
 800632a:	b323      	cbz	r3, 8006376 <_strtod_l+0xb46>
 800632c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006330:	d821      	bhi.n	8006376 <_strtod_l+0xb46>
 8006332:	a327      	add	r3, pc, #156	@ (adr r3, 80063d0 <_strtod_l+0xba0>)
 8006334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006338:	4630      	mov	r0, r6
 800633a:	4639      	mov	r1, r7
 800633c:	f7fa fb48 	bl	80009d0 <__aeabi_dcmple>
 8006340:	b1a0      	cbz	r0, 800636c <_strtod_l+0xb3c>
 8006342:	4639      	mov	r1, r7
 8006344:	4630      	mov	r0, r6
 8006346:	f7fa fb9f 	bl	8000a88 <__aeabi_d2uiz>
 800634a:	2801      	cmp	r0, #1
 800634c:	bf38      	it	cc
 800634e:	2001      	movcc	r0, #1
 8006350:	f7fa f848 	bl	80003e4 <__aeabi_ui2d>
 8006354:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006356:	4606      	mov	r6, r0
 8006358:	460f      	mov	r7, r1
 800635a:	b9fb      	cbnz	r3, 800639c <_strtod_l+0xb6c>
 800635c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006360:	9014      	str	r0, [sp, #80]	@ 0x50
 8006362:	9315      	str	r3, [sp, #84]	@ 0x54
 8006364:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006368:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800636c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800636e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006372:	1b5b      	subs	r3, r3, r5
 8006374:	9311      	str	r3, [sp, #68]	@ 0x44
 8006376:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800637a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800637e:	f002 fe35 	bl	8008fec <__ulp>
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	4650      	mov	r0, sl
 8006388:	4659      	mov	r1, fp
 800638a:	f7fa f8a5 	bl	80004d8 <__aeabi_dmul>
 800638e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006392:	f7f9 feeb 	bl	800016c <__adddf3>
 8006396:	4682      	mov	sl, r0
 8006398:	468b      	mov	fp, r1
 800639a:	e776      	b.n	800628a <_strtod_l+0xa5a>
 800639c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80063a0:	e7e0      	b.n	8006364 <_strtod_l+0xb34>
 80063a2:	a30d      	add	r3, pc, #52	@ (adr r3, 80063d8 <_strtod_l+0xba8>)
 80063a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a8:	f7fa fb08 	bl	80009bc <__aeabi_dcmplt>
 80063ac:	e79e      	b.n	80062ec <_strtod_l+0xabc>
 80063ae:	2300      	movs	r3, #0
 80063b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80063b4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80063b6:	6013      	str	r3, [r2, #0]
 80063b8:	f7ff ba77 	b.w	80058aa <_strtod_l+0x7a>
 80063bc:	2a65      	cmp	r2, #101	@ 0x65
 80063be:	f43f ab6e 	beq.w	8005a9e <_strtod_l+0x26e>
 80063c2:	2a45      	cmp	r2, #69	@ 0x45
 80063c4:	f43f ab6b 	beq.w	8005a9e <_strtod_l+0x26e>
 80063c8:	2301      	movs	r3, #1
 80063ca:	f7ff bba6 	b.w	8005b1a <_strtod_l+0x2ea>
 80063ce:	bf00      	nop
 80063d0:	ffc00000 	.word	0xffc00000
 80063d4:	41dfffff 	.word	0x41dfffff
 80063d8:	94a03595 	.word	0x94a03595
 80063dc:	3fcfffff 	.word	0x3fcfffff

080063e0 <_strtod_r>:
 80063e0:	4b01      	ldr	r3, [pc, #4]	@ (80063e8 <_strtod_r+0x8>)
 80063e2:	f7ff ba25 	b.w	8005830 <_strtod_l>
 80063e6:	bf00      	nop
 80063e8:	20000020 	.word	0x20000020

080063ec <_strtol_l.constprop.0>:
 80063ec:	2b24      	cmp	r3, #36	@ 0x24
 80063ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063f2:	4686      	mov	lr, r0
 80063f4:	4690      	mov	r8, r2
 80063f6:	d801      	bhi.n	80063fc <_strtol_l.constprop.0+0x10>
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d106      	bne.n	800640a <_strtol_l.constprop.0+0x1e>
 80063fc:	f000 f906 	bl	800660c <__errno>
 8006400:	2316      	movs	r3, #22
 8006402:	6003      	str	r3, [r0, #0]
 8006404:	2000      	movs	r0, #0
 8006406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800640a:	460d      	mov	r5, r1
 800640c:	4833      	ldr	r0, [pc, #204]	@ (80064dc <_strtol_l.constprop.0+0xf0>)
 800640e:	462a      	mov	r2, r5
 8006410:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006414:	5d06      	ldrb	r6, [r0, r4]
 8006416:	f016 0608 	ands.w	r6, r6, #8
 800641a:	d1f8      	bne.n	800640e <_strtol_l.constprop.0+0x22>
 800641c:	2c2d      	cmp	r4, #45	@ 0x2d
 800641e:	d12d      	bne.n	800647c <_strtol_l.constprop.0+0x90>
 8006420:	2601      	movs	r6, #1
 8006422:	782c      	ldrb	r4, [r5, #0]
 8006424:	1c95      	adds	r5, r2, #2
 8006426:	f033 0210 	bics.w	r2, r3, #16
 800642a:	d109      	bne.n	8006440 <_strtol_l.constprop.0+0x54>
 800642c:	2c30      	cmp	r4, #48	@ 0x30
 800642e:	d12a      	bne.n	8006486 <_strtol_l.constprop.0+0x9a>
 8006430:	782a      	ldrb	r2, [r5, #0]
 8006432:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006436:	2a58      	cmp	r2, #88	@ 0x58
 8006438:	d125      	bne.n	8006486 <_strtol_l.constprop.0+0x9a>
 800643a:	2310      	movs	r3, #16
 800643c:	786c      	ldrb	r4, [r5, #1]
 800643e:	3502      	adds	r5, #2
 8006440:	2200      	movs	r2, #0
 8006442:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006446:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800644a:	fbbc f9f3 	udiv	r9, ip, r3
 800644e:	4610      	mov	r0, r2
 8006450:	fb03 ca19 	mls	sl, r3, r9, ip
 8006454:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006458:	2f09      	cmp	r7, #9
 800645a:	d81b      	bhi.n	8006494 <_strtol_l.constprop.0+0xa8>
 800645c:	463c      	mov	r4, r7
 800645e:	42a3      	cmp	r3, r4
 8006460:	dd27      	ble.n	80064b2 <_strtol_l.constprop.0+0xc6>
 8006462:	1c57      	adds	r7, r2, #1
 8006464:	d007      	beq.n	8006476 <_strtol_l.constprop.0+0x8a>
 8006466:	4581      	cmp	r9, r0
 8006468:	d320      	bcc.n	80064ac <_strtol_l.constprop.0+0xc0>
 800646a:	d101      	bne.n	8006470 <_strtol_l.constprop.0+0x84>
 800646c:	45a2      	cmp	sl, r4
 800646e:	db1d      	blt.n	80064ac <_strtol_l.constprop.0+0xc0>
 8006470:	2201      	movs	r2, #1
 8006472:	fb00 4003 	mla	r0, r0, r3, r4
 8006476:	f815 4b01 	ldrb.w	r4, [r5], #1
 800647a:	e7eb      	b.n	8006454 <_strtol_l.constprop.0+0x68>
 800647c:	2c2b      	cmp	r4, #43	@ 0x2b
 800647e:	bf04      	itt	eq
 8006480:	782c      	ldrbeq	r4, [r5, #0]
 8006482:	1c95      	addeq	r5, r2, #2
 8006484:	e7cf      	b.n	8006426 <_strtol_l.constprop.0+0x3a>
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1da      	bne.n	8006440 <_strtol_l.constprop.0+0x54>
 800648a:	2c30      	cmp	r4, #48	@ 0x30
 800648c:	bf0c      	ite	eq
 800648e:	2308      	moveq	r3, #8
 8006490:	230a      	movne	r3, #10
 8006492:	e7d5      	b.n	8006440 <_strtol_l.constprop.0+0x54>
 8006494:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006498:	2f19      	cmp	r7, #25
 800649a:	d801      	bhi.n	80064a0 <_strtol_l.constprop.0+0xb4>
 800649c:	3c37      	subs	r4, #55	@ 0x37
 800649e:	e7de      	b.n	800645e <_strtol_l.constprop.0+0x72>
 80064a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80064a4:	2f19      	cmp	r7, #25
 80064a6:	d804      	bhi.n	80064b2 <_strtol_l.constprop.0+0xc6>
 80064a8:	3c57      	subs	r4, #87	@ 0x57
 80064aa:	e7d8      	b.n	800645e <_strtol_l.constprop.0+0x72>
 80064ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80064b0:	e7e1      	b.n	8006476 <_strtol_l.constprop.0+0x8a>
 80064b2:	1c53      	adds	r3, r2, #1
 80064b4:	d108      	bne.n	80064c8 <_strtol_l.constprop.0+0xdc>
 80064b6:	2322      	movs	r3, #34	@ 0x22
 80064b8:	4660      	mov	r0, ip
 80064ba:	f8ce 3000 	str.w	r3, [lr]
 80064be:	f1b8 0f00 	cmp.w	r8, #0
 80064c2:	d0a0      	beq.n	8006406 <_strtol_l.constprop.0+0x1a>
 80064c4:	1e69      	subs	r1, r5, #1
 80064c6:	e006      	b.n	80064d6 <_strtol_l.constprop.0+0xea>
 80064c8:	b106      	cbz	r6, 80064cc <_strtol_l.constprop.0+0xe0>
 80064ca:	4240      	negs	r0, r0
 80064cc:	f1b8 0f00 	cmp.w	r8, #0
 80064d0:	d099      	beq.n	8006406 <_strtol_l.constprop.0+0x1a>
 80064d2:	2a00      	cmp	r2, #0
 80064d4:	d1f6      	bne.n	80064c4 <_strtol_l.constprop.0+0xd8>
 80064d6:	f8c8 1000 	str.w	r1, [r8]
 80064da:	e794      	b.n	8006406 <_strtol_l.constprop.0+0x1a>
 80064dc:	08009901 	.word	0x08009901

080064e0 <_strtol_r>:
 80064e0:	f7ff bf84 	b.w	80063ec <_strtol_l.constprop.0>

080064e4 <_fwalk_sglue>:
 80064e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064e8:	4607      	mov	r7, r0
 80064ea:	4688      	mov	r8, r1
 80064ec:	4614      	mov	r4, r2
 80064ee:	2600      	movs	r6, #0
 80064f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064f4:	f1b9 0901 	subs.w	r9, r9, #1
 80064f8:	d505      	bpl.n	8006506 <_fwalk_sglue+0x22>
 80064fa:	6824      	ldr	r4, [r4, #0]
 80064fc:	2c00      	cmp	r4, #0
 80064fe:	d1f7      	bne.n	80064f0 <_fwalk_sglue+0xc>
 8006500:	4630      	mov	r0, r6
 8006502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006506:	89ab      	ldrh	r3, [r5, #12]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d907      	bls.n	800651c <_fwalk_sglue+0x38>
 800650c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006510:	3301      	adds	r3, #1
 8006512:	d003      	beq.n	800651c <_fwalk_sglue+0x38>
 8006514:	4629      	mov	r1, r5
 8006516:	4638      	mov	r0, r7
 8006518:	47c0      	blx	r8
 800651a:	4306      	orrs	r6, r0
 800651c:	3568      	adds	r5, #104	@ 0x68
 800651e:	e7e9      	b.n	80064f4 <_fwalk_sglue+0x10>

08006520 <iprintf>:
 8006520:	b40f      	push	{r0, r1, r2, r3}
 8006522:	b507      	push	{r0, r1, r2, lr}
 8006524:	4906      	ldr	r1, [pc, #24]	@ (8006540 <iprintf+0x20>)
 8006526:	ab04      	add	r3, sp, #16
 8006528:	6808      	ldr	r0, [r1, #0]
 800652a:	f853 2b04 	ldr.w	r2, [r3], #4
 800652e:	6881      	ldr	r1, [r0, #8]
 8006530:	9301      	str	r3, [sp, #4]
 8006532:	f001 fddb 	bl	80080ec <_vfiprintf_r>
 8006536:	b003      	add	sp, #12
 8006538:	f85d eb04 	ldr.w	lr, [sp], #4
 800653c:	b004      	add	sp, #16
 800653e:	4770      	bx	lr
 8006540:	2000018c 	.word	0x2000018c

08006544 <strncmp>:
 8006544:	b510      	push	{r4, lr}
 8006546:	b16a      	cbz	r2, 8006564 <strncmp+0x20>
 8006548:	3901      	subs	r1, #1
 800654a:	1884      	adds	r4, r0, r2
 800654c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006550:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006554:	429a      	cmp	r2, r3
 8006556:	d103      	bne.n	8006560 <strncmp+0x1c>
 8006558:	42a0      	cmp	r0, r4
 800655a:	d001      	beq.n	8006560 <strncmp+0x1c>
 800655c:	2a00      	cmp	r2, #0
 800655e:	d1f5      	bne.n	800654c <strncmp+0x8>
 8006560:	1ad0      	subs	r0, r2, r3
 8006562:	bd10      	pop	{r4, pc}
 8006564:	4610      	mov	r0, r2
 8006566:	e7fc      	b.n	8006562 <strncmp+0x1e>

08006568 <memset>:
 8006568:	4603      	mov	r3, r0
 800656a:	4402      	add	r2, r0
 800656c:	4293      	cmp	r3, r2
 800656e:	d100      	bne.n	8006572 <memset+0xa>
 8006570:	4770      	bx	lr
 8006572:	f803 1b01 	strb.w	r1, [r3], #1
 8006576:	e7f9      	b.n	800656c <memset+0x4>

08006578 <_localeconv_r>:
 8006578:	4800      	ldr	r0, [pc, #0]	@ (800657c <_localeconv_r+0x4>)
 800657a:	4770      	bx	lr
 800657c:	20000110 	.word	0x20000110

08006580 <_close_r>:
 8006580:	b538      	push	{r3, r4, r5, lr}
 8006582:	2300      	movs	r3, #0
 8006584:	4d05      	ldr	r5, [pc, #20]	@ (800659c <_close_r+0x1c>)
 8006586:	4604      	mov	r4, r0
 8006588:	4608      	mov	r0, r1
 800658a:	602b      	str	r3, [r5, #0]
 800658c:	f7fb fdb9 	bl	8002102 <_close>
 8006590:	1c43      	adds	r3, r0, #1
 8006592:	d102      	bne.n	800659a <_close_r+0x1a>
 8006594:	682b      	ldr	r3, [r5, #0]
 8006596:	b103      	cbz	r3, 800659a <_close_r+0x1a>
 8006598:	6023      	str	r3, [r4, #0]
 800659a:	bd38      	pop	{r3, r4, r5, pc}
 800659c:	200004b0 	.word	0x200004b0

080065a0 <_lseek_r>:
 80065a0:	b538      	push	{r3, r4, r5, lr}
 80065a2:	4604      	mov	r4, r0
 80065a4:	4608      	mov	r0, r1
 80065a6:	4611      	mov	r1, r2
 80065a8:	2200      	movs	r2, #0
 80065aa:	4d05      	ldr	r5, [pc, #20]	@ (80065c0 <_lseek_r+0x20>)
 80065ac:	602a      	str	r2, [r5, #0]
 80065ae:	461a      	mov	r2, r3
 80065b0:	f7fb fdcb 	bl	800214a <_lseek>
 80065b4:	1c43      	adds	r3, r0, #1
 80065b6:	d102      	bne.n	80065be <_lseek_r+0x1e>
 80065b8:	682b      	ldr	r3, [r5, #0]
 80065ba:	b103      	cbz	r3, 80065be <_lseek_r+0x1e>
 80065bc:	6023      	str	r3, [r4, #0]
 80065be:	bd38      	pop	{r3, r4, r5, pc}
 80065c0:	200004b0 	.word	0x200004b0

080065c4 <_read_r>:
 80065c4:	b538      	push	{r3, r4, r5, lr}
 80065c6:	4604      	mov	r4, r0
 80065c8:	4608      	mov	r0, r1
 80065ca:	4611      	mov	r1, r2
 80065cc:	2200      	movs	r2, #0
 80065ce:	4d05      	ldr	r5, [pc, #20]	@ (80065e4 <_read_r+0x20>)
 80065d0:	602a      	str	r2, [r5, #0]
 80065d2:	461a      	mov	r2, r3
 80065d4:	f7fb fd78 	bl	80020c8 <_read>
 80065d8:	1c43      	adds	r3, r0, #1
 80065da:	d102      	bne.n	80065e2 <_read_r+0x1e>
 80065dc:	682b      	ldr	r3, [r5, #0]
 80065de:	b103      	cbz	r3, 80065e2 <_read_r+0x1e>
 80065e0:	6023      	str	r3, [r4, #0]
 80065e2:	bd38      	pop	{r3, r4, r5, pc}
 80065e4:	200004b0 	.word	0x200004b0

080065e8 <_write_r>:
 80065e8:	b538      	push	{r3, r4, r5, lr}
 80065ea:	4604      	mov	r4, r0
 80065ec:	4608      	mov	r0, r1
 80065ee:	4611      	mov	r1, r2
 80065f0:	2200      	movs	r2, #0
 80065f2:	4d05      	ldr	r5, [pc, #20]	@ (8006608 <_write_r+0x20>)
 80065f4:	602a      	str	r2, [r5, #0]
 80065f6:	461a      	mov	r2, r3
 80065f8:	f7fb f818 	bl	800162c <_write>
 80065fc:	1c43      	adds	r3, r0, #1
 80065fe:	d102      	bne.n	8006606 <_write_r+0x1e>
 8006600:	682b      	ldr	r3, [r5, #0]
 8006602:	b103      	cbz	r3, 8006606 <_write_r+0x1e>
 8006604:	6023      	str	r3, [r4, #0]
 8006606:	bd38      	pop	{r3, r4, r5, pc}
 8006608:	200004b0 	.word	0x200004b0

0800660c <__errno>:
 800660c:	4b01      	ldr	r3, [pc, #4]	@ (8006614 <__errno+0x8>)
 800660e:	6818      	ldr	r0, [r3, #0]
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	2000018c 	.word	0x2000018c

08006618 <__libc_init_array>:
 8006618:	b570      	push	{r4, r5, r6, lr}
 800661a:	2600      	movs	r6, #0
 800661c:	4d0c      	ldr	r5, [pc, #48]	@ (8006650 <__libc_init_array+0x38>)
 800661e:	4c0d      	ldr	r4, [pc, #52]	@ (8006654 <__libc_init_array+0x3c>)
 8006620:	1b64      	subs	r4, r4, r5
 8006622:	10a4      	asrs	r4, r4, #2
 8006624:	42a6      	cmp	r6, r4
 8006626:	d109      	bne.n	800663c <__libc_init_array+0x24>
 8006628:	f003 f8d0 	bl	80097cc <_init>
 800662c:	2600      	movs	r6, #0
 800662e:	4d0a      	ldr	r5, [pc, #40]	@ (8006658 <__libc_init_array+0x40>)
 8006630:	4c0a      	ldr	r4, [pc, #40]	@ (800665c <__libc_init_array+0x44>)
 8006632:	1b64      	subs	r4, r4, r5
 8006634:	10a4      	asrs	r4, r4, #2
 8006636:	42a6      	cmp	r6, r4
 8006638:	d105      	bne.n	8006646 <__libc_init_array+0x2e>
 800663a:	bd70      	pop	{r4, r5, r6, pc}
 800663c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006640:	4798      	blx	r3
 8006642:	3601      	adds	r6, #1
 8006644:	e7ee      	b.n	8006624 <__libc_init_array+0xc>
 8006646:	f855 3b04 	ldr.w	r3, [r5], #4
 800664a:	4798      	blx	r3
 800664c:	3601      	adds	r6, #1
 800664e:	e7f2      	b.n	8006636 <__libc_init_array+0x1e>
 8006650:	08009cb4 	.word	0x08009cb4
 8006654:	08009cb4 	.word	0x08009cb4
 8006658:	08009cb4 	.word	0x08009cb4
 800665c:	08009cb8 	.word	0x08009cb8

08006660 <__retarget_lock_init_recursive>:
 8006660:	4770      	bx	lr

08006662 <__retarget_lock_acquire_recursive>:
 8006662:	4770      	bx	lr

08006664 <__retarget_lock_release_recursive>:
 8006664:	4770      	bx	lr

08006666 <memchr>:
 8006666:	4603      	mov	r3, r0
 8006668:	b510      	push	{r4, lr}
 800666a:	b2c9      	uxtb	r1, r1
 800666c:	4402      	add	r2, r0
 800666e:	4293      	cmp	r3, r2
 8006670:	4618      	mov	r0, r3
 8006672:	d101      	bne.n	8006678 <memchr+0x12>
 8006674:	2000      	movs	r0, #0
 8006676:	e003      	b.n	8006680 <memchr+0x1a>
 8006678:	7804      	ldrb	r4, [r0, #0]
 800667a:	3301      	adds	r3, #1
 800667c:	428c      	cmp	r4, r1
 800667e:	d1f6      	bne.n	800666e <memchr+0x8>
 8006680:	bd10      	pop	{r4, pc}

08006682 <memcpy>:
 8006682:	440a      	add	r2, r1
 8006684:	4291      	cmp	r1, r2
 8006686:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800668a:	d100      	bne.n	800668e <memcpy+0xc>
 800668c:	4770      	bx	lr
 800668e:	b510      	push	{r4, lr}
 8006690:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006694:	4291      	cmp	r1, r2
 8006696:	f803 4f01 	strb.w	r4, [r3, #1]!
 800669a:	d1f9      	bne.n	8006690 <memcpy+0xe>
 800669c:	bd10      	pop	{r4, pc}
	...

080066a0 <nan>:
 80066a0:	2000      	movs	r0, #0
 80066a2:	4901      	ldr	r1, [pc, #4]	@ (80066a8 <nan+0x8>)
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	7ff80000 	.word	0x7ff80000

080066ac <nanf>:
 80066ac:	4800      	ldr	r0, [pc, #0]	@ (80066b0 <nanf+0x4>)
 80066ae:	4770      	bx	lr
 80066b0:	7fc00000 	.word	0x7fc00000

080066b4 <quorem>:
 80066b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b8:	6903      	ldr	r3, [r0, #16]
 80066ba:	690c      	ldr	r4, [r1, #16]
 80066bc:	4607      	mov	r7, r0
 80066be:	42a3      	cmp	r3, r4
 80066c0:	db7e      	blt.n	80067c0 <quorem+0x10c>
 80066c2:	3c01      	subs	r4, #1
 80066c4:	00a3      	lsls	r3, r4, #2
 80066c6:	f100 0514 	add.w	r5, r0, #20
 80066ca:	f101 0814 	add.w	r8, r1, #20
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066d4:	9301      	str	r3, [sp, #4]
 80066d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80066da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066de:	3301      	adds	r3, #1
 80066e0:	429a      	cmp	r2, r3
 80066e2:	fbb2 f6f3 	udiv	r6, r2, r3
 80066e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80066ea:	d32e      	bcc.n	800674a <quorem+0x96>
 80066ec:	f04f 0a00 	mov.w	sl, #0
 80066f0:	46c4      	mov	ip, r8
 80066f2:	46ae      	mov	lr, r5
 80066f4:	46d3      	mov	fp, sl
 80066f6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80066fa:	b298      	uxth	r0, r3
 80066fc:	fb06 a000 	mla	r0, r6, r0, sl
 8006700:	0c1b      	lsrs	r3, r3, #16
 8006702:	0c02      	lsrs	r2, r0, #16
 8006704:	fb06 2303 	mla	r3, r6, r3, r2
 8006708:	f8de 2000 	ldr.w	r2, [lr]
 800670c:	b280      	uxth	r0, r0
 800670e:	b292      	uxth	r2, r2
 8006710:	1a12      	subs	r2, r2, r0
 8006712:	445a      	add	r2, fp
 8006714:	f8de 0000 	ldr.w	r0, [lr]
 8006718:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800671c:	b29b      	uxth	r3, r3
 800671e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006722:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006726:	b292      	uxth	r2, r2
 8006728:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800672c:	45e1      	cmp	r9, ip
 800672e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006732:	f84e 2b04 	str.w	r2, [lr], #4
 8006736:	d2de      	bcs.n	80066f6 <quorem+0x42>
 8006738:	9b00      	ldr	r3, [sp, #0]
 800673a:	58eb      	ldr	r3, [r5, r3]
 800673c:	b92b      	cbnz	r3, 800674a <quorem+0x96>
 800673e:	9b01      	ldr	r3, [sp, #4]
 8006740:	3b04      	subs	r3, #4
 8006742:	429d      	cmp	r5, r3
 8006744:	461a      	mov	r2, r3
 8006746:	d32f      	bcc.n	80067a8 <quorem+0xf4>
 8006748:	613c      	str	r4, [r7, #16]
 800674a:	4638      	mov	r0, r7
 800674c:	f002 fb9e 	bl	8008e8c <__mcmp>
 8006750:	2800      	cmp	r0, #0
 8006752:	db25      	blt.n	80067a0 <quorem+0xec>
 8006754:	4629      	mov	r1, r5
 8006756:	2000      	movs	r0, #0
 8006758:	f858 2b04 	ldr.w	r2, [r8], #4
 800675c:	f8d1 c000 	ldr.w	ip, [r1]
 8006760:	fa1f fe82 	uxth.w	lr, r2
 8006764:	fa1f f38c 	uxth.w	r3, ip
 8006768:	eba3 030e 	sub.w	r3, r3, lr
 800676c:	4403      	add	r3, r0
 800676e:	0c12      	lsrs	r2, r2, #16
 8006770:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006774:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006778:	b29b      	uxth	r3, r3
 800677a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800677e:	45c1      	cmp	r9, r8
 8006780:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006784:	f841 3b04 	str.w	r3, [r1], #4
 8006788:	d2e6      	bcs.n	8006758 <quorem+0xa4>
 800678a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800678e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006792:	b922      	cbnz	r2, 800679e <quorem+0xea>
 8006794:	3b04      	subs	r3, #4
 8006796:	429d      	cmp	r5, r3
 8006798:	461a      	mov	r2, r3
 800679a:	d30b      	bcc.n	80067b4 <quorem+0x100>
 800679c:	613c      	str	r4, [r7, #16]
 800679e:	3601      	adds	r6, #1
 80067a0:	4630      	mov	r0, r6
 80067a2:	b003      	add	sp, #12
 80067a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a8:	6812      	ldr	r2, [r2, #0]
 80067aa:	3b04      	subs	r3, #4
 80067ac:	2a00      	cmp	r2, #0
 80067ae:	d1cb      	bne.n	8006748 <quorem+0x94>
 80067b0:	3c01      	subs	r4, #1
 80067b2:	e7c6      	b.n	8006742 <quorem+0x8e>
 80067b4:	6812      	ldr	r2, [r2, #0]
 80067b6:	3b04      	subs	r3, #4
 80067b8:	2a00      	cmp	r2, #0
 80067ba:	d1ef      	bne.n	800679c <quorem+0xe8>
 80067bc:	3c01      	subs	r4, #1
 80067be:	e7ea      	b.n	8006796 <quorem+0xe2>
 80067c0:	2000      	movs	r0, #0
 80067c2:	e7ee      	b.n	80067a2 <quorem+0xee>
 80067c4:	0000      	movs	r0, r0
	...

080067c8 <_dtoa_r>:
 80067c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067cc:	4614      	mov	r4, r2
 80067ce:	461d      	mov	r5, r3
 80067d0:	69c7      	ldr	r7, [r0, #28]
 80067d2:	b097      	sub	sp, #92	@ 0x5c
 80067d4:	4683      	mov	fp, r0
 80067d6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80067da:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80067dc:	b97f      	cbnz	r7, 80067fe <_dtoa_r+0x36>
 80067de:	2010      	movs	r0, #16
 80067e0:	f001 fd9c 	bl	800831c <malloc>
 80067e4:	4602      	mov	r2, r0
 80067e6:	f8cb 001c 	str.w	r0, [fp, #28]
 80067ea:	b920      	cbnz	r0, 80067f6 <_dtoa_r+0x2e>
 80067ec:	21ef      	movs	r1, #239	@ 0xef
 80067ee:	4ba8      	ldr	r3, [pc, #672]	@ (8006a90 <_dtoa_r+0x2c8>)
 80067f0:	48a8      	ldr	r0, [pc, #672]	@ (8006a94 <_dtoa_r+0x2cc>)
 80067f2:	f002 ff53 	bl	800969c <__assert_func>
 80067f6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80067fa:	6007      	str	r7, [r0, #0]
 80067fc:	60c7      	str	r7, [r0, #12]
 80067fe:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006802:	6819      	ldr	r1, [r3, #0]
 8006804:	b159      	cbz	r1, 800681e <_dtoa_r+0x56>
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	2301      	movs	r3, #1
 800680a:	4093      	lsls	r3, r2
 800680c:	604a      	str	r2, [r1, #4]
 800680e:	608b      	str	r3, [r1, #8]
 8006810:	4658      	mov	r0, fp
 8006812:	f002 f8b9 	bl	8008988 <_Bfree>
 8006816:	2200      	movs	r2, #0
 8006818:	f8db 301c 	ldr.w	r3, [fp, #28]
 800681c:	601a      	str	r2, [r3, #0]
 800681e:	1e2b      	subs	r3, r5, #0
 8006820:	bfaf      	iteee	ge
 8006822:	2300      	movge	r3, #0
 8006824:	2201      	movlt	r2, #1
 8006826:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800682a:	9303      	strlt	r3, [sp, #12]
 800682c:	bfa8      	it	ge
 800682e:	6033      	strge	r3, [r6, #0]
 8006830:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006834:	4b98      	ldr	r3, [pc, #608]	@ (8006a98 <_dtoa_r+0x2d0>)
 8006836:	bfb8      	it	lt
 8006838:	6032      	strlt	r2, [r6, #0]
 800683a:	ea33 0308 	bics.w	r3, r3, r8
 800683e:	d112      	bne.n	8006866 <_dtoa_r+0x9e>
 8006840:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006844:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006846:	6013      	str	r3, [r2, #0]
 8006848:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800684c:	4323      	orrs	r3, r4
 800684e:	f000 8550 	beq.w	80072f2 <_dtoa_r+0xb2a>
 8006852:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006854:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006a9c <_dtoa_r+0x2d4>
 8006858:	2b00      	cmp	r3, #0
 800685a:	f000 8552 	beq.w	8007302 <_dtoa_r+0xb3a>
 800685e:	f10a 0303 	add.w	r3, sl, #3
 8006862:	f000 bd4c 	b.w	80072fe <_dtoa_r+0xb36>
 8006866:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800686a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800686e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006872:	2200      	movs	r2, #0
 8006874:	2300      	movs	r3, #0
 8006876:	f7fa f897 	bl	80009a8 <__aeabi_dcmpeq>
 800687a:	4607      	mov	r7, r0
 800687c:	b158      	cbz	r0, 8006896 <_dtoa_r+0xce>
 800687e:	2301      	movs	r3, #1
 8006880:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006886:	b113      	cbz	r3, 800688e <_dtoa_r+0xc6>
 8006888:	4b85      	ldr	r3, [pc, #532]	@ (8006aa0 <_dtoa_r+0x2d8>)
 800688a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800688c:	6013      	str	r3, [r2, #0]
 800688e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006aa4 <_dtoa_r+0x2dc>
 8006892:	f000 bd36 	b.w	8007302 <_dtoa_r+0xb3a>
 8006896:	ab14      	add	r3, sp, #80	@ 0x50
 8006898:	9301      	str	r3, [sp, #4]
 800689a:	ab15      	add	r3, sp, #84	@ 0x54
 800689c:	9300      	str	r3, [sp, #0]
 800689e:	4658      	mov	r0, fp
 80068a0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80068a4:	f002 fc0a 	bl	80090bc <__d2b>
 80068a8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80068ac:	4681      	mov	r9, r0
 80068ae:	2e00      	cmp	r6, #0
 80068b0:	d077      	beq.n	80069a2 <_dtoa_r+0x1da>
 80068b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80068b8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80068bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068c0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80068c4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80068c8:	9712      	str	r7, [sp, #72]	@ 0x48
 80068ca:	4619      	mov	r1, r3
 80068cc:	2200      	movs	r2, #0
 80068ce:	4b76      	ldr	r3, [pc, #472]	@ (8006aa8 <_dtoa_r+0x2e0>)
 80068d0:	f7f9 fc4a 	bl	8000168 <__aeabi_dsub>
 80068d4:	a368      	add	r3, pc, #416	@ (adr r3, 8006a78 <_dtoa_r+0x2b0>)
 80068d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068da:	f7f9 fdfd 	bl	80004d8 <__aeabi_dmul>
 80068de:	a368      	add	r3, pc, #416	@ (adr r3, 8006a80 <_dtoa_r+0x2b8>)
 80068e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e4:	f7f9 fc42 	bl	800016c <__adddf3>
 80068e8:	4604      	mov	r4, r0
 80068ea:	4630      	mov	r0, r6
 80068ec:	460d      	mov	r5, r1
 80068ee:	f7f9 fd89 	bl	8000404 <__aeabi_i2d>
 80068f2:	a365      	add	r3, pc, #404	@ (adr r3, 8006a88 <_dtoa_r+0x2c0>)
 80068f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f8:	f7f9 fdee 	bl	80004d8 <__aeabi_dmul>
 80068fc:	4602      	mov	r2, r0
 80068fe:	460b      	mov	r3, r1
 8006900:	4620      	mov	r0, r4
 8006902:	4629      	mov	r1, r5
 8006904:	f7f9 fc32 	bl	800016c <__adddf3>
 8006908:	4604      	mov	r4, r0
 800690a:	460d      	mov	r5, r1
 800690c:	f7fa f894 	bl	8000a38 <__aeabi_d2iz>
 8006910:	2200      	movs	r2, #0
 8006912:	4607      	mov	r7, r0
 8006914:	2300      	movs	r3, #0
 8006916:	4620      	mov	r0, r4
 8006918:	4629      	mov	r1, r5
 800691a:	f7fa f84f 	bl	80009bc <__aeabi_dcmplt>
 800691e:	b140      	cbz	r0, 8006932 <_dtoa_r+0x16a>
 8006920:	4638      	mov	r0, r7
 8006922:	f7f9 fd6f 	bl	8000404 <__aeabi_i2d>
 8006926:	4622      	mov	r2, r4
 8006928:	462b      	mov	r3, r5
 800692a:	f7fa f83d 	bl	80009a8 <__aeabi_dcmpeq>
 800692e:	b900      	cbnz	r0, 8006932 <_dtoa_r+0x16a>
 8006930:	3f01      	subs	r7, #1
 8006932:	2f16      	cmp	r7, #22
 8006934:	d853      	bhi.n	80069de <_dtoa_r+0x216>
 8006936:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800693a:	4b5c      	ldr	r3, [pc, #368]	@ (8006aac <_dtoa_r+0x2e4>)
 800693c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006944:	f7fa f83a 	bl	80009bc <__aeabi_dcmplt>
 8006948:	2800      	cmp	r0, #0
 800694a:	d04a      	beq.n	80069e2 <_dtoa_r+0x21a>
 800694c:	2300      	movs	r3, #0
 800694e:	3f01      	subs	r7, #1
 8006950:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006952:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006954:	1b9b      	subs	r3, r3, r6
 8006956:	1e5a      	subs	r2, r3, #1
 8006958:	bf46      	itte	mi
 800695a:	f1c3 0801 	rsbmi	r8, r3, #1
 800695e:	2300      	movmi	r3, #0
 8006960:	f04f 0800 	movpl.w	r8, #0
 8006964:	9209      	str	r2, [sp, #36]	@ 0x24
 8006966:	bf48      	it	mi
 8006968:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800696a:	2f00      	cmp	r7, #0
 800696c:	db3b      	blt.n	80069e6 <_dtoa_r+0x21e>
 800696e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006970:	970e      	str	r7, [sp, #56]	@ 0x38
 8006972:	443b      	add	r3, r7
 8006974:	9309      	str	r3, [sp, #36]	@ 0x24
 8006976:	2300      	movs	r3, #0
 8006978:	930a      	str	r3, [sp, #40]	@ 0x28
 800697a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800697c:	2b09      	cmp	r3, #9
 800697e:	d866      	bhi.n	8006a4e <_dtoa_r+0x286>
 8006980:	2b05      	cmp	r3, #5
 8006982:	bfc4      	itt	gt
 8006984:	3b04      	subgt	r3, #4
 8006986:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006988:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800698a:	bfc8      	it	gt
 800698c:	2400      	movgt	r4, #0
 800698e:	f1a3 0302 	sub.w	r3, r3, #2
 8006992:	bfd8      	it	le
 8006994:	2401      	movle	r4, #1
 8006996:	2b03      	cmp	r3, #3
 8006998:	d864      	bhi.n	8006a64 <_dtoa_r+0x29c>
 800699a:	e8df f003 	tbb	[pc, r3]
 800699e:	382b      	.short	0x382b
 80069a0:	5636      	.short	0x5636
 80069a2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80069a6:	441e      	add	r6, r3
 80069a8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80069ac:	2b20      	cmp	r3, #32
 80069ae:	bfc1      	itttt	gt
 80069b0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80069b4:	fa08 f803 	lslgt.w	r8, r8, r3
 80069b8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80069bc:	fa24 f303 	lsrgt.w	r3, r4, r3
 80069c0:	bfd6      	itet	le
 80069c2:	f1c3 0320 	rsble	r3, r3, #32
 80069c6:	ea48 0003 	orrgt.w	r0, r8, r3
 80069ca:	fa04 f003 	lslle.w	r0, r4, r3
 80069ce:	f7f9 fd09 	bl	80003e4 <__aeabi_ui2d>
 80069d2:	2201      	movs	r2, #1
 80069d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80069d8:	3e01      	subs	r6, #1
 80069da:	9212      	str	r2, [sp, #72]	@ 0x48
 80069dc:	e775      	b.n	80068ca <_dtoa_r+0x102>
 80069de:	2301      	movs	r3, #1
 80069e0:	e7b6      	b.n	8006950 <_dtoa_r+0x188>
 80069e2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80069e4:	e7b5      	b.n	8006952 <_dtoa_r+0x18a>
 80069e6:	427b      	negs	r3, r7
 80069e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80069ea:	2300      	movs	r3, #0
 80069ec:	eba8 0807 	sub.w	r8, r8, r7
 80069f0:	930e      	str	r3, [sp, #56]	@ 0x38
 80069f2:	e7c2      	b.n	800697a <_dtoa_r+0x1b2>
 80069f4:	2300      	movs	r3, #0
 80069f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	dc35      	bgt.n	8006a6a <_dtoa_r+0x2a2>
 80069fe:	2301      	movs	r3, #1
 8006a00:	461a      	mov	r2, r3
 8006a02:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006a06:	9221      	str	r2, [sp, #132]	@ 0x84
 8006a08:	e00b      	b.n	8006a22 <_dtoa_r+0x25a>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e7f3      	b.n	80069f6 <_dtoa_r+0x22e>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a12:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006a14:	18fb      	adds	r3, r7, r3
 8006a16:	9308      	str	r3, [sp, #32]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	9307      	str	r3, [sp, #28]
 8006a1e:	bfb8      	it	lt
 8006a20:	2301      	movlt	r3, #1
 8006a22:	2100      	movs	r1, #0
 8006a24:	2204      	movs	r2, #4
 8006a26:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006a2a:	f102 0514 	add.w	r5, r2, #20
 8006a2e:	429d      	cmp	r5, r3
 8006a30:	d91f      	bls.n	8006a72 <_dtoa_r+0x2aa>
 8006a32:	6041      	str	r1, [r0, #4]
 8006a34:	4658      	mov	r0, fp
 8006a36:	f001 ff67 	bl	8008908 <_Balloc>
 8006a3a:	4682      	mov	sl, r0
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	d139      	bne.n	8006ab4 <_dtoa_r+0x2ec>
 8006a40:	4602      	mov	r2, r0
 8006a42:	f240 11af 	movw	r1, #431	@ 0x1af
 8006a46:	4b1a      	ldr	r3, [pc, #104]	@ (8006ab0 <_dtoa_r+0x2e8>)
 8006a48:	e6d2      	b.n	80067f0 <_dtoa_r+0x28>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e7e0      	b.n	8006a10 <_dtoa_r+0x248>
 8006a4e:	2401      	movs	r4, #1
 8006a50:	2300      	movs	r3, #0
 8006a52:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006a54:	9320      	str	r3, [sp, #128]	@ 0x80
 8006a56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006a60:	2312      	movs	r3, #18
 8006a62:	e7d0      	b.n	8006a06 <_dtoa_r+0x23e>
 8006a64:	2301      	movs	r3, #1
 8006a66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a68:	e7f5      	b.n	8006a56 <_dtoa_r+0x28e>
 8006a6a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006a6c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006a70:	e7d7      	b.n	8006a22 <_dtoa_r+0x25a>
 8006a72:	3101      	adds	r1, #1
 8006a74:	0052      	lsls	r2, r2, #1
 8006a76:	e7d8      	b.n	8006a2a <_dtoa_r+0x262>
 8006a78:	636f4361 	.word	0x636f4361
 8006a7c:	3fd287a7 	.word	0x3fd287a7
 8006a80:	8b60c8b3 	.word	0x8b60c8b3
 8006a84:	3fc68a28 	.word	0x3fc68a28
 8006a88:	509f79fb 	.word	0x509f79fb
 8006a8c:	3fd34413 	.word	0x3fd34413
 8006a90:	08009a0e 	.word	0x08009a0e
 8006a94:	08009a25 	.word	0x08009a25
 8006a98:	7ff00000 	.word	0x7ff00000
 8006a9c:	08009a0a 	.word	0x08009a0a
 8006aa0:	08009b16 	.word	0x08009b16
 8006aa4:	08009b15 	.word	0x08009b15
 8006aa8:	3ff80000 	.word	0x3ff80000
 8006aac:	08009ba8 	.word	0x08009ba8
 8006ab0:	08009a7d 	.word	0x08009a7d
 8006ab4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ab8:	6018      	str	r0, [r3, #0]
 8006aba:	9b07      	ldr	r3, [sp, #28]
 8006abc:	2b0e      	cmp	r3, #14
 8006abe:	f200 80a4 	bhi.w	8006c0a <_dtoa_r+0x442>
 8006ac2:	2c00      	cmp	r4, #0
 8006ac4:	f000 80a1 	beq.w	8006c0a <_dtoa_r+0x442>
 8006ac8:	2f00      	cmp	r7, #0
 8006aca:	dd33      	ble.n	8006b34 <_dtoa_r+0x36c>
 8006acc:	4b86      	ldr	r3, [pc, #536]	@ (8006ce8 <_dtoa_r+0x520>)
 8006ace:	f007 020f 	and.w	r2, r7, #15
 8006ad2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ad6:	05f8      	lsls	r0, r7, #23
 8006ad8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006adc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006ae0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006ae4:	d516      	bpl.n	8006b14 <_dtoa_r+0x34c>
 8006ae6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006aea:	4b80      	ldr	r3, [pc, #512]	@ (8006cec <_dtoa_r+0x524>)
 8006aec:	2603      	movs	r6, #3
 8006aee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006af2:	f7f9 fe1b 	bl	800072c <__aeabi_ddiv>
 8006af6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006afa:	f004 040f 	and.w	r4, r4, #15
 8006afe:	4d7b      	ldr	r5, [pc, #492]	@ (8006cec <_dtoa_r+0x524>)
 8006b00:	b954      	cbnz	r4, 8006b18 <_dtoa_r+0x350>
 8006b02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b0a:	f7f9 fe0f 	bl	800072c <__aeabi_ddiv>
 8006b0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b12:	e028      	b.n	8006b66 <_dtoa_r+0x39e>
 8006b14:	2602      	movs	r6, #2
 8006b16:	e7f2      	b.n	8006afe <_dtoa_r+0x336>
 8006b18:	07e1      	lsls	r1, r4, #31
 8006b1a:	d508      	bpl.n	8006b2e <_dtoa_r+0x366>
 8006b1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b20:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b24:	f7f9 fcd8 	bl	80004d8 <__aeabi_dmul>
 8006b28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b2c:	3601      	adds	r6, #1
 8006b2e:	1064      	asrs	r4, r4, #1
 8006b30:	3508      	adds	r5, #8
 8006b32:	e7e5      	b.n	8006b00 <_dtoa_r+0x338>
 8006b34:	f000 80d2 	beq.w	8006cdc <_dtoa_r+0x514>
 8006b38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b3c:	427c      	negs	r4, r7
 8006b3e:	4b6a      	ldr	r3, [pc, #424]	@ (8006ce8 <_dtoa_r+0x520>)
 8006b40:	f004 020f 	and.w	r2, r4, #15
 8006b44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4c:	f7f9 fcc4 	bl	80004d8 <__aeabi_dmul>
 8006b50:	2602      	movs	r6, #2
 8006b52:	2300      	movs	r3, #0
 8006b54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b58:	4d64      	ldr	r5, [pc, #400]	@ (8006cec <_dtoa_r+0x524>)
 8006b5a:	1124      	asrs	r4, r4, #4
 8006b5c:	2c00      	cmp	r4, #0
 8006b5e:	f040 80b2 	bne.w	8006cc6 <_dtoa_r+0x4fe>
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1d3      	bne.n	8006b0e <_dtoa_r+0x346>
 8006b66:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006b6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 80b7 	beq.w	8006ce0 <_dtoa_r+0x518>
 8006b72:	2200      	movs	r2, #0
 8006b74:	4620      	mov	r0, r4
 8006b76:	4629      	mov	r1, r5
 8006b78:	4b5d      	ldr	r3, [pc, #372]	@ (8006cf0 <_dtoa_r+0x528>)
 8006b7a:	f7f9 ff1f 	bl	80009bc <__aeabi_dcmplt>
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	f000 80ae 	beq.w	8006ce0 <_dtoa_r+0x518>
 8006b84:	9b07      	ldr	r3, [sp, #28]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f000 80aa 	beq.w	8006ce0 <_dtoa_r+0x518>
 8006b8c:	9b08      	ldr	r3, [sp, #32]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	dd37      	ble.n	8006c02 <_dtoa_r+0x43a>
 8006b92:	1e7b      	subs	r3, r7, #1
 8006b94:	4620      	mov	r0, r4
 8006b96:	9304      	str	r3, [sp, #16]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	4629      	mov	r1, r5
 8006b9c:	4b55      	ldr	r3, [pc, #340]	@ (8006cf4 <_dtoa_r+0x52c>)
 8006b9e:	f7f9 fc9b 	bl	80004d8 <__aeabi_dmul>
 8006ba2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ba6:	9c08      	ldr	r4, [sp, #32]
 8006ba8:	3601      	adds	r6, #1
 8006baa:	4630      	mov	r0, r6
 8006bac:	f7f9 fc2a 	bl	8000404 <__aeabi_i2d>
 8006bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bb4:	f7f9 fc90 	bl	80004d8 <__aeabi_dmul>
 8006bb8:	2200      	movs	r2, #0
 8006bba:	4b4f      	ldr	r3, [pc, #316]	@ (8006cf8 <_dtoa_r+0x530>)
 8006bbc:	f7f9 fad6 	bl	800016c <__adddf3>
 8006bc0:	4605      	mov	r5, r0
 8006bc2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006bc6:	2c00      	cmp	r4, #0
 8006bc8:	f040 809a 	bne.w	8006d00 <_dtoa_r+0x538>
 8006bcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	4b4a      	ldr	r3, [pc, #296]	@ (8006cfc <_dtoa_r+0x534>)
 8006bd4:	f7f9 fac8 	bl	8000168 <__aeabi_dsub>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	460b      	mov	r3, r1
 8006bdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006be0:	462a      	mov	r2, r5
 8006be2:	4633      	mov	r3, r6
 8006be4:	f7f9 ff08 	bl	80009f8 <__aeabi_dcmpgt>
 8006be8:	2800      	cmp	r0, #0
 8006bea:	f040 828e 	bne.w	800710a <_dtoa_r+0x942>
 8006bee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bf2:	462a      	mov	r2, r5
 8006bf4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006bf8:	f7f9 fee0 	bl	80009bc <__aeabi_dcmplt>
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	f040 8127 	bne.w	8006e50 <_dtoa_r+0x688>
 8006c02:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006c06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006c0a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f2c0 8163 	blt.w	8006ed8 <_dtoa_r+0x710>
 8006c12:	2f0e      	cmp	r7, #14
 8006c14:	f300 8160 	bgt.w	8006ed8 <_dtoa_r+0x710>
 8006c18:	4b33      	ldr	r3, [pc, #204]	@ (8006ce8 <_dtoa_r+0x520>)
 8006c1a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c1e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c22:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006c26:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	da03      	bge.n	8006c34 <_dtoa_r+0x46c>
 8006c2c:	9b07      	ldr	r3, [sp, #28]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f340 8100 	ble.w	8006e34 <_dtoa_r+0x66c>
 8006c34:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006c38:	4656      	mov	r6, sl
 8006c3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c3e:	4620      	mov	r0, r4
 8006c40:	4629      	mov	r1, r5
 8006c42:	f7f9 fd73 	bl	800072c <__aeabi_ddiv>
 8006c46:	f7f9 fef7 	bl	8000a38 <__aeabi_d2iz>
 8006c4a:	4680      	mov	r8, r0
 8006c4c:	f7f9 fbda 	bl	8000404 <__aeabi_i2d>
 8006c50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c54:	f7f9 fc40 	bl	80004d8 <__aeabi_dmul>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	4629      	mov	r1, r5
 8006c60:	f7f9 fa82 	bl	8000168 <__aeabi_dsub>
 8006c64:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006c68:	9d07      	ldr	r5, [sp, #28]
 8006c6a:	f806 4b01 	strb.w	r4, [r6], #1
 8006c6e:	eba6 040a 	sub.w	r4, r6, sl
 8006c72:	42a5      	cmp	r5, r4
 8006c74:	4602      	mov	r2, r0
 8006c76:	460b      	mov	r3, r1
 8006c78:	f040 8116 	bne.w	8006ea8 <_dtoa_r+0x6e0>
 8006c7c:	f7f9 fa76 	bl	800016c <__adddf3>
 8006c80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c84:	4604      	mov	r4, r0
 8006c86:	460d      	mov	r5, r1
 8006c88:	f7f9 feb6 	bl	80009f8 <__aeabi_dcmpgt>
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	f040 80f8 	bne.w	8006e82 <_dtoa_r+0x6ba>
 8006c92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c96:	4620      	mov	r0, r4
 8006c98:	4629      	mov	r1, r5
 8006c9a:	f7f9 fe85 	bl	80009a8 <__aeabi_dcmpeq>
 8006c9e:	b118      	cbz	r0, 8006ca8 <_dtoa_r+0x4e0>
 8006ca0:	f018 0f01 	tst.w	r8, #1
 8006ca4:	f040 80ed 	bne.w	8006e82 <_dtoa_r+0x6ba>
 8006ca8:	4649      	mov	r1, r9
 8006caa:	4658      	mov	r0, fp
 8006cac:	f001 fe6c 	bl	8008988 <_Bfree>
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	7033      	strb	r3, [r6, #0]
 8006cb4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006cb6:	3701      	adds	r7, #1
 8006cb8:	601f      	str	r7, [r3, #0]
 8006cba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f000 8320 	beq.w	8007302 <_dtoa_r+0xb3a>
 8006cc2:	601e      	str	r6, [r3, #0]
 8006cc4:	e31d      	b.n	8007302 <_dtoa_r+0xb3a>
 8006cc6:	07e2      	lsls	r2, r4, #31
 8006cc8:	d505      	bpl.n	8006cd6 <_dtoa_r+0x50e>
 8006cca:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006cce:	f7f9 fc03 	bl	80004d8 <__aeabi_dmul>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	3601      	adds	r6, #1
 8006cd6:	1064      	asrs	r4, r4, #1
 8006cd8:	3508      	adds	r5, #8
 8006cda:	e73f      	b.n	8006b5c <_dtoa_r+0x394>
 8006cdc:	2602      	movs	r6, #2
 8006cde:	e742      	b.n	8006b66 <_dtoa_r+0x39e>
 8006ce0:	9c07      	ldr	r4, [sp, #28]
 8006ce2:	9704      	str	r7, [sp, #16]
 8006ce4:	e761      	b.n	8006baa <_dtoa_r+0x3e2>
 8006ce6:	bf00      	nop
 8006ce8:	08009ba8 	.word	0x08009ba8
 8006cec:	08009b80 	.word	0x08009b80
 8006cf0:	3ff00000 	.word	0x3ff00000
 8006cf4:	40240000 	.word	0x40240000
 8006cf8:	401c0000 	.word	0x401c0000
 8006cfc:	40140000 	.word	0x40140000
 8006d00:	4b70      	ldr	r3, [pc, #448]	@ (8006ec4 <_dtoa_r+0x6fc>)
 8006d02:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d0c:	4454      	add	r4, sl
 8006d0e:	2900      	cmp	r1, #0
 8006d10:	d045      	beq.n	8006d9e <_dtoa_r+0x5d6>
 8006d12:	2000      	movs	r0, #0
 8006d14:	496c      	ldr	r1, [pc, #432]	@ (8006ec8 <_dtoa_r+0x700>)
 8006d16:	f7f9 fd09 	bl	800072c <__aeabi_ddiv>
 8006d1a:	4633      	mov	r3, r6
 8006d1c:	462a      	mov	r2, r5
 8006d1e:	f7f9 fa23 	bl	8000168 <__aeabi_dsub>
 8006d22:	4656      	mov	r6, sl
 8006d24:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d2c:	f7f9 fe84 	bl	8000a38 <__aeabi_d2iz>
 8006d30:	4605      	mov	r5, r0
 8006d32:	f7f9 fb67 	bl	8000404 <__aeabi_i2d>
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d3e:	f7f9 fa13 	bl	8000168 <__aeabi_dsub>
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	3530      	adds	r5, #48	@ 0x30
 8006d48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d4c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d50:	f806 5b01 	strb.w	r5, [r6], #1
 8006d54:	f7f9 fe32 	bl	80009bc <__aeabi_dcmplt>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	d163      	bne.n	8006e24 <_dtoa_r+0x65c>
 8006d5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d60:	2000      	movs	r0, #0
 8006d62:	495a      	ldr	r1, [pc, #360]	@ (8006ecc <_dtoa_r+0x704>)
 8006d64:	f7f9 fa00 	bl	8000168 <__aeabi_dsub>
 8006d68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d6c:	f7f9 fe26 	bl	80009bc <__aeabi_dcmplt>
 8006d70:	2800      	cmp	r0, #0
 8006d72:	f040 8087 	bne.w	8006e84 <_dtoa_r+0x6bc>
 8006d76:	42a6      	cmp	r6, r4
 8006d78:	f43f af43 	beq.w	8006c02 <_dtoa_r+0x43a>
 8006d7c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006d80:	2200      	movs	r2, #0
 8006d82:	4b53      	ldr	r3, [pc, #332]	@ (8006ed0 <_dtoa_r+0x708>)
 8006d84:	f7f9 fba8 	bl	80004d8 <__aeabi_dmul>
 8006d88:	2200      	movs	r2, #0
 8006d8a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d92:	4b4f      	ldr	r3, [pc, #316]	@ (8006ed0 <_dtoa_r+0x708>)
 8006d94:	f7f9 fba0 	bl	80004d8 <__aeabi_dmul>
 8006d98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d9c:	e7c4      	b.n	8006d28 <_dtoa_r+0x560>
 8006d9e:	4631      	mov	r1, r6
 8006da0:	4628      	mov	r0, r5
 8006da2:	f7f9 fb99 	bl	80004d8 <__aeabi_dmul>
 8006da6:	4656      	mov	r6, sl
 8006da8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006dac:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006dae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006db2:	f7f9 fe41 	bl	8000a38 <__aeabi_d2iz>
 8006db6:	4605      	mov	r5, r0
 8006db8:	f7f9 fb24 	bl	8000404 <__aeabi_i2d>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dc4:	f7f9 f9d0 	bl	8000168 <__aeabi_dsub>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	460b      	mov	r3, r1
 8006dcc:	3530      	adds	r5, #48	@ 0x30
 8006dce:	f806 5b01 	strb.w	r5, [r6], #1
 8006dd2:	42a6      	cmp	r6, r4
 8006dd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006dd8:	f04f 0200 	mov.w	r2, #0
 8006ddc:	d124      	bne.n	8006e28 <_dtoa_r+0x660>
 8006dde:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006de2:	4b39      	ldr	r3, [pc, #228]	@ (8006ec8 <_dtoa_r+0x700>)
 8006de4:	f7f9 f9c2 	bl	800016c <__adddf3>
 8006de8:	4602      	mov	r2, r0
 8006dea:	460b      	mov	r3, r1
 8006dec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006df0:	f7f9 fe02 	bl	80009f8 <__aeabi_dcmpgt>
 8006df4:	2800      	cmp	r0, #0
 8006df6:	d145      	bne.n	8006e84 <_dtoa_r+0x6bc>
 8006df8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006dfc:	2000      	movs	r0, #0
 8006dfe:	4932      	ldr	r1, [pc, #200]	@ (8006ec8 <_dtoa_r+0x700>)
 8006e00:	f7f9 f9b2 	bl	8000168 <__aeabi_dsub>
 8006e04:	4602      	mov	r2, r0
 8006e06:	460b      	mov	r3, r1
 8006e08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e0c:	f7f9 fdd6 	bl	80009bc <__aeabi_dcmplt>
 8006e10:	2800      	cmp	r0, #0
 8006e12:	f43f aef6 	beq.w	8006c02 <_dtoa_r+0x43a>
 8006e16:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006e18:	1e73      	subs	r3, r6, #1
 8006e1a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e1c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006e20:	2b30      	cmp	r3, #48	@ 0x30
 8006e22:	d0f8      	beq.n	8006e16 <_dtoa_r+0x64e>
 8006e24:	9f04      	ldr	r7, [sp, #16]
 8006e26:	e73f      	b.n	8006ca8 <_dtoa_r+0x4e0>
 8006e28:	4b29      	ldr	r3, [pc, #164]	@ (8006ed0 <_dtoa_r+0x708>)
 8006e2a:	f7f9 fb55 	bl	80004d8 <__aeabi_dmul>
 8006e2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e32:	e7bc      	b.n	8006dae <_dtoa_r+0x5e6>
 8006e34:	d10c      	bne.n	8006e50 <_dtoa_r+0x688>
 8006e36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	4b25      	ldr	r3, [pc, #148]	@ (8006ed4 <_dtoa_r+0x70c>)
 8006e3e:	f7f9 fb4b 	bl	80004d8 <__aeabi_dmul>
 8006e42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e46:	f7f9 fdcd 	bl	80009e4 <__aeabi_dcmpge>
 8006e4a:	2800      	cmp	r0, #0
 8006e4c:	f000 815b 	beq.w	8007106 <_dtoa_r+0x93e>
 8006e50:	2400      	movs	r4, #0
 8006e52:	4625      	mov	r5, r4
 8006e54:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006e56:	4656      	mov	r6, sl
 8006e58:	43db      	mvns	r3, r3
 8006e5a:	9304      	str	r3, [sp, #16]
 8006e5c:	2700      	movs	r7, #0
 8006e5e:	4621      	mov	r1, r4
 8006e60:	4658      	mov	r0, fp
 8006e62:	f001 fd91 	bl	8008988 <_Bfree>
 8006e66:	2d00      	cmp	r5, #0
 8006e68:	d0dc      	beq.n	8006e24 <_dtoa_r+0x65c>
 8006e6a:	b12f      	cbz	r7, 8006e78 <_dtoa_r+0x6b0>
 8006e6c:	42af      	cmp	r7, r5
 8006e6e:	d003      	beq.n	8006e78 <_dtoa_r+0x6b0>
 8006e70:	4639      	mov	r1, r7
 8006e72:	4658      	mov	r0, fp
 8006e74:	f001 fd88 	bl	8008988 <_Bfree>
 8006e78:	4629      	mov	r1, r5
 8006e7a:	4658      	mov	r0, fp
 8006e7c:	f001 fd84 	bl	8008988 <_Bfree>
 8006e80:	e7d0      	b.n	8006e24 <_dtoa_r+0x65c>
 8006e82:	9704      	str	r7, [sp, #16]
 8006e84:	4633      	mov	r3, r6
 8006e86:	461e      	mov	r6, r3
 8006e88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e8c:	2a39      	cmp	r2, #57	@ 0x39
 8006e8e:	d107      	bne.n	8006ea0 <_dtoa_r+0x6d8>
 8006e90:	459a      	cmp	sl, r3
 8006e92:	d1f8      	bne.n	8006e86 <_dtoa_r+0x6be>
 8006e94:	9a04      	ldr	r2, [sp, #16]
 8006e96:	3201      	adds	r2, #1
 8006e98:	9204      	str	r2, [sp, #16]
 8006e9a:	2230      	movs	r2, #48	@ 0x30
 8006e9c:	f88a 2000 	strb.w	r2, [sl]
 8006ea0:	781a      	ldrb	r2, [r3, #0]
 8006ea2:	3201      	adds	r2, #1
 8006ea4:	701a      	strb	r2, [r3, #0]
 8006ea6:	e7bd      	b.n	8006e24 <_dtoa_r+0x65c>
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	4b09      	ldr	r3, [pc, #36]	@ (8006ed0 <_dtoa_r+0x708>)
 8006eac:	f7f9 fb14 	bl	80004d8 <__aeabi_dmul>
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	4604      	mov	r4, r0
 8006eb6:	460d      	mov	r5, r1
 8006eb8:	f7f9 fd76 	bl	80009a8 <__aeabi_dcmpeq>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	f43f aebc 	beq.w	8006c3a <_dtoa_r+0x472>
 8006ec2:	e6f1      	b.n	8006ca8 <_dtoa_r+0x4e0>
 8006ec4:	08009ba8 	.word	0x08009ba8
 8006ec8:	3fe00000 	.word	0x3fe00000
 8006ecc:	3ff00000 	.word	0x3ff00000
 8006ed0:	40240000 	.word	0x40240000
 8006ed4:	40140000 	.word	0x40140000
 8006ed8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006eda:	2a00      	cmp	r2, #0
 8006edc:	f000 80db 	beq.w	8007096 <_dtoa_r+0x8ce>
 8006ee0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006ee2:	2a01      	cmp	r2, #1
 8006ee4:	f300 80bf 	bgt.w	8007066 <_dtoa_r+0x89e>
 8006ee8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006eea:	2a00      	cmp	r2, #0
 8006eec:	f000 80b7 	beq.w	800705e <_dtoa_r+0x896>
 8006ef0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006ef4:	4646      	mov	r6, r8
 8006ef6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006ef8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006efa:	2101      	movs	r1, #1
 8006efc:	441a      	add	r2, r3
 8006efe:	4658      	mov	r0, fp
 8006f00:	4498      	add	r8, r3
 8006f02:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f04:	f001 fe3e 	bl	8008b84 <__i2b>
 8006f08:	4605      	mov	r5, r0
 8006f0a:	b15e      	cbz	r6, 8006f24 <_dtoa_r+0x75c>
 8006f0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	dd08      	ble.n	8006f24 <_dtoa_r+0x75c>
 8006f12:	42b3      	cmp	r3, r6
 8006f14:	bfa8      	it	ge
 8006f16:	4633      	movge	r3, r6
 8006f18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f1a:	eba8 0803 	sub.w	r8, r8, r3
 8006f1e:	1af6      	subs	r6, r6, r3
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f26:	b1f3      	cbz	r3, 8006f66 <_dtoa_r+0x79e>
 8006f28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f000 80b7 	beq.w	800709e <_dtoa_r+0x8d6>
 8006f30:	b18c      	cbz	r4, 8006f56 <_dtoa_r+0x78e>
 8006f32:	4629      	mov	r1, r5
 8006f34:	4622      	mov	r2, r4
 8006f36:	4658      	mov	r0, fp
 8006f38:	f001 fee2 	bl	8008d00 <__pow5mult>
 8006f3c:	464a      	mov	r2, r9
 8006f3e:	4601      	mov	r1, r0
 8006f40:	4605      	mov	r5, r0
 8006f42:	4658      	mov	r0, fp
 8006f44:	f001 fe34 	bl	8008bb0 <__multiply>
 8006f48:	4649      	mov	r1, r9
 8006f4a:	9004      	str	r0, [sp, #16]
 8006f4c:	4658      	mov	r0, fp
 8006f4e:	f001 fd1b 	bl	8008988 <_Bfree>
 8006f52:	9b04      	ldr	r3, [sp, #16]
 8006f54:	4699      	mov	r9, r3
 8006f56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f58:	1b1a      	subs	r2, r3, r4
 8006f5a:	d004      	beq.n	8006f66 <_dtoa_r+0x79e>
 8006f5c:	4649      	mov	r1, r9
 8006f5e:	4658      	mov	r0, fp
 8006f60:	f001 fece 	bl	8008d00 <__pow5mult>
 8006f64:	4681      	mov	r9, r0
 8006f66:	2101      	movs	r1, #1
 8006f68:	4658      	mov	r0, fp
 8006f6a:	f001 fe0b 	bl	8008b84 <__i2b>
 8006f6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f70:	4604      	mov	r4, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f000 81c9 	beq.w	800730a <_dtoa_r+0xb42>
 8006f78:	461a      	mov	r2, r3
 8006f7a:	4601      	mov	r1, r0
 8006f7c:	4658      	mov	r0, fp
 8006f7e:	f001 febf 	bl	8008d00 <__pow5mult>
 8006f82:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006f84:	4604      	mov	r4, r0
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	f300 808f 	bgt.w	80070aa <_dtoa_r+0x8e2>
 8006f8c:	9b02      	ldr	r3, [sp, #8]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f040 8087 	bne.w	80070a2 <_dtoa_r+0x8da>
 8006f94:	9b03      	ldr	r3, [sp, #12]
 8006f96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f040 8083 	bne.w	80070a6 <_dtoa_r+0x8de>
 8006fa0:	9b03      	ldr	r3, [sp, #12]
 8006fa2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006fa6:	0d1b      	lsrs	r3, r3, #20
 8006fa8:	051b      	lsls	r3, r3, #20
 8006faa:	b12b      	cbz	r3, 8006fb8 <_dtoa_r+0x7f0>
 8006fac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fae:	f108 0801 	add.w	r8, r8, #1
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f000 81aa 	beq.w	8007316 <_dtoa_r+0xb4e>
 8006fc2:	6923      	ldr	r3, [r4, #16]
 8006fc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006fc8:	6918      	ldr	r0, [r3, #16]
 8006fca:	f001 fd8f 	bl	8008aec <__hi0bits>
 8006fce:	f1c0 0020 	rsb	r0, r0, #32
 8006fd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fd4:	4418      	add	r0, r3
 8006fd6:	f010 001f 	ands.w	r0, r0, #31
 8006fda:	d071      	beq.n	80070c0 <_dtoa_r+0x8f8>
 8006fdc:	f1c0 0320 	rsb	r3, r0, #32
 8006fe0:	2b04      	cmp	r3, #4
 8006fe2:	dd65      	ble.n	80070b0 <_dtoa_r+0x8e8>
 8006fe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fe6:	f1c0 001c 	rsb	r0, r0, #28
 8006fea:	4403      	add	r3, r0
 8006fec:	4480      	add	r8, r0
 8006fee:	4406      	add	r6, r0
 8006ff0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ff2:	f1b8 0f00 	cmp.w	r8, #0
 8006ff6:	dd05      	ble.n	8007004 <_dtoa_r+0x83c>
 8006ff8:	4649      	mov	r1, r9
 8006ffa:	4642      	mov	r2, r8
 8006ffc:	4658      	mov	r0, fp
 8006ffe:	f001 fed9 	bl	8008db4 <__lshift>
 8007002:	4681      	mov	r9, r0
 8007004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007006:	2b00      	cmp	r3, #0
 8007008:	dd05      	ble.n	8007016 <_dtoa_r+0x84e>
 800700a:	4621      	mov	r1, r4
 800700c:	461a      	mov	r2, r3
 800700e:	4658      	mov	r0, fp
 8007010:	f001 fed0 	bl	8008db4 <__lshift>
 8007014:	4604      	mov	r4, r0
 8007016:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007018:	2b00      	cmp	r3, #0
 800701a:	d053      	beq.n	80070c4 <_dtoa_r+0x8fc>
 800701c:	4621      	mov	r1, r4
 800701e:	4648      	mov	r0, r9
 8007020:	f001 ff34 	bl	8008e8c <__mcmp>
 8007024:	2800      	cmp	r0, #0
 8007026:	da4d      	bge.n	80070c4 <_dtoa_r+0x8fc>
 8007028:	1e7b      	subs	r3, r7, #1
 800702a:	4649      	mov	r1, r9
 800702c:	9304      	str	r3, [sp, #16]
 800702e:	220a      	movs	r2, #10
 8007030:	2300      	movs	r3, #0
 8007032:	4658      	mov	r0, fp
 8007034:	f001 fcca 	bl	80089cc <__multadd>
 8007038:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800703a:	4681      	mov	r9, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	f000 816c 	beq.w	800731a <_dtoa_r+0xb52>
 8007042:	2300      	movs	r3, #0
 8007044:	4629      	mov	r1, r5
 8007046:	220a      	movs	r2, #10
 8007048:	4658      	mov	r0, fp
 800704a:	f001 fcbf 	bl	80089cc <__multadd>
 800704e:	9b08      	ldr	r3, [sp, #32]
 8007050:	4605      	mov	r5, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	dc61      	bgt.n	800711a <_dtoa_r+0x952>
 8007056:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007058:	2b02      	cmp	r3, #2
 800705a:	dc3b      	bgt.n	80070d4 <_dtoa_r+0x90c>
 800705c:	e05d      	b.n	800711a <_dtoa_r+0x952>
 800705e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007060:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007064:	e746      	b.n	8006ef4 <_dtoa_r+0x72c>
 8007066:	9b07      	ldr	r3, [sp, #28]
 8007068:	1e5c      	subs	r4, r3, #1
 800706a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800706c:	42a3      	cmp	r3, r4
 800706e:	bfbf      	itttt	lt
 8007070:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007072:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8007074:	1ae3      	sublt	r3, r4, r3
 8007076:	18d2      	addlt	r2, r2, r3
 8007078:	bfa8      	it	ge
 800707a:	1b1c      	subge	r4, r3, r4
 800707c:	9b07      	ldr	r3, [sp, #28]
 800707e:	bfbe      	ittt	lt
 8007080:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007082:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8007084:	2400      	movlt	r4, #0
 8007086:	2b00      	cmp	r3, #0
 8007088:	bfb5      	itete	lt
 800708a:	eba8 0603 	sublt.w	r6, r8, r3
 800708e:	4646      	movge	r6, r8
 8007090:	2300      	movlt	r3, #0
 8007092:	9b07      	ldrge	r3, [sp, #28]
 8007094:	e730      	b.n	8006ef8 <_dtoa_r+0x730>
 8007096:	4646      	mov	r6, r8
 8007098:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800709a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800709c:	e735      	b.n	8006f0a <_dtoa_r+0x742>
 800709e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070a0:	e75c      	b.n	8006f5c <_dtoa_r+0x794>
 80070a2:	2300      	movs	r3, #0
 80070a4:	e788      	b.n	8006fb8 <_dtoa_r+0x7f0>
 80070a6:	9b02      	ldr	r3, [sp, #8]
 80070a8:	e786      	b.n	8006fb8 <_dtoa_r+0x7f0>
 80070aa:	2300      	movs	r3, #0
 80070ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80070ae:	e788      	b.n	8006fc2 <_dtoa_r+0x7fa>
 80070b0:	d09f      	beq.n	8006ff2 <_dtoa_r+0x82a>
 80070b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070b4:	331c      	adds	r3, #28
 80070b6:	441a      	add	r2, r3
 80070b8:	4498      	add	r8, r3
 80070ba:	441e      	add	r6, r3
 80070bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80070be:	e798      	b.n	8006ff2 <_dtoa_r+0x82a>
 80070c0:	4603      	mov	r3, r0
 80070c2:	e7f6      	b.n	80070b2 <_dtoa_r+0x8ea>
 80070c4:	9b07      	ldr	r3, [sp, #28]
 80070c6:	9704      	str	r7, [sp, #16]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	dc20      	bgt.n	800710e <_dtoa_r+0x946>
 80070cc:	9308      	str	r3, [sp, #32]
 80070ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	dd1e      	ble.n	8007112 <_dtoa_r+0x94a>
 80070d4:	9b08      	ldr	r3, [sp, #32]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f47f aebc 	bne.w	8006e54 <_dtoa_r+0x68c>
 80070dc:	4621      	mov	r1, r4
 80070de:	2205      	movs	r2, #5
 80070e0:	4658      	mov	r0, fp
 80070e2:	f001 fc73 	bl	80089cc <__multadd>
 80070e6:	4601      	mov	r1, r0
 80070e8:	4604      	mov	r4, r0
 80070ea:	4648      	mov	r0, r9
 80070ec:	f001 fece 	bl	8008e8c <__mcmp>
 80070f0:	2800      	cmp	r0, #0
 80070f2:	f77f aeaf 	ble.w	8006e54 <_dtoa_r+0x68c>
 80070f6:	2331      	movs	r3, #49	@ 0x31
 80070f8:	4656      	mov	r6, sl
 80070fa:	f806 3b01 	strb.w	r3, [r6], #1
 80070fe:	9b04      	ldr	r3, [sp, #16]
 8007100:	3301      	adds	r3, #1
 8007102:	9304      	str	r3, [sp, #16]
 8007104:	e6aa      	b.n	8006e5c <_dtoa_r+0x694>
 8007106:	9c07      	ldr	r4, [sp, #28]
 8007108:	9704      	str	r7, [sp, #16]
 800710a:	4625      	mov	r5, r4
 800710c:	e7f3      	b.n	80070f6 <_dtoa_r+0x92e>
 800710e:	9b07      	ldr	r3, [sp, #28]
 8007110:	9308      	str	r3, [sp, #32]
 8007112:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007114:	2b00      	cmp	r3, #0
 8007116:	f000 8104 	beq.w	8007322 <_dtoa_r+0xb5a>
 800711a:	2e00      	cmp	r6, #0
 800711c:	dd05      	ble.n	800712a <_dtoa_r+0x962>
 800711e:	4629      	mov	r1, r5
 8007120:	4632      	mov	r2, r6
 8007122:	4658      	mov	r0, fp
 8007124:	f001 fe46 	bl	8008db4 <__lshift>
 8007128:	4605      	mov	r5, r0
 800712a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800712c:	2b00      	cmp	r3, #0
 800712e:	d05a      	beq.n	80071e6 <_dtoa_r+0xa1e>
 8007130:	4658      	mov	r0, fp
 8007132:	6869      	ldr	r1, [r5, #4]
 8007134:	f001 fbe8 	bl	8008908 <_Balloc>
 8007138:	4606      	mov	r6, r0
 800713a:	b928      	cbnz	r0, 8007148 <_dtoa_r+0x980>
 800713c:	4602      	mov	r2, r0
 800713e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007142:	4b83      	ldr	r3, [pc, #524]	@ (8007350 <_dtoa_r+0xb88>)
 8007144:	f7ff bb54 	b.w	80067f0 <_dtoa_r+0x28>
 8007148:	692a      	ldr	r2, [r5, #16]
 800714a:	f105 010c 	add.w	r1, r5, #12
 800714e:	3202      	adds	r2, #2
 8007150:	0092      	lsls	r2, r2, #2
 8007152:	300c      	adds	r0, #12
 8007154:	f7ff fa95 	bl	8006682 <memcpy>
 8007158:	2201      	movs	r2, #1
 800715a:	4631      	mov	r1, r6
 800715c:	4658      	mov	r0, fp
 800715e:	f001 fe29 	bl	8008db4 <__lshift>
 8007162:	462f      	mov	r7, r5
 8007164:	4605      	mov	r5, r0
 8007166:	f10a 0301 	add.w	r3, sl, #1
 800716a:	9307      	str	r3, [sp, #28]
 800716c:	9b08      	ldr	r3, [sp, #32]
 800716e:	4453      	add	r3, sl
 8007170:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007172:	9b02      	ldr	r3, [sp, #8]
 8007174:	f003 0301 	and.w	r3, r3, #1
 8007178:	930a      	str	r3, [sp, #40]	@ 0x28
 800717a:	9b07      	ldr	r3, [sp, #28]
 800717c:	4621      	mov	r1, r4
 800717e:	3b01      	subs	r3, #1
 8007180:	4648      	mov	r0, r9
 8007182:	9302      	str	r3, [sp, #8]
 8007184:	f7ff fa96 	bl	80066b4 <quorem>
 8007188:	4639      	mov	r1, r7
 800718a:	9008      	str	r0, [sp, #32]
 800718c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007190:	4648      	mov	r0, r9
 8007192:	f001 fe7b 	bl	8008e8c <__mcmp>
 8007196:	462a      	mov	r2, r5
 8007198:	9009      	str	r0, [sp, #36]	@ 0x24
 800719a:	4621      	mov	r1, r4
 800719c:	4658      	mov	r0, fp
 800719e:	f001 fe91 	bl	8008ec4 <__mdiff>
 80071a2:	68c2      	ldr	r2, [r0, #12]
 80071a4:	4606      	mov	r6, r0
 80071a6:	bb02      	cbnz	r2, 80071ea <_dtoa_r+0xa22>
 80071a8:	4601      	mov	r1, r0
 80071aa:	4648      	mov	r0, r9
 80071ac:	f001 fe6e 	bl	8008e8c <__mcmp>
 80071b0:	4602      	mov	r2, r0
 80071b2:	4631      	mov	r1, r6
 80071b4:	4658      	mov	r0, fp
 80071b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80071b8:	f001 fbe6 	bl	8008988 <_Bfree>
 80071bc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80071be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80071c0:	9e07      	ldr	r6, [sp, #28]
 80071c2:	ea43 0102 	orr.w	r1, r3, r2
 80071c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071c8:	4319      	orrs	r1, r3
 80071ca:	d110      	bne.n	80071ee <_dtoa_r+0xa26>
 80071cc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80071d0:	d029      	beq.n	8007226 <_dtoa_r+0xa5e>
 80071d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	dd02      	ble.n	80071de <_dtoa_r+0xa16>
 80071d8:	9b08      	ldr	r3, [sp, #32]
 80071da:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80071de:	9b02      	ldr	r3, [sp, #8]
 80071e0:	f883 8000 	strb.w	r8, [r3]
 80071e4:	e63b      	b.n	8006e5e <_dtoa_r+0x696>
 80071e6:	4628      	mov	r0, r5
 80071e8:	e7bb      	b.n	8007162 <_dtoa_r+0x99a>
 80071ea:	2201      	movs	r2, #1
 80071ec:	e7e1      	b.n	80071b2 <_dtoa_r+0x9ea>
 80071ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	db04      	blt.n	80071fe <_dtoa_r+0xa36>
 80071f4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80071f6:	430b      	orrs	r3, r1
 80071f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80071fa:	430b      	orrs	r3, r1
 80071fc:	d120      	bne.n	8007240 <_dtoa_r+0xa78>
 80071fe:	2a00      	cmp	r2, #0
 8007200:	dded      	ble.n	80071de <_dtoa_r+0xa16>
 8007202:	4649      	mov	r1, r9
 8007204:	2201      	movs	r2, #1
 8007206:	4658      	mov	r0, fp
 8007208:	f001 fdd4 	bl	8008db4 <__lshift>
 800720c:	4621      	mov	r1, r4
 800720e:	4681      	mov	r9, r0
 8007210:	f001 fe3c 	bl	8008e8c <__mcmp>
 8007214:	2800      	cmp	r0, #0
 8007216:	dc03      	bgt.n	8007220 <_dtoa_r+0xa58>
 8007218:	d1e1      	bne.n	80071de <_dtoa_r+0xa16>
 800721a:	f018 0f01 	tst.w	r8, #1
 800721e:	d0de      	beq.n	80071de <_dtoa_r+0xa16>
 8007220:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007224:	d1d8      	bne.n	80071d8 <_dtoa_r+0xa10>
 8007226:	2339      	movs	r3, #57	@ 0x39
 8007228:	9a02      	ldr	r2, [sp, #8]
 800722a:	7013      	strb	r3, [r2, #0]
 800722c:	4633      	mov	r3, r6
 800722e:	461e      	mov	r6, r3
 8007230:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007234:	3b01      	subs	r3, #1
 8007236:	2a39      	cmp	r2, #57	@ 0x39
 8007238:	d052      	beq.n	80072e0 <_dtoa_r+0xb18>
 800723a:	3201      	adds	r2, #1
 800723c:	701a      	strb	r2, [r3, #0]
 800723e:	e60e      	b.n	8006e5e <_dtoa_r+0x696>
 8007240:	2a00      	cmp	r2, #0
 8007242:	dd07      	ble.n	8007254 <_dtoa_r+0xa8c>
 8007244:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007248:	d0ed      	beq.n	8007226 <_dtoa_r+0xa5e>
 800724a:	9a02      	ldr	r2, [sp, #8]
 800724c:	f108 0301 	add.w	r3, r8, #1
 8007250:	7013      	strb	r3, [r2, #0]
 8007252:	e604      	b.n	8006e5e <_dtoa_r+0x696>
 8007254:	9b07      	ldr	r3, [sp, #28]
 8007256:	9a07      	ldr	r2, [sp, #28]
 8007258:	f803 8c01 	strb.w	r8, [r3, #-1]
 800725c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800725e:	4293      	cmp	r3, r2
 8007260:	d028      	beq.n	80072b4 <_dtoa_r+0xaec>
 8007262:	4649      	mov	r1, r9
 8007264:	2300      	movs	r3, #0
 8007266:	220a      	movs	r2, #10
 8007268:	4658      	mov	r0, fp
 800726a:	f001 fbaf 	bl	80089cc <__multadd>
 800726e:	42af      	cmp	r7, r5
 8007270:	4681      	mov	r9, r0
 8007272:	f04f 0300 	mov.w	r3, #0
 8007276:	f04f 020a 	mov.w	r2, #10
 800727a:	4639      	mov	r1, r7
 800727c:	4658      	mov	r0, fp
 800727e:	d107      	bne.n	8007290 <_dtoa_r+0xac8>
 8007280:	f001 fba4 	bl	80089cc <__multadd>
 8007284:	4607      	mov	r7, r0
 8007286:	4605      	mov	r5, r0
 8007288:	9b07      	ldr	r3, [sp, #28]
 800728a:	3301      	adds	r3, #1
 800728c:	9307      	str	r3, [sp, #28]
 800728e:	e774      	b.n	800717a <_dtoa_r+0x9b2>
 8007290:	f001 fb9c 	bl	80089cc <__multadd>
 8007294:	4629      	mov	r1, r5
 8007296:	4607      	mov	r7, r0
 8007298:	2300      	movs	r3, #0
 800729a:	220a      	movs	r2, #10
 800729c:	4658      	mov	r0, fp
 800729e:	f001 fb95 	bl	80089cc <__multadd>
 80072a2:	4605      	mov	r5, r0
 80072a4:	e7f0      	b.n	8007288 <_dtoa_r+0xac0>
 80072a6:	9b08      	ldr	r3, [sp, #32]
 80072a8:	2700      	movs	r7, #0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	bfcc      	ite	gt
 80072ae:	461e      	movgt	r6, r3
 80072b0:	2601      	movle	r6, #1
 80072b2:	4456      	add	r6, sl
 80072b4:	4649      	mov	r1, r9
 80072b6:	2201      	movs	r2, #1
 80072b8:	4658      	mov	r0, fp
 80072ba:	f001 fd7b 	bl	8008db4 <__lshift>
 80072be:	4621      	mov	r1, r4
 80072c0:	4681      	mov	r9, r0
 80072c2:	f001 fde3 	bl	8008e8c <__mcmp>
 80072c6:	2800      	cmp	r0, #0
 80072c8:	dcb0      	bgt.n	800722c <_dtoa_r+0xa64>
 80072ca:	d102      	bne.n	80072d2 <_dtoa_r+0xb0a>
 80072cc:	f018 0f01 	tst.w	r8, #1
 80072d0:	d1ac      	bne.n	800722c <_dtoa_r+0xa64>
 80072d2:	4633      	mov	r3, r6
 80072d4:	461e      	mov	r6, r3
 80072d6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072da:	2a30      	cmp	r2, #48	@ 0x30
 80072dc:	d0fa      	beq.n	80072d4 <_dtoa_r+0xb0c>
 80072de:	e5be      	b.n	8006e5e <_dtoa_r+0x696>
 80072e0:	459a      	cmp	sl, r3
 80072e2:	d1a4      	bne.n	800722e <_dtoa_r+0xa66>
 80072e4:	9b04      	ldr	r3, [sp, #16]
 80072e6:	3301      	adds	r3, #1
 80072e8:	9304      	str	r3, [sp, #16]
 80072ea:	2331      	movs	r3, #49	@ 0x31
 80072ec:	f88a 3000 	strb.w	r3, [sl]
 80072f0:	e5b5      	b.n	8006e5e <_dtoa_r+0x696>
 80072f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80072f4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007354 <_dtoa_r+0xb8c>
 80072f8:	b11b      	cbz	r3, 8007302 <_dtoa_r+0xb3a>
 80072fa:	f10a 0308 	add.w	r3, sl, #8
 80072fe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007300:	6013      	str	r3, [r2, #0]
 8007302:	4650      	mov	r0, sl
 8007304:	b017      	add	sp, #92	@ 0x5c
 8007306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800730a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800730c:	2b01      	cmp	r3, #1
 800730e:	f77f ae3d 	ble.w	8006f8c <_dtoa_r+0x7c4>
 8007312:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007314:	930a      	str	r3, [sp, #40]	@ 0x28
 8007316:	2001      	movs	r0, #1
 8007318:	e65b      	b.n	8006fd2 <_dtoa_r+0x80a>
 800731a:	9b08      	ldr	r3, [sp, #32]
 800731c:	2b00      	cmp	r3, #0
 800731e:	f77f aed6 	ble.w	80070ce <_dtoa_r+0x906>
 8007322:	4656      	mov	r6, sl
 8007324:	4621      	mov	r1, r4
 8007326:	4648      	mov	r0, r9
 8007328:	f7ff f9c4 	bl	80066b4 <quorem>
 800732c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007330:	9b08      	ldr	r3, [sp, #32]
 8007332:	f806 8b01 	strb.w	r8, [r6], #1
 8007336:	eba6 020a 	sub.w	r2, r6, sl
 800733a:	4293      	cmp	r3, r2
 800733c:	ddb3      	ble.n	80072a6 <_dtoa_r+0xade>
 800733e:	4649      	mov	r1, r9
 8007340:	2300      	movs	r3, #0
 8007342:	220a      	movs	r2, #10
 8007344:	4658      	mov	r0, fp
 8007346:	f001 fb41 	bl	80089cc <__multadd>
 800734a:	4681      	mov	r9, r0
 800734c:	e7ea      	b.n	8007324 <_dtoa_r+0xb5c>
 800734e:	bf00      	nop
 8007350:	08009a7d 	.word	0x08009a7d
 8007354:	08009a01 	.word	0x08009a01

08007358 <_free_r>:
 8007358:	b538      	push	{r3, r4, r5, lr}
 800735a:	4605      	mov	r5, r0
 800735c:	2900      	cmp	r1, #0
 800735e:	d040      	beq.n	80073e2 <_free_r+0x8a>
 8007360:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007364:	1f0c      	subs	r4, r1, #4
 8007366:	2b00      	cmp	r3, #0
 8007368:	bfb8      	it	lt
 800736a:	18e4      	addlt	r4, r4, r3
 800736c:	f001 fac0 	bl	80088f0 <__malloc_lock>
 8007370:	4a1c      	ldr	r2, [pc, #112]	@ (80073e4 <_free_r+0x8c>)
 8007372:	6813      	ldr	r3, [r2, #0]
 8007374:	b933      	cbnz	r3, 8007384 <_free_r+0x2c>
 8007376:	6063      	str	r3, [r4, #4]
 8007378:	6014      	str	r4, [r2, #0]
 800737a:	4628      	mov	r0, r5
 800737c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007380:	f001 babc 	b.w	80088fc <__malloc_unlock>
 8007384:	42a3      	cmp	r3, r4
 8007386:	d908      	bls.n	800739a <_free_r+0x42>
 8007388:	6820      	ldr	r0, [r4, #0]
 800738a:	1821      	adds	r1, r4, r0
 800738c:	428b      	cmp	r3, r1
 800738e:	bf01      	itttt	eq
 8007390:	6819      	ldreq	r1, [r3, #0]
 8007392:	685b      	ldreq	r3, [r3, #4]
 8007394:	1809      	addeq	r1, r1, r0
 8007396:	6021      	streq	r1, [r4, #0]
 8007398:	e7ed      	b.n	8007376 <_free_r+0x1e>
 800739a:	461a      	mov	r2, r3
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	b10b      	cbz	r3, 80073a4 <_free_r+0x4c>
 80073a0:	42a3      	cmp	r3, r4
 80073a2:	d9fa      	bls.n	800739a <_free_r+0x42>
 80073a4:	6811      	ldr	r1, [r2, #0]
 80073a6:	1850      	adds	r0, r2, r1
 80073a8:	42a0      	cmp	r0, r4
 80073aa:	d10b      	bne.n	80073c4 <_free_r+0x6c>
 80073ac:	6820      	ldr	r0, [r4, #0]
 80073ae:	4401      	add	r1, r0
 80073b0:	1850      	adds	r0, r2, r1
 80073b2:	4283      	cmp	r3, r0
 80073b4:	6011      	str	r1, [r2, #0]
 80073b6:	d1e0      	bne.n	800737a <_free_r+0x22>
 80073b8:	6818      	ldr	r0, [r3, #0]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	4408      	add	r0, r1
 80073be:	6010      	str	r0, [r2, #0]
 80073c0:	6053      	str	r3, [r2, #4]
 80073c2:	e7da      	b.n	800737a <_free_r+0x22>
 80073c4:	d902      	bls.n	80073cc <_free_r+0x74>
 80073c6:	230c      	movs	r3, #12
 80073c8:	602b      	str	r3, [r5, #0]
 80073ca:	e7d6      	b.n	800737a <_free_r+0x22>
 80073cc:	6820      	ldr	r0, [r4, #0]
 80073ce:	1821      	adds	r1, r4, r0
 80073d0:	428b      	cmp	r3, r1
 80073d2:	bf01      	itttt	eq
 80073d4:	6819      	ldreq	r1, [r3, #0]
 80073d6:	685b      	ldreq	r3, [r3, #4]
 80073d8:	1809      	addeq	r1, r1, r0
 80073da:	6021      	streq	r1, [r4, #0]
 80073dc:	6063      	str	r3, [r4, #4]
 80073de:	6054      	str	r4, [r2, #4]
 80073e0:	e7cb      	b.n	800737a <_free_r+0x22>
 80073e2:	bd38      	pop	{r3, r4, r5, pc}
 80073e4:	200004bc 	.word	0x200004bc

080073e8 <rshift>:
 80073e8:	6903      	ldr	r3, [r0, #16]
 80073ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80073f2:	f100 0414 	add.w	r4, r0, #20
 80073f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80073fa:	dd46      	ble.n	800748a <rshift+0xa2>
 80073fc:	f011 011f 	ands.w	r1, r1, #31
 8007400:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007404:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007408:	d10c      	bne.n	8007424 <rshift+0x3c>
 800740a:	4629      	mov	r1, r5
 800740c:	f100 0710 	add.w	r7, r0, #16
 8007410:	42b1      	cmp	r1, r6
 8007412:	d335      	bcc.n	8007480 <rshift+0x98>
 8007414:	1a9b      	subs	r3, r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	1eea      	subs	r2, r5, #3
 800741a:	4296      	cmp	r6, r2
 800741c:	bf38      	it	cc
 800741e:	2300      	movcc	r3, #0
 8007420:	4423      	add	r3, r4
 8007422:	e015      	b.n	8007450 <rshift+0x68>
 8007424:	46a1      	mov	r9, r4
 8007426:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800742a:	f1c1 0820 	rsb	r8, r1, #32
 800742e:	40cf      	lsrs	r7, r1
 8007430:	f105 0e04 	add.w	lr, r5, #4
 8007434:	4576      	cmp	r6, lr
 8007436:	46f4      	mov	ip, lr
 8007438:	d816      	bhi.n	8007468 <rshift+0x80>
 800743a:	1a9a      	subs	r2, r3, r2
 800743c:	0092      	lsls	r2, r2, #2
 800743e:	3a04      	subs	r2, #4
 8007440:	3501      	adds	r5, #1
 8007442:	42ae      	cmp	r6, r5
 8007444:	bf38      	it	cc
 8007446:	2200      	movcc	r2, #0
 8007448:	18a3      	adds	r3, r4, r2
 800744a:	50a7      	str	r7, [r4, r2]
 800744c:	b107      	cbz	r7, 8007450 <rshift+0x68>
 800744e:	3304      	adds	r3, #4
 8007450:	42a3      	cmp	r3, r4
 8007452:	eba3 0204 	sub.w	r2, r3, r4
 8007456:	bf08      	it	eq
 8007458:	2300      	moveq	r3, #0
 800745a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800745e:	6102      	str	r2, [r0, #16]
 8007460:	bf08      	it	eq
 8007462:	6143      	streq	r3, [r0, #20]
 8007464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007468:	f8dc c000 	ldr.w	ip, [ip]
 800746c:	fa0c fc08 	lsl.w	ip, ip, r8
 8007470:	ea4c 0707 	orr.w	r7, ip, r7
 8007474:	f849 7b04 	str.w	r7, [r9], #4
 8007478:	f85e 7b04 	ldr.w	r7, [lr], #4
 800747c:	40cf      	lsrs	r7, r1
 800747e:	e7d9      	b.n	8007434 <rshift+0x4c>
 8007480:	f851 cb04 	ldr.w	ip, [r1], #4
 8007484:	f847 cf04 	str.w	ip, [r7, #4]!
 8007488:	e7c2      	b.n	8007410 <rshift+0x28>
 800748a:	4623      	mov	r3, r4
 800748c:	e7e0      	b.n	8007450 <rshift+0x68>

0800748e <__hexdig_fun>:
 800748e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007492:	2b09      	cmp	r3, #9
 8007494:	d802      	bhi.n	800749c <__hexdig_fun+0xe>
 8007496:	3820      	subs	r0, #32
 8007498:	b2c0      	uxtb	r0, r0
 800749a:	4770      	bx	lr
 800749c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80074a0:	2b05      	cmp	r3, #5
 80074a2:	d801      	bhi.n	80074a8 <__hexdig_fun+0x1a>
 80074a4:	3847      	subs	r0, #71	@ 0x47
 80074a6:	e7f7      	b.n	8007498 <__hexdig_fun+0xa>
 80074a8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80074ac:	2b05      	cmp	r3, #5
 80074ae:	d801      	bhi.n	80074b4 <__hexdig_fun+0x26>
 80074b0:	3827      	subs	r0, #39	@ 0x27
 80074b2:	e7f1      	b.n	8007498 <__hexdig_fun+0xa>
 80074b4:	2000      	movs	r0, #0
 80074b6:	4770      	bx	lr

080074b8 <__gethex>:
 80074b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074bc:	468a      	mov	sl, r1
 80074be:	4690      	mov	r8, r2
 80074c0:	b085      	sub	sp, #20
 80074c2:	9302      	str	r3, [sp, #8]
 80074c4:	680b      	ldr	r3, [r1, #0]
 80074c6:	9001      	str	r0, [sp, #4]
 80074c8:	1c9c      	adds	r4, r3, #2
 80074ca:	46a1      	mov	r9, r4
 80074cc:	f814 0b01 	ldrb.w	r0, [r4], #1
 80074d0:	2830      	cmp	r0, #48	@ 0x30
 80074d2:	d0fa      	beq.n	80074ca <__gethex+0x12>
 80074d4:	eba9 0303 	sub.w	r3, r9, r3
 80074d8:	f1a3 0b02 	sub.w	fp, r3, #2
 80074dc:	f7ff ffd7 	bl	800748e <__hexdig_fun>
 80074e0:	4605      	mov	r5, r0
 80074e2:	2800      	cmp	r0, #0
 80074e4:	d168      	bne.n	80075b8 <__gethex+0x100>
 80074e6:	2201      	movs	r2, #1
 80074e8:	4648      	mov	r0, r9
 80074ea:	499f      	ldr	r1, [pc, #636]	@ (8007768 <__gethex+0x2b0>)
 80074ec:	f7ff f82a 	bl	8006544 <strncmp>
 80074f0:	4607      	mov	r7, r0
 80074f2:	2800      	cmp	r0, #0
 80074f4:	d167      	bne.n	80075c6 <__gethex+0x10e>
 80074f6:	f899 0001 	ldrb.w	r0, [r9, #1]
 80074fa:	4626      	mov	r6, r4
 80074fc:	f7ff ffc7 	bl	800748e <__hexdig_fun>
 8007500:	2800      	cmp	r0, #0
 8007502:	d062      	beq.n	80075ca <__gethex+0x112>
 8007504:	4623      	mov	r3, r4
 8007506:	7818      	ldrb	r0, [r3, #0]
 8007508:	4699      	mov	r9, r3
 800750a:	2830      	cmp	r0, #48	@ 0x30
 800750c:	f103 0301 	add.w	r3, r3, #1
 8007510:	d0f9      	beq.n	8007506 <__gethex+0x4e>
 8007512:	f7ff ffbc 	bl	800748e <__hexdig_fun>
 8007516:	fab0 f580 	clz	r5, r0
 800751a:	f04f 0b01 	mov.w	fp, #1
 800751e:	096d      	lsrs	r5, r5, #5
 8007520:	464a      	mov	r2, r9
 8007522:	4616      	mov	r6, r2
 8007524:	7830      	ldrb	r0, [r6, #0]
 8007526:	3201      	adds	r2, #1
 8007528:	f7ff ffb1 	bl	800748e <__hexdig_fun>
 800752c:	2800      	cmp	r0, #0
 800752e:	d1f8      	bne.n	8007522 <__gethex+0x6a>
 8007530:	2201      	movs	r2, #1
 8007532:	4630      	mov	r0, r6
 8007534:	498c      	ldr	r1, [pc, #560]	@ (8007768 <__gethex+0x2b0>)
 8007536:	f7ff f805 	bl	8006544 <strncmp>
 800753a:	2800      	cmp	r0, #0
 800753c:	d13f      	bne.n	80075be <__gethex+0x106>
 800753e:	b944      	cbnz	r4, 8007552 <__gethex+0x9a>
 8007540:	1c74      	adds	r4, r6, #1
 8007542:	4622      	mov	r2, r4
 8007544:	4616      	mov	r6, r2
 8007546:	7830      	ldrb	r0, [r6, #0]
 8007548:	3201      	adds	r2, #1
 800754a:	f7ff ffa0 	bl	800748e <__hexdig_fun>
 800754e:	2800      	cmp	r0, #0
 8007550:	d1f8      	bne.n	8007544 <__gethex+0x8c>
 8007552:	1ba4      	subs	r4, r4, r6
 8007554:	00a7      	lsls	r7, r4, #2
 8007556:	7833      	ldrb	r3, [r6, #0]
 8007558:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800755c:	2b50      	cmp	r3, #80	@ 0x50
 800755e:	d13e      	bne.n	80075de <__gethex+0x126>
 8007560:	7873      	ldrb	r3, [r6, #1]
 8007562:	2b2b      	cmp	r3, #43	@ 0x2b
 8007564:	d033      	beq.n	80075ce <__gethex+0x116>
 8007566:	2b2d      	cmp	r3, #45	@ 0x2d
 8007568:	d034      	beq.n	80075d4 <__gethex+0x11c>
 800756a:	2400      	movs	r4, #0
 800756c:	1c71      	adds	r1, r6, #1
 800756e:	7808      	ldrb	r0, [r1, #0]
 8007570:	f7ff ff8d 	bl	800748e <__hexdig_fun>
 8007574:	1e43      	subs	r3, r0, #1
 8007576:	b2db      	uxtb	r3, r3
 8007578:	2b18      	cmp	r3, #24
 800757a:	d830      	bhi.n	80075de <__gethex+0x126>
 800757c:	f1a0 0210 	sub.w	r2, r0, #16
 8007580:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007584:	f7ff ff83 	bl	800748e <__hexdig_fun>
 8007588:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800758c:	fa5f fc8c 	uxtb.w	ip, ip
 8007590:	f1bc 0f18 	cmp.w	ip, #24
 8007594:	f04f 030a 	mov.w	r3, #10
 8007598:	d91e      	bls.n	80075d8 <__gethex+0x120>
 800759a:	b104      	cbz	r4, 800759e <__gethex+0xe6>
 800759c:	4252      	negs	r2, r2
 800759e:	4417      	add	r7, r2
 80075a0:	f8ca 1000 	str.w	r1, [sl]
 80075a4:	b1ed      	cbz	r5, 80075e2 <__gethex+0x12a>
 80075a6:	f1bb 0f00 	cmp.w	fp, #0
 80075aa:	bf0c      	ite	eq
 80075ac:	2506      	moveq	r5, #6
 80075ae:	2500      	movne	r5, #0
 80075b0:	4628      	mov	r0, r5
 80075b2:	b005      	add	sp, #20
 80075b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075b8:	2500      	movs	r5, #0
 80075ba:	462c      	mov	r4, r5
 80075bc:	e7b0      	b.n	8007520 <__gethex+0x68>
 80075be:	2c00      	cmp	r4, #0
 80075c0:	d1c7      	bne.n	8007552 <__gethex+0x9a>
 80075c2:	4627      	mov	r7, r4
 80075c4:	e7c7      	b.n	8007556 <__gethex+0x9e>
 80075c6:	464e      	mov	r6, r9
 80075c8:	462f      	mov	r7, r5
 80075ca:	2501      	movs	r5, #1
 80075cc:	e7c3      	b.n	8007556 <__gethex+0x9e>
 80075ce:	2400      	movs	r4, #0
 80075d0:	1cb1      	adds	r1, r6, #2
 80075d2:	e7cc      	b.n	800756e <__gethex+0xb6>
 80075d4:	2401      	movs	r4, #1
 80075d6:	e7fb      	b.n	80075d0 <__gethex+0x118>
 80075d8:	fb03 0002 	mla	r0, r3, r2, r0
 80075dc:	e7ce      	b.n	800757c <__gethex+0xc4>
 80075de:	4631      	mov	r1, r6
 80075e0:	e7de      	b.n	80075a0 <__gethex+0xe8>
 80075e2:	4629      	mov	r1, r5
 80075e4:	eba6 0309 	sub.w	r3, r6, r9
 80075e8:	3b01      	subs	r3, #1
 80075ea:	2b07      	cmp	r3, #7
 80075ec:	dc0a      	bgt.n	8007604 <__gethex+0x14c>
 80075ee:	9801      	ldr	r0, [sp, #4]
 80075f0:	f001 f98a 	bl	8008908 <_Balloc>
 80075f4:	4604      	mov	r4, r0
 80075f6:	b940      	cbnz	r0, 800760a <__gethex+0x152>
 80075f8:	4602      	mov	r2, r0
 80075fa:	21e4      	movs	r1, #228	@ 0xe4
 80075fc:	4b5b      	ldr	r3, [pc, #364]	@ (800776c <__gethex+0x2b4>)
 80075fe:	485c      	ldr	r0, [pc, #368]	@ (8007770 <__gethex+0x2b8>)
 8007600:	f002 f84c 	bl	800969c <__assert_func>
 8007604:	3101      	adds	r1, #1
 8007606:	105b      	asrs	r3, r3, #1
 8007608:	e7ef      	b.n	80075ea <__gethex+0x132>
 800760a:	2300      	movs	r3, #0
 800760c:	f100 0a14 	add.w	sl, r0, #20
 8007610:	4655      	mov	r5, sl
 8007612:	469b      	mov	fp, r3
 8007614:	45b1      	cmp	r9, r6
 8007616:	d337      	bcc.n	8007688 <__gethex+0x1d0>
 8007618:	f845 bb04 	str.w	fp, [r5], #4
 800761c:	eba5 050a 	sub.w	r5, r5, sl
 8007620:	10ad      	asrs	r5, r5, #2
 8007622:	6125      	str	r5, [r4, #16]
 8007624:	4658      	mov	r0, fp
 8007626:	f001 fa61 	bl	8008aec <__hi0bits>
 800762a:	016d      	lsls	r5, r5, #5
 800762c:	f8d8 6000 	ldr.w	r6, [r8]
 8007630:	1a2d      	subs	r5, r5, r0
 8007632:	42b5      	cmp	r5, r6
 8007634:	dd54      	ble.n	80076e0 <__gethex+0x228>
 8007636:	1bad      	subs	r5, r5, r6
 8007638:	4629      	mov	r1, r5
 800763a:	4620      	mov	r0, r4
 800763c:	f001 fde9 	bl	8009212 <__any_on>
 8007640:	4681      	mov	r9, r0
 8007642:	b178      	cbz	r0, 8007664 <__gethex+0x1ac>
 8007644:	f04f 0901 	mov.w	r9, #1
 8007648:	1e6b      	subs	r3, r5, #1
 800764a:	1159      	asrs	r1, r3, #5
 800764c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007650:	f003 021f 	and.w	r2, r3, #31
 8007654:	fa09 f202 	lsl.w	r2, r9, r2
 8007658:	420a      	tst	r2, r1
 800765a:	d003      	beq.n	8007664 <__gethex+0x1ac>
 800765c:	454b      	cmp	r3, r9
 800765e:	dc36      	bgt.n	80076ce <__gethex+0x216>
 8007660:	f04f 0902 	mov.w	r9, #2
 8007664:	4629      	mov	r1, r5
 8007666:	4620      	mov	r0, r4
 8007668:	f7ff febe 	bl	80073e8 <rshift>
 800766c:	442f      	add	r7, r5
 800766e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007672:	42bb      	cmp	r3, r7
 8007674:	da42      	bge.n	80076fc <__gethex+0x244>
 8007676:	4621      	mov	r1, r4
 8007678:	9801      	ldr	r0, [sp, #4]
 800767a:	f001 f985 	bl	8008988 <_Bfree>
 800767e:	2300      	movs	r3, #0
 8007680:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007682:	25a3      	movs	r5, #163	@ 0xa3
 8007684:	6013      	str	r3, [r2, #0]
 8007686:	e793      	b.n	80075b0 <__gethex+0xf8>
 8007688:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800768c:	2a2e      	cmp	r2, #46	@ 0x2e
 800768e:	d012      	beq.n	80076b6 <__gethex+0x1fe>
 8007690:	2b20      	cmp	r3, #32
 8007692:	d104      	bne.n	800769e <__gethex+0x1e6>
 8007694:	f845 bb04 	str.w	fp, [r5], #4
 8007698:	f04f 0b00 	mov.w	fp, #0
 800769c:	465b      	mov	r3, fp
 800769e:	7830      	ldrb	r0, [r6, #0]
 80076a0:	9303      	str	r3, [sp, #12]
 80076a2:	f7ff fef4 	bl	800748e <__hexdig_fun>
 80076a6:	9b03      	ldr	r3, [sp, #12]
 80076a8:	f000 000f 	and.w	r0, r0, #15
 80076ac:	4098      	lsls	r0, r3
 80076ae:	ea4b 0b00 	orr.w	fp, fp, r0
 80076b2:	3304      	adds	r3, #4
 80076b4:	e7ae      	b.n	8007614 <__gethex+0x15c>
 80076b6:	45b1      	cmp	r9, r6
 80076b8:	d8ea      	bhi.n	8007690 <__gethex+0x1d8>
 80076ba:	2201      	movs	r2, #1
 80076bc:	4630      	mov	r0, r6
 80076be:	492a      	ldr	r1, [pc, #168]	@ (8007768 <__gethex+0x2b0>)
 80076c0:	9303      	str	r3, [sp, #12]
 80076c2:	f7fe ff3f 	bl	8006544 <strncmp>
 80076c6:	9b03      	ldr	r3, [sp, #12]
 80076c8:	2800      	cmp	r0, #0
 80076ca:	d1e1      	bne.n	8007690 <__gethex+0x1d8>
 80076cc:	e7a2      	b.n	8007614 <__gethex+0x15c>
 80076ce:	4620      	mov	r0, r4
 80076d0:	1ea9      	subs	r1, r5, #2
 80076d2:	f001 fd9e 	bl	8009212 <__any_on>
 80076d6:	2800      	cmp	r0, #0
 80076d8:	d0c2      	beq.n	8007660 <__gethex+0x1a8>
 80076da:	f04f 0903 	mov.w	r9, #3
 80076de:	e7c1      	b.n	8007664 <__gethex+0x1ac>
 80076e0:	da09      	bge.n	80076f6 <__gethex+0x23e>
 80076e2:	1b75      	subs	r5, r6, r5
 80076e4:	4621      	mov	r1, r4
 80076e6:	462a      	mov	r2, r5
 80076e8:	9801      	ldr	r0, [sp, #4]
 80076ea:	f001 fb63 	bl	8008db4 <__lshift>
 80076ee:	4604      	mov	r4, r0
 80076f0:	1b7f      	subs	r7, r7, r5
 80076f2:	f100 0a14 	add.w	sl, r0, #20
 80076f6:	f04f 0900 	mov.w	r9, #0
 80076fa:	e7b8      	b.n	800766e <__gethex+0x1b6>
 80076fc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007700:	42bd      	cmp	r5, r7
 8007702:	dd6f      	ble.n	80077e4 <__gethex+0x32c>
 8007704:	1bed      	subs	r5, r5, r7
 8007706:	42ae      	cmp	r6, r5
 8007708:	dc34      	bgt.n	8007774 <__gethex+0x2bc>
 800770a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800770e:	2b02      	cmp	r3, #2
 8007710:	d022      	beq.n	8007758 <__gethex+0x2a0>
 8007712:	2b03      	cmp	r3, #3
 8007714:	d024      	beq.n	8007760 <__gethex+0x2a8>
 8007716:	2b01      	cmp	r3, #1
 8007718:	d115      	bne.n	8007746 <__gethex+0x28e>
 800771a:	42ae      	cmp	r6, r5
 800771c:	d113      	bne.n	8007746 <__gethex+0x28e>
 800771e:	2e01      	cmp	r6, #1
 8007720:	d10b      	bne.n	800773a <__gethex+0x282>
 8007722:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007726:	9a02      	ldr	r2, [sp, #8]
 8007728:	2562      	movs	r5, #98	@ 0x62
 800772a:	6013      	str	r3, [r2, #0]
 800772c:	2301      	movs	r3, #1
 800772e:	6123      	str	r3, [r4, #16]
 8007730:	f8ca 3000 	str.w	r3, [sl]
 8007734:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007736:	601c      	str	r4, [r3, #0]
 8007738:	e73a      	b.n	80075b0 <__gethex+0xf8>
 800773a:	4620      	mov	r0, r4
 800773c:	1e71      	subs	r1, r6, #1
 800773e:	f001 fd68 	bl	8009212 <__any_on>
 8007742:	2800      	cmp	r0, #0
 8007744:	d1ed      	bne.n	8007722 <__gethex+0x26a>
 8007746:	4621      	mov	r1, r4
 8007748:	9801      	ldr	r0, [sp, #4]
 800774a:	f001 f91d 	bl	8008988 <_Bfree>
 800774e:	2300      	movs	r3, #0
 8007750:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007752:	2550      	movs	r5, #80	@ 0x50
 8007754:	6013      	str	r3, [r2, #0]
 8007756:	e72b      	b.n	80075b0 <__gethex+0xf8>
 8007758:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1f3      	bne.n	8007746 <__gethex+0x28e>
 800775e:	e7e0      	b.n	8007722 <__gethex+0x26a>
 8007760:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1dd      	bne.n	8007722 <__gethex+0x26a>
 8007766:	e7ee      	b.n	8007746 <__gethex+0x28e>
 8007768:	080098a5 	.word	0x080098a5
 800776c:	08009a7d 	.word	0x08009a7d
 8007770:	08009a8e 	.word	0x08009a8e
 8007774:	1e6f      	subs	r7, r5, #1
 8007776:	f1b9 0f00 	cmp.w	r9, #0
 800777a:	d130      	bne.n	80077de <__gethex+0x326>
 800777c:	b127      	cbz	r7, 8007788 <__gethex+0x2d0>
 800777e:	4639      	mov	r1, r7
 8007780:	4620      	mov	r0, r4
 8007782:	f001 fd46 	bl	8009212 <__any_on>
 8007786:	4681      	mov	r9, r0
 8007788:	2301      	movs	r3, #1
 800778a:	4629      	mov	r1, r5
 800778c:	1b76      	subs	r6, r6, r5
 800778e:	2502      	movs	r5, #2
 8007790:	117a      	asrs	r2, r7, #5
 8007792:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007796:	f007 071f 	and.w	r7, r7, #31
 800779a:	40bb      	lsls	r3, r7
 800779c:	4213      	tst	r3, r2
 800779e:	4620      	mov	r0, r4
 80077a0:	bf18      	it	ne
 80077a2:	f049 0902 	orrne.w	r9, r9, #2
 80077a6:	f7ff fe1f 	bl	80073e8 <rshift>
 80077aa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80077ae:	f1b9 0f00 	cmp.w	r9, #0
 80077b2:	d047      	beq.n	8007844 <__gethex+0x38c>
 80077b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d015      	beq.n	80077e8 <__gethex+0x330>
 80077bc:	2b03      	cmp	r3, #3
 80077be:	d017      	beq.n	80077f0 <__gethex+0x338>
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d109      	bne.n	80077d8 <__gethex+0x320>
 80077c4:	f019 0f02 	tst.w	r9, #2
 80077c8:	d006      	beq.n	80077d8 <__gethex+0x320>
 80077ca:	f8da 3000 	ldr.w	r3, [sl]
 80077ce:	ea49 0903 	orr.w	r9, r9, r3
 80077d2:	f019 0f01 	tst.w	r9, #1
 80077d6:	d10e      	bne.n	80077f6 <__gethex+0x33e>
 80077d8:	f045 0510 	orr.w	r5, r5, #16
 80077dc:	e032      	b.n	8007844 <__gethex+0x38c>
 80077de:	f04f 0901 	mov.w	r9, #1
 80077e2:	e7d1      	b.n	8007788 <__gethex+0x2d0>
 80077e4:	2501      	movs	r5, #1
 80077e6:	e7e2      	b.n	80077ae <__gethex+0x2f6>
 80077e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077ea:	f1c3 0301 	rsb	r3, r3, #1
 80077ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 80077f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d0f0      	beq.n	80077d8 <__gethex+0x320>
 80077f6:	f04f 0c00 	mov.w	ip, #0
 80077fa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80077fe:	f104 0314 	add.w	r3, r4, #20
 8007802:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007806:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800780a:	4618      	mov	r0, r3
 800780c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007810:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8007814:	d01b      	beq.n	800784e <__gethex+0x396>
 8007816:	3201      	adds	r2, #1
 8007818:	6002      	str	r2, [r0, #0]
 800781a:	2d02      	cmp	r5, #2
 800781c:	f104 0314 	add.w	r3, r4, #20
 8007820:	d13c      	bne.n	800789c <__gethex+0x3e4>
 8007822:	f8d8 2000 	ldr.w	r2, [r8]
 8007826:	3a01      	subs	r2, #1
 8007828:	42b2      	cmp	r2, r6
 800782a:	d109      	bne.n	8007840 <__gethex+0x388>
 800782c:	2201      	movs	r2, #1
 800782e:	1171      	asrs	r1, r6, #5
 8007830:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007834:	f006 061f 	and.w	r6, r6, #31
 8007838:	fa02 f606 	lsl.w	r6, r2, r6
 800783c:	421e      	tst	r6, r3
 800783e:	d13a      	bne.n	80078b6 <__gethex+0x3fe>
 8007840:	f045 0520 	orr.w	r5, r5, #32
 8007844:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007846:	601c      	str	r4, [r3, #0]
 8007848:	9b02      	ldr	r3, [sp, #8]
 800784a:	601f      	str	r7, [r3, #0]
 800784c:	e6b0      	b.n	80075b0 <__gethex+0xf8>
 800784e:	4299      	cmp	r1, r3
 8007850:	f843 cc04 	str.w	ip, [r3, #-4]
 8007854:	d8d9      	bhi.n	800780a <__gethex+0x352>
 8007856:	68a3      	ldr	r3, [r4, #8]
 8007858:	459b      	cmp	fp, r3
 800785a:	db17      	blt.n	800788c <__gethex+0x3d4>
 800785c:	6861      	ldr	r1, [r4, #4]
 800785e:	9801      	ldr	r0, [sp, #4]
 8007860:	3101      	adds	r1, #1
 8007862:	f001 f851 	bl	8008908 <_Balloc>
 8007866:	4681      	mov	r9, r0
 8007868:	b918      	cbnz	r0, 8007872 <__gethex+0x3ba>
 800786a:	4602      	mov	r2, r0
 800786c:	2184      	movs	r1, #132	@ 0x84
 800786e:	4b19      	ldr	r3, [pc, #100]	@ (80078d4 <__gethex+0x41c>)
 8007870:	e6c5      	b.n	80075fe <__gethex+0x146>
 8007872:	6922      	ldr	r2, [r4, #16]
 8007874:	f104 010c 	add.w	r1, r4, #12
 8007878:	3202      	adds	r2, #2
 800787a:	0092      	lsls	r2, r2, #2
 800787c:	300c      	adds	r0, #12
 800787e:	f7fe ff00 	bl	8006682 <memcpy>
 8007882:	4621      	mov	r1, r4
 8007884:	9801      	ldr	r0, [sp, #4]
 8007886:	f001 f87f 	bl	8008988 <_Bfree>
 800788a:	464c      	mov	r4, r9
 800788c:	6923      	ldr	r3, [r4, #16]
 800788e:	1c5a      	adds	r2, r3, #1
 8007890:	6122      	str	r2, [r4, #16]
 8007892:	2201      	movs	r2, #1
 8007894:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007898:	615a      	str	r2, [r3, #20]
 800789a:	e7be      	b.n	800781a <__gethex+0x362>
 800789c:	6922      	ldr	r2, [r4, #16]
 800789e:	455a      	cmp	r2, fp
 80078a0:	dd0b      	ble.n	80078ba <__gethex+0x402>
 80078a2:	2101      	movs	r1, #1
 80078a4:	4620      	mov	r0, r4
 80078a6:	f7ff fd9f 	bl	80073e8 <rshift>
 80078aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80078ae:	3701      	adds	r7, #1
 80078b0:	42bb      	cmp	r3, r7
 80078b2:	f6ff aee0 	blt.w	8007676 <__gethex+0x1be>
 80078b6:	2501      	movs	r5, #1
 80078b8:	e7c2      	b.n	8007840 <__gethex+0x388>
 80078ba:	f016 061f 	ands.w	r6, r6, #31
 80078be:	d0fa      	beq.n	80078b6 <__gethex+0x3fe>
 80078c0:	4453      	add	r3, sl
 80078c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80078c6:	f001 f911 	bl	8008aec <__hi0bits>
 80078ca:	f1c6 0620 	rsb	r6, r6, #32
 80078ce:	42b0      	cmp	r0, r6
 80078d0:	dbe7      	blt.n	80078a2 <__gethex+0x3ea>
 80078d2:	e7f0      	b.n	80078b6 <__gethex+0x3fe>
 80078d4:	08009a7d 	.word	0x08009a7d

080078d8 <L_shift>:
 80078d8:	f1c2 0208 	rsb	r2, r2, #8
 80078dc:	0092      	lsls	r2, r2, #2
 80078de:	b570      	push	{r4, r5, r6, lr}
 80078e0:	f1c2 0620 	rsb	r6, r2, #32
 80078e4:	6843      	ldr	r3, [r0, #4]
 80078e6:	6804      	ldr	r4, [r0, #0]
 80078e8:	fa03 f506 	lsl.w	r5, r3, r6
 80078ec:	432c      	orrs	r4, r5
 80078ee:	40d3      	lsrs	r3, r2
 80078f0:	6004      	str	r4, [r0, #0]
 80078f2:	f840 3f04 	str.w	r3, [r0, #4]!
 80078f6:	4288      	cmp	r0, r1
 80078f8:	d3f4      	bcc.n	80078e4 <L_shift+0xc>
 80078fa:	bd70      	pop	{r4, r5, r6, pc}

080078fc <__match>:
 80078fc:	b530      	push	{r4, r5, lr}
 80078fe:	6803      	ldr	r3, [r0, #0]
 8007900:	3301      	adds	r3, #1
 8007902:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007906:	b914      	cbnz	r4, 800790e <__match+0x12>
 8007908:	6003      	str	r3, [r0, #0]
 800790a:	2001      	movs	r0, #1
 800790c:	bd30      	pop	{r4, r5, pc}
 800790e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007912:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007916:	2d19      	cmp	r5, #25
 8007918:	bf98      	it	ls
 800791a:	3220      	addls	r2, #32
 800791c:	42a2      	cmp	r2, r4
 800791e:	d0f0      	beq.n	8007902 <__match+0x6>
 8007920:	2000      	movs	r0, #0
 8007922:	e7f3      	b.n	800790c <__match+0x10>

08007924 <__hexnan>:
 8007924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007928:	2500      	movs	r5, #0
 800792a:	680b      	ldr	r3, [r1, #0]
 800792c:	4682      	mov	sl, r0
 800792e:	115e      	asrs	r6, r3, #5
 8007930:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007934:	f013 031f 	ands.w	r3, r3, #31
 8007938:	bf18      	it	ne
 800793a:	3604      	addne	r6, #4
 800793c:	1f37      	subs	r7, r6, #4
 800793e:	4690      	mov	r8, r2
 8007940:	46b9      	mov	r9, r7
 8007942:	463c      	mov	r4, r7
 8007944:	46ab      	mov	fp, r5
 8007946:	b087      	sub	sp, #28
 8007948:	6801      	ldr	r1, [r0, #0]
 800794a:	9301      	str	r3, [sp, #4]
 800794c:	f846 5c04 	str.w	r5, [r6, #-4]
 8007950:	9502      	str	r5, [sp, #8]
 8007952:	784a      	ldrb	r2, [r1, #1]
 8007954:	1c4b      	adds	r3, r1, #1
 8007956:	9303      	str	r3, [sp, #12]
 8007958:	b342      	cbz	r2, 80079ac <__hexnan+0x88>
 800795a:	4610      	mov	r0, r2
 800795c:	9105      	str	r1, [sp, #20]
 800795e:	9204      	str	r2, [sp, #16]
 8007960:	f7ff fd95 	bl	800748e <__hexdig_fun>
 8007964:	2800      	cmp	r0, #0
 8007966:	d151      	bne.n	8007a0c <__hexnan+0xe8>
 8007968:	9a04      	ldr	r2, [sp, #16]
 800796a:	9905      	ldr	r1, [sp, #20]
 800796c:	2a20      	cmp	r2, #32
 800796e:	d818      	bhi.n	80079a2 <__hexnan+0x7e>
 8007970:	9b02      	ldr	r3, [sp, #8]
 8007972:	459b      	cmp	fp, r3
 8007974:	dd13      	ble.n	800799e <__hexnan+0x7a>
 8007976:	454c      	cmp	r4, r9
 8007978:	d206      	bcs.n	8007988 <__hexnan+0x64>
 800797a:	2d07      	cmp	r5, #7
 800797c:	dc04      	bgt.n	8007988 <__hexnan+0x64>
 800797e:	462a      	mov	r2, r5
 8007980:	4649      	mov	r1, r9
 8007982:	4620      	mov	r0, r4
 8007984:	f7ff ffa8 	bl	80078d8 <L_shift>
 8007988:	4544      	cmp	r4, r8
 800798a:	d952      	bls.n	8007a32 <__hexnan+0x10e>
 800798c:	2300      	movs	r3, #0
 800798e:	f1a4 0904 	sub.w	r9, r4, #4
 8007992:	f844 3c04 	str.w	r3, [r4, #-4]
 8007996:	461d      	mov	r5, r3
 8007998:	464c      	mov	r4, r9
 800799a:	f8cd b008 	str.w	fp, [sp, #8]
 800799e:	9903      	ldr	r1, [sp, #12]
 80079a0:	e7d7      	b.n	8007952 <__hexnan+0x2e>
 80079a2:	2a29      	cmp	r2, #41	@ 0x29
 80079a4:	d157      	bne.n	8007a56 <__hexnan+0x132>
 80079a6:	3102      	adds	r1, #2
 80079a8:	f8ca 1000 	str.w	r1, [sl]
 80079ac:	f1bb 0f00 	cmp.w	fp, #0
 80079b0:	d051      	beq.n	8007a56 <__hexnan+0x132>
 80079b2:	454c      	cmp	r4, r9
 80079b4:	d206      	bcs.n	80079c4 <__hexnan+0xa0>
 80079b6:	2d07      	cmp	r5, #7
 80079b8:	dc04      	bgt.n	80079c4 <__hexnan+0xa0>
 80079ba:	462a      	mov	r2, r5
 80079bc:	4649      	mov	r1, r9
 80079be:	4620      	mov	r0, r4
 80079c0:	f7ff ff8a 	bl	80078d8 <L_shift>
 80079c4:	4544      	cmp	r4, r8
 80079c6:	d936      	bls.n	8007a36 <__hexnan+0x112>
 80079c8:	4623      	mov	r3, r4
 80079ca:	f1a8 0204 	sub.w	r2, r8, #4
 80079ce:	f853 1b04 	ldr.w	r1, [r3], #4
 80079d2:	429f      	cmp	r7, r3
 80079d4:	f842 1f04 	str.w	r1, [r2, #4]!
 80079d8:	d2f9      	bcs.n	80079ce <__hexnan+0xaa>
 80079da:	1b3b      	subs	r3, r7, r4
 80079dc:	f023 0303 	bic.w	r3, r3, #3
 80079e0:	3304      	adds	r3, #4
 80079e2:	3401      	adds	r4, #1
 80079e4:	3e03      	subs	r6, #3
 80079e6:	42b4      	cmp	r4, r6
 80079e8:	bf88      	it	hi
 80079ea:	2304      	movhi	r3, #4
 80079ec:	2200      	movs	r2, #0
 80079ee:	4443      	add	r3, r8
 80079f0:	f843 2b04 	str.w	r2, [r3], #4
 80079f4:	429f      	cmp	r7, r3
 80079f6:	d2fb      	bcs.n	80079f0 <__hexnan+0xcc>
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	b91b      	cbnz	r3, 8007a04 <__hexnan+0xe0>
 80079fc:	4547      	cmp	r7, r8
 80079fe:	d128      	bne.n	8007a52 <__hexnan+0x12e>
 8007a00:	2301      	movs	r3, #1
 8007a02:	603b      	str	r3, [r7, #0]
 8007a04:	2005      	movs	r0, #5
 8007a06:	b007      	add	sp, #28
 8007a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a0c:	3501      	adds	r5, #1
 8007a0e:	2d08      	cmp	r5, #8
 8007a10:	f10b 0b01 	add.w	fp, fp, #1
 8007a14:	dd06      	ble.n	8007a24 <__hexnan+0x100>
 8007a16:	4544      	cmp	r4, r8
 8007a18:	d9c1      	bls.n	800799e <__hexnan+0x7a>
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	2501      	movs	r5, #1
 8007a1e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a22:	3c04      	subs	r4, #4
 8007a24:	6822      	ldr	r2, [r4, #0]
 8007a26:	f000 000f 	and.w	r0, r0, #15
 8007a2a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007a2e:	6020      	str	r0, [r4, #0]
 8007a30:	e7b5      	b.n	800799e <__hexnan+0x7a>
 8007a32:	2508      	movs	r5, #8
 8007a34:	e7b3      	b.n	800799e <__hexnan+0x7a>
 8007a36:	9b01      	ldr	r3, [sp, #4]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d0dd      	beq.n	80079f8 <__hexnan+0xd4>
 8007a3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007a40:	f1c3 0320 	rsb	r3, r3, #32
 8007a44:	40da      	lsrs	r2, r3
 8007a46:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	f846 3c04 	str.w	r3, [r6, #-4]
 8007a50:	e7d2      	b.n	80079f8 <__hexnan+0xd4>
 8007a52:	3f04      	subs	r7, #4
 8007a54:	e7d0      	b.n	80079f8 <__hexnan+0xd4>
 8007a56:	2004      	movs	r0, #4
 8007a58:	e7d5      	b.n	8007a06 <__hexnan+0xe2>

08007a5a <__ssputs_r>:
 8007a5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a5e:	461f      	mov	r7, r3
 8007a60:	688e      	ldr	r6, [r1, #8]
 8007a62:	4682      	mov	sl, r0
 8007a64:	42be      	cmp	r6, r7
 8007a66:	460c      	mov	r4, r1
 8007a68:	4690      	mov	r8, r2
 8007a6a:	680b      	ldr	r3, [r1, #0]
 8007a6c:	d82d      	bhi.n	8007aca <__ssputs_r+0x70>
 8007a6e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a72:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007a76:	d026      	beq.n	8007ac6 <__ssputs_r+0x6c>
 8007a78:	6965      	ldr	r5, [r4, #20]
 8007a7a:	6909      	ldr	r1, [r1, #16]
 8007a7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a80:	eba3 0901 	sub.w	r9, r3, r1
 8007a84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a88:	1c7b      	adds	r3, r7, #1
 8007a8a:	444b      	add	r3, r9
 8007a8c:	106d      	asrs	r5, r5, #1
 8007a8e:	429d      	cmp	r5, r3
 8007a90:	bf38      	it	cc
 8007a92:	461d      	movcc	r5, r3
 8007a94:	0553      	lsls	r3, r2, #21
 8007a96:	d527      	bpl.n	8007ae8 <__ssputs_r+0x8e>
 8007a98:	4629      	mov	r1, r5
 8007a9a:	f000 fc69 	bl	8008370 <_malloc_r>
 8007a9e:	4606      	mov	r6, r0
 8007aa0:	b360      	cbz	r0, 8007afc <__ssputs_r+0xa2>
 8007aa2:	464a      	mov	r2, r9
 8007aa4:	6921      	ldr	r1, [r4, #16]
 8007aa6:	f7fe fdec 	bl	8006682 <memcpy>
 8007aaa:	89a3      	ldrh	r3, [r4, #12]
 8007aac:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007ab0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ab4:	81a3      	strh	r3, [r4, #12]
 8007ab6:	6126      	str	r6, [r4, #16]
 8007ab8:	444e      	add	r6, r9
 8007aba:	6026      	str	r6, [r4, #0]
 8007abc:	463e      	mov	r6, r7
 8007abe:	6165      	str	r5, [r4, #20]
 8007ac0:	eba5 0509 	sub.w	r5, r5, r9
 8007ac4:	60a5      	str	r5, [r4, #8]
 8007ac6:	42be      	cmp	r6, r7
 8007ac8:	d900      	bls.n	8007acc <__ssputs_r+0x72>
 8007aca:	463e      	mov	r6, r7
 8007acc:	4632      	mov	r2, r6
 8007ace:	4641      	mov	r1, r8
 8007ad0:	6820      	ldr	r0, [r4, #0]
 8007ad2:	f001 fd97 	bl	8009604 <memmove>
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	68a3      	ldr	r3, [r4, #8]
 8007ada:	1b9b      	subs	r3, r3, r6
 8007adc:	60a3      	str	r3, [r4, #8]
 8007ade:	6823      	ldr	r3, [r4, #0]
 8007ae0:	4433      	add	r3, r6
 8007ae2:	6023      	str	r3, [r4, #0]
 8007ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ae8:	462a      	mov	r2, r5
 8007aea:	f001 fbeb 	bl	80092c4 <_realloc_r>
 8007aee:	4606      	mov	r6, r0
 8007af0:	2800      	cmp	r0, #0
 8007af2:	d1e0      	bne.n	8007ab6 <__ssputs_r+0x5c>
 8007af4:	4650      	mov	r0, sl
 8007af6:	6921      	ldr	r1, [r4, #16]
 8007af8:	f7ff fc2e 	bl	8007358 <_free_r>
 8007afc:	230c      	movs	r3, #12
 8007afe:	f8ca 3000 	str.w	r3, [sl]
 8007b02:	89a3      	ldrh	r3, [r4, #12]
 8007b04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b0c:	81a3      	strh	r3, [r4, #12]
 8007b0e:	e7e9      	b.n	8007ae4 <__ssputs_r+0x8a>

08007b10 <_svfiprintf_r>:
 8007b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b14:	4698      	mov	r8, r3
 8007b16:	898b      	ldrh	r3, [r1, #12]
 8007b18:	4607      	mov	r7, r0
 8007b1a:	061b      	lsls	r3, r3, #24
 8007b1c:	460d      	mov	r5, r1
 8007b1e:	4614      	mov	r4, r2
 8007b20:	b09d      	sub	sp, #116	@ 0x74
 8007b22:	d510      	bpl.n	8007b46 <_svfiprintf_r+0x36>
 8007b24:	690b      	ldr	r3, [r1, #16]
 8007b26:	b973      	cbnz	r3, 8007b46 <_svfiprintf_r+0x36>
 8007b28:	2140      	movs	r1, #64	@ 0x40
 8007b2a:	f000 fc21 	bl	8008370 <_malloc_r>
 8007b2e:	6028      	str	r0, [r5, #0]
 8007b30:	6128      	str	r0, [r5, #16]
 8007b32:	b930      	cbnz	r0, 8007b42 <_svfiprintf_r+0x32>
 8007b34:	230c      	movs	r3, #12
 8007b36:	603b      	str	r3, [r7, #0]
 8007b38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b3c:	b01d      	add	sp, #116	@ 0x74
 8007b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b42:	2340      	movs	r3, #64	@ 0x40
 8007b44:	616b      	str	r3, [r5, #20]
 8007b46:	2300      	movs	r3, #0
 8007b48:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b4a:	2320      	movs	r3, #32
 8007b4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b50:	2330      	movs	r3, #48	@ 0x30
 8007b52:	f04f 0901 	mov.w	r9, #1
 8007b56:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b5a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007cf4 <_svfiprintf_r+0x1e4>
 8007b5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b62:	4623      	mov	r3, r4
 8007b64:	469a      	mov	sl, r3
 8007b66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b6a:	b10a      	cbz	r2, 8007b70 <_svfiprintf_r+0x60>
 8007b6c:	2a25      	cmp	r2, #37	@ 0x25
 8007b6e:	d1f9      	bne.n	8007b64 <_svfiprintf_r+0x54>
 8007b70:	ebba 0b04 	subs.w	fp, sl, r4
 8007b74:	d00b      	beq.n	8007b8e <_svfiprintf_r+0x7e>
 8007b76:	465b      	mov	r3, fp
 8007b78:	4622      	mov	r2, r4
 8007b7a:	4629      	mov	r1, r5
 8007b7c:	4638      	mov	r0, r7
 8007b7e:	f7ff ff6c 	bl	8007a5a <__ssputs_r>
 8007b82:	3001      	adds	r0, #1
 8007b84:	f000 80a7 	beq.w	8007cd6 <_svfiprintf_r+0x1c6>
 8007b88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b8a:	445a      	add	r2, fp
 8007b8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b8e:	f89a 3000 	ldrb.w	r3, [sl]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f000 809f 	beq.w	8007cd6 <_svfiprintf_r+0x1c6>
 8007b98:	2300      	movs	r3, #0
 8007b9a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007b9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ba2:	f10a 0a01 	add.w	sl, sl, #1
 8007ba6:	9304      	str	r3, [sp, #16]
 8007ba8:	9307      	str	r3, [sp, #28]
 8007baa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007bae:	931a      	str	r3, [sp, #104]	@ 0x68
 8007bb0:	4654      	mov	r4, sl
 8007bb2:	2205      	movs	r2, #5
 8007bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bb8:	484e      	ldr	r0, [pc, #312]	@ (8007cf4 <_svfiprintf_r+0x1e4>)
 8007bba:	f7fe fd54 	bl	8006666 <memchr>
 8007bbe:	9a04      	ldr	r2, [sp, #16]
 8007bc0:	b9d8      	cbnz	r0, 8007bfa <_svfiprintf_r+0xea>
 8007bc2:	06d0      	lsls	r0, r2, #27
 8007bc4:	bf44      	itt	mi
 8007bc6:	2320      	movmi	r3, #32
 8007bc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007bcc:	0711      	lsls	r1, r2, #28
 8007bce:	bf44      	itt	mi
 8007bd0:	232b      	movmi	r3, #43	@ 0x2b
 8007bd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007bd6:	f89a 3000 	ldrb.w	r3, [sl]
 8007bda:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bdc:	d015      	beq.n	8007c0a <_svfiprintf_r+0xfa>
 8007bde:	4654      	mov	r4, sl
 8007be0:	2000      	movs	r0, #0
 8007be2:	f04f 0c0a 	mov.w	ip, #10
 8007be6:	9a07      	ldr	r2, [sp, #28]
 8007be8:	4621      	mov	r1, r4
 8007bea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bee:	3b30      	subs	r3, #48	@ 0x30
 8007bf0:	2b09      	cmp	r3, #9
 8007bf2:	d94b      	bls.n	8007c8c <_svfiprintf_r+0x17c>
 8007bf4:	b1b0      	cbz	r0, 8007c24 <_svfiprintf_r+0x114>
 8007bf6:	9207      	str	r2, [sp, #28]
 8007bf8:	e014      	b.n	8007c24 <_svfiprintf_r+0x114>
 8007bfa:	eba0 0308 	sub.w	r3, r0, r8
 8007bfe:	fa09 f303 	lsl.w	r3, r9, r3
 8007c02:	4313      	orrs	r3, r2
 8007c04:	46a2      	mov	sl, r4
 8007c06:	9304      	str	r3, [sp, #16]
 8007c08:	e7d2      	b.n	8007bb0 <_svfiprintf_r+0xa0>
 8007c0a:	9b03      	ldr	r3, [sp, #12]
 8007c0c:	1d19      	adds	r1, r3, #4
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	9103      	str	r1, [sp, #12]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	bfbb      	ittet	lt
 8007c16:	425b      	neglt	r3, r3
 8007c18:	f042 0202 	orrlt.w	r2, r2, #2
 8007c1c:	9307      	strge	r3, [sp, #28]
 8007c1e:	9307      	strlt	r3, [sp, #28]
 8007c20:	bfb8      	it	lt
 8007c22:	9204      	strlt	r2, [sp, #16]
 8007c24:	7823      	ldrb	r3, [r4, #0]
 8007c26:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c28:	d10a      	bne.n	8007c40 <_svfiprintf_r+0x130>
 8007c2a:	7863      	ldrb	r3, [r4, #1]
 8007c2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c2e:	d132      	bne.n	8007c96 <_svfiprintf_r+0x186>
 8007c30:	9b03      	ldr	r3, [sp, #12]
 8007c32:	3402      	adds	r4, #2
 8007c34:	1d1a      	adds	r2, r3, #4
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	9203      	str	r2, [sp, #12]
 8007c3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c3e:	9305      	str	r3, [sp, #20]
 8007c40:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007cf8 <_svfiprintf_r+0x1e8>
 8007c44:	2203      	movs	r2, #3
 8007c46:	4650      	mov	r0, sl
 8007c48:	7821      	ldrb	r1, [r4, #0]
 8007c4a:	f7fe fd0c 	bl	8006666 <memchr>
 8007c4e:	b138      	cbz	r0, 8007c60 <_svfiprintf_r+0x150>
 8007c50:	2240      	movs	r2, #64	@ 0x40
 8007c52:	9b04      	ldr	r3, [sp, #16]
 8007c54:	eba0 000a 	sub.w	r0, r0, sl
 8007c58:	4082      	lsls	r2, r0
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	3401      	adds	r4, #1
 8007c5e:	9304      	str	r3, [sp, #16]
 8007c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c64:	2206      	movs	r2, #6
 8007c66:	4825      	ldr	r0, [pc, #148]	@ (8007cfc <_svfiprintf_r+0x1ec>)
 8007c68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c6c:	f7fe fcfb 	bl	8006666 <memchr>
 8007c70:	2800      	cmp	r0, #0
 8007c72:	d036      	beq.n	8007ce2 <_svfiprintf_r+0x1d2>
 8007c74:	4b22      	ldr	r3, [pc, #136]	@ (8007d00 <_svfiprintf_r+0x1f0>)
 8007c76:	bb1b      	cbnz	r3, 8007cc0 <_svfiprintf_r+0x1b0>
 8007c78:	9b03      	ldr	r3, [sp, #12]
 8007c7a:	3307      	adds	r3, #7
 8007c7c:	f023 0307 	bic.w	r3, r3, #7
 8007c80:	3308      	adds	r3, #8
 8007c82:	9303      	str	r3, [sp, #12]
 8007c84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c86:	4433      	add	r3, r6
 8007c88:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c8a:	e76a      	b.n	8007b62 <_svfiprintf_r+0x52>
 8007c8c:	460c      	mov	r4, r1
 8007c8e:	2001      	movs	r0, #1
 8007c90:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c94:	e7a8      	b.n	8007be8 <_svfiprintf_r+0xd8>
 8007c96:	2300      	movs	r3, #0
 8007c98:	f04f 0c0a 	mov.w	ip, #10
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	3401      	adds	r4, #1
 8007ca0:	9305      	str	r3, [sp, #20]
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ca8:	3a30      	subs	r2, #48	@ 0x30
 8007caa:	2a09      	cmp	r2, #9
 8007cac:	d903      	bls.n	8007cb6 <_svfiprintf_r+0x1a6>
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d0c6      	beq.n	8007c40 <_svfiprintf_r+0x130>
 8007cb2:	9105      	str	r1, [sp, #20]
 8007cb4:	e7c4      	b.n	8007c40 <_svfiprintf_r+0x130>
 8007cb6:	4604      	mov	r4, r0
 8007cb8:	2301      	movs	r3, #1
 8007cba:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cbe:	e7f0      	b.n	8007ca2 <_svfiprintf_r+0x192>
 8007cc0:	ab03      	add	r3, sp, #12
 8007cc2:	9300      	str	r3, [sp, #0]
 8007cc4:	462a      	mov	r2, r5
 8007cc6:	4638      	mov	r0, r7
 8007cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8007d04 <_svfiprintf_r+0x1f4>)
 8007cca:	a904      	add	r1, sp, #16
 8007ccc:	f7fc fe8a 	bl	80049e4 <_printf_float>
 8007cd0:	1c42      	adds	r2, r0, #1
 8007cd2:	4606      	mov	r6, r0
 8007cd4:	d1d6      	bne.n	8007c84 <_svfiprintf_r+0x174>
 8007cd6:	89ab      	ldrh	r3, [r5, #12]
 8007cd8:	065b      	lsls	r3, r3, #25
 8007cda:	f53f af2d 	bmi.w	8007b38 <_svfiprintf_r+0x28>
 8007cde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ce0:	e72c      	b.n	8007b3c <_svfiprintf_r+0x2c>
 8007ce2:	ab03      	add	r3, sp, #12
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	462a      	mov	r2, r5
 8007ce8:	4638      	mov	r0, r7
 8007cea:	4b06      	ldr	r3, [pc, #24]	@ (8007d04 <_svfiprintf_r+0x1f4>)
 8007cec:	a904      	add	r1, sp, #16
 8007cee:	f7fd f917 	bl	8004f20 <_printf_i>
 8007cf2:	e7ed      	b.n	8007cd0 <_svfiprintf_r+0x1c0>
 8007cf4:	08009aee 	.word	0x08009aee
 8007cf8:	08009af4 	.word	0x08009af4
 8007cfc:	08009af8 	.word	0x08009af8
 8007d00:	080049e5 	.word	0x080049e5
 8007d04:	08007a5b 	.word	0x08007a5b

08007d08 <_sungetc_r>:
 8007d08:	b538      	push	{r3, r4, r5, lr}
 8007d0a:	1c4b      	adds	r3, r1, #1
 8007d0c:	4614      	mov	r4, r2
 8007d0e:	d103      	bne.n	8007d18 <_sungetc_r+0x10>
 8007d10:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007d14:	4628      	mov	r0, r5
 8007d16:	bd38      	pop	{r3, r4, r5, pc}
 8007d18:	8993      	ldrh	r3, [r2, #12]
 8007d1a:	b2cd      	uxtb	r5, r1
 8007d1c:	f023 0320 	bic.w	r3, r3, #32
 8007d20:	8193      	strh	r3, [r2, #12]
 8007d22:	6853      	ldr	r3, [r2, #4]
 8007d24:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007d26:	b18a      	cbz	r2, 8007d4c <_sungetc_r+0x44>
 8007d28:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	dd08      	ble.n	8007d40 <_sungetc_r+0x38>
 8007d2e:	6823      	ldr	r3, [r4, #0]
 8007d30:	1e5a      	subs	r2, r3, #1
 8007d32:	6022      	str	r2, [r4, #0]
 8007d34:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007d38:	6863      	ldr	r3, [r4, #4]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	6063      	str	r3, [r4, #4]
 8007d3e:	e7e9      	b.n	8007d14 <_sungetc_r+0xc>
 8007d40:	4621      	mov	r1, r4
 8007d42:	f001 fa87 	bl	8009254 <__submore>
 8007d46:	2800      	cmp	r0, #0
 8007d48:	d0f1      	beq.n	8007d2e <_sungetc_r+0x26>
 8007d4a:	e7e1      	b.n	8007d10 <_sungetc_r+0x8>
 8007d4c:	6921      	ldr	r1, [r4, #16]
 8007d4e:	6822      	ldr	r2, [r4, #0]
 8007d50:	b141      	cbz	r1, 8007d64 <_sungetc_r+0x5c>
 8007d52:	4291      	cmp	r1, r2
 8007d54:	d206      	bcs.n	8007d64 <_sungetc_r+0x5c>
 8007d56:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8007d5a:	42a9      	cmp	r1, r5
 8007d5c:	d102      	bne.n	8007d64 <_sungetc_r+0x5c>
 8007d5e:	3a01      	subs	r2, #1
 8007d60:	6022      	str	r2, [r4, #0]
 8007d62:	e7ea      	b.n	8007d3a <_sungetc_r+0x32>
 8007d64:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8007d68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d6e:	2303      	movs	r3, #3
 8007d70:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007d72:	4623      	mov	r3, r4
 8007d74:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007d78:	6023      	str	r3, [r4, #0]
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e7de      	b.n	8007d3c <_sungetc_r+0x34>

08007d7e <__ssrefill_r>:
 8007d7e:	b510      	push	{r4, lr}
 8007d80:	460c      	mov	r4, r1
 8007d82:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8007d84:	b169      	cbz	r1, 8007da2 <__ssrefill_r+0x24>
 8007d86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d8a:	4299      	cmp	r1, r3
 8007d8c:	d001      	beq.n	8007d92 <__ssrefill_r+0x14>
 8007d8e:	f7ff fae3 	bl	8007358 <_free_r>
 8007d92:	2000      	movs	r0, #0
 8007d94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007d96:	6360      	str	r0, [r4, #52]	@ 0x34
 8007d98:	6063      	str	r3, [r4, #4]
 8007d9a:	b113      	cbz	r3, 8007da2 <__ssrefill_r+0x24>
 8007d9c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007d9e:	6023      	str	r3, [r4, #0]
 8007da0:	bd10      	pop	{r4, pc}
 8007da2:	6923      	ldr	r3, [r4, #16]
 8007da4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007da8:	6023      	str	r3, [r4, #0]
 8007daa:	2300      	movs	r3, #0
 8007dac:	6063      	str	r3, [r4, #4]
 8007dae:	89a3      	ldrh	r3, [r4, #12]
 8007db0:	f043 0320 	orr.w	r3, r3, #32
 8007db4:	81a3      	strh	r3, [r4, #12]
 8007db6:	e7f3      	b.n	8007da0 <__ssrefill_r+0x22>

08007db8 <__ssvfiscanf_r>:
 8007db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dbc:	460c      	mov	r4, r1
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	4606      	mov	r6, r0
 8007dc2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8007dc6:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8007dca:	49aa      	ldr	r1, [pc, #680]	@ (8008074 <__ssvfiscanf_r+0x2bc>)
 8007dcc:	f10d 0804 	add.w	r8, sp, #4
 8007dd0:	91a0      	str	r1, [sp, #640]	@ 0x280
 8007dd2:	49a9      	ldr	r1, [pc, #676]	@ (8008078 <__ssvfiscanf_r+0x2c0>)
 8007dd4:	4fa9      	ldr	r7, [pc, #676]	@ (800807c <__ssvfiscanf_r+0x2c4>)
 8007dd6:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8007dda:	91a1      	str	r1, [sp, #644]	@ 0x284
 8007ddc:	9300      	str	r3, [sp, #0]
 8007dde:	7813      	ldrb	r3, [r2, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f000 8159 	beq.w	8008098 <__ssvfiscanf_r+0x2e0>
 8007de6:	5cf9      	ldrb	r1, [r7, r3]
 8007de8:	1c55      	adds	r5, r2, #1
 8007dea:	f011 0108 	ands.w	r1, r1, #8
 8007dee:	d019      	beq.n	8007e24 <__ssvfiscanf_r+0x6c>
 8007df0:	6863      	ldr	r3, [r4, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	dd0f      	ble.n	8007e16 <__ssvfiscanf_r+0x5e>
 8007df6:	6823      	ldr	r3, [r4, #0]
 8007df8:	781a      	ldrb	r2, [r3, #0]
 8007dfa:	5cba      	ldrb	r2, [r7, r2]
 8007dfc:	0712      	lsls	r2, r2, #28
 8007dfe:	d401      	bmi.n	8007e04 <__ssvfiscanf_r+0x4c>
 8007e00:	462a      	mov	r2, r5
 8007e02:	e7ec      	b.n	8007dde <__ssvfiscanf_r+0x26>
 8007e04:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007e06:	3301      	adds	r3, #1
 8007e08:	3201      	adds	r2, #1
 8007e0a:	9245      	str	r2, [sp, #276]	@ 0x114
 8007e0c:	6862      	ldr	r2, [r4, #4]
 8007e0e:	6023      	str	r3, [r4, #0]
 8007e10:	3a01      	subs	r2, #1
 8007e12:	6062      	str	r2, [r4, #4]
 8007e14:	e7ec      	b.n	8007df0 <__ssvfiscanf_r+0x38>
 8007e16:	4621      	mov	r1, r4
 8007e18:	4630      	mov	r0, r6
 8007e1a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007e1c:	4798      	blx	r3
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	d0e9      	beq.n	8007df6 <__ssvfiscanf_r+0x3e>
 8007e22:	e7ed      	b.n	8007e00 <__ssvfiscanf_r+0x48>
 8007e24:	2b25      	cmp	r3, #37	@ 0x25
 8007e26:	d012      	beq.n	8007e4e <__ssvfiscanf_r+0x96>
 8007e28:	4699      	mov	r9, r3
 8007e2a:	6863      	ldr	r3, [r4, #4]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f340 8094 	ble.w	8007f5a <__ssvfiscanf_r+0x1a2>
 8007e32:	6822      	ldr	r2, [r4, #0]
 8007e34:	7813      	ldrb	r3, [r2, #0]
 8007e36:	454b      	cmp	r3, r9
 8007e38:	f040 812e 	bne.w	8008098 <__ssvfiscanf_r+0x2e0>
 8007e3c:	6863      	ldr	r3, [r4, #4]
 8007e3e:	3201      	adds	r2, #1
 8007e40:	3b01      	subs	r3, #1
 8007e42:	6063      	str	r3, [r4, #4]
 8007e44:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8007e46:	6022      	str	r2, [r4, #0]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	9345      	str	r3, [sp, #276]	@ 0x114
 8007e4c:	e7d8      	b.n	8007e00 <__ssvfiscanf_r+0x48>
 8007e4e:	9141      	str	r1, [sp, #260]	@ 0x104
 8007e50:	9143      	str	r1, [sp, #268]	@ 0x10c
 8007e52:	7853      	ldrb	r3, [r2, #1]
 8007e54:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e56:	bf04      	itt	eq
 8007e58:	2310      	moveq	r3, #16
 8007e5a:	1c95      	addeq	r5, r2, #2
 8007e5c:	f04f 020a 	mov.w	r2, #10
 8007e60:	bf08      	it	eq
 8007e62:	9341      	streq	r3, [sp, #260]	@ 0x104
 8007e64:	46a9      	mov	r9, r5
 8007e66:	f819 1b01 	ldrb.w	r1, [r9], #1
 8007e6a:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8007e6e:	2b09      	cmp	r3, #9
 8007e70:	d91e      	bls.n	8007eb0 <__ssvfiscanf_r+0xf8>
 8007e72:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 8008080 <__ssvfiscanf_r+0x2c8>
 8007e76:	2203      	movs	r2, #3
 8007e78:	4650      	mov	r0, sl
 8007e7a:	f7fe fbf4 	bl	8006666 <memchr>
 8007e7e:	b138      	cbz	r0, 8007e90 <__ssvfiscanf_r+0xd8>
 8007e80:	2301      	movs	r3, #1
 8007e82:	464d      	mov	r5, r9
 8007e84:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007e86:	eba0 000a 	sub.w	r0, r0, sl
 8007e8a:	4083      	lsls	r3, r0
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	9341      	str	r3, [sp, #260]	@ 0x104
 8007e90:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007e94:	2b78      	cmp	r3, #120	@ 0x78
 8007e96:	d806      	bhi.n	8007ea6 <__ssvfiscanf_r+0xee>
 8007e98:	2b57      	cmp	r3, #87	@ 0x57
 8007e9a:	d810      	bhi.n	8007ebe <__ssvfiscanf_r+0x106>
 8007e9c:	2b25      	cmp	r3, #37	@ 0x25
 8007e9e:	d0c3      	beq.n	8007e28 <__ssvfiscanf_r+0x70>
 8007ea0:	d856      	bhi.n	8007f50 <__ssvfiscanf_r+0x198>
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d064      	beq.n	8007f70 <__ssvfiscanf_r+0x1b8>
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	9347      	str	r3, [sp, #284]	@ 0x11c
 8007eaa:	230a      	movs	r3, #10
 8007eac:	9342      	str	r3, [sp, #264]	@ 0x108
 8007eae:	e077      	b.n	8007fa0 <__ssvfiscanf_r+0x1e8>
 8007eb0:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8007eb2:	464d      	mov	r5, r9
 8007eb4:	fb02 1103 	mla	r1, r2, r3, r1
 8007eb8:	3930      	subs	r1, #48	@ 0x30
 8007eba:	9143      	str	r1, [sp, #268]	@ 0x10c
 8007ebc:	e7d2      	b.n	8007e64 <__ssvfiscanf_r+0xac>
 8007ebe:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8007ec2:	2a20      	cmp	r2, #32
 8007ec4:	d8ef      	bhi.n	8007ea6 <__ssvfiscanf_r+0xee>
 8007ec6:	a101      	add	r1, pc, #4	@ (adr r1, 8007ecc <__ssvfiscanf_r+0x114>)
 8007ec8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007ecc:	08007f7f 	.word	0x08007f7f
 8007ed0:	08007ea7 	.word	0x08007ea7
 8007ed4:	08007ea7 	.word	0x08007ea7
 8007ed8:	08007fd9 	.word	0x08007fd9
 8007edc:	08007ea7 	.word	0x08007ea7
 8007ee0:	08007ea7 	.word	0x08007ea7
 8007ee4:	08007ea7 	.word	0x08007ea7
 8007ee8:	08007ea7 	.word	0x08007ea7
 8007eec:	08007ea7 	.word	0x08007ea7
 8007ef0:	08007ea7 	.word	0x08007ea7
 8007ef4:	08007ea7 	.word	0x08007ea7
 8007ef8:	08007fef 	.word	0x08007fef
 8007efc:	08007fd5 	.word	0x08007fd5
 8007f00:	08007f57 	.word	0x08007f57
 8007f04:	08007f57 	.word	0x08007f57
 8007f08:	08007f57 	.word	0x08007f57
 8007f0c:	08007ea7 	.word	0x08007ea7
 8007f10:	08007f91 	.word	0x08007f91
 8007f14:	08007ea7 	.word	0x08007ea7
 8007f18:	08007ea7 	.word	0x08007ea7
 8007f1c:	08007ea7 	.word	0x08007ea7
 8007f20:	08007ea7 	.word	0x08007ea7
 8007f24:	08007fff 	.word	0x08007fff
 8007f28:	08007f99 	.word	0x08007f99
 8007f2c:	08007f77 	.word	0x08007f77
 8007f30:	08007ea7 	.word	0x08007ea7
 8007f34:	08007ea7 	.word	0x08007ea7
 8007f38:	08007ffb 	.word	0x08007ffb
 8007f3c:	08007ea7 	.word	0x08007ea7
 8007f40:	08007fd5 	.word	0x08007fd5
 8007f44:	08007ea7 	.word	0x08007ea7
 8007f48:	08007ea7 	.word	0x08007ea7
 8007f4c:	08007f7f 	.word	0x08007f7f
 8007f50:	3b45      	subs	r3, #69	@ 0x45
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d8a7      	bhi.n	8007ea6 <__ssvfiscanf_r+0xee>
 8007f56:	2305      	movs	r3, #5
 8007f58:	e021      	b.n	8007f9e <__ssvfiscanf_r+0x1e6>
 8007f5a:	4621      	mov	r1, r4
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007f60:	4798      	blx	r3
 8007f62:	2800      	cmp	r0, #0
 8007f64:	f43f af65 	beq.w	8007e32 <__ssvfiscanf_r+0x7a>
 8007f68:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	f040 808c 	bne.w	8008088 <__ssvfiscanf_r+0x2d0>
 8007f70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f74:	e08c      	b.n	8008090 <__ssvfiscanf_r+0x2d8>
 8007f76:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007f78:	f042 0220 	orr.w	r2, r2, #32
 8007f7c:	9241      	str	r2, [sp, #260]	@ 0x104
 8007f7e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007f80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f84:	9241      	str	r2, [sp, #260]	@ 0x104
 8007f86:	2210      	movs	r2, #16
 8007f88:	2b6e      	cmp	r3, #110	@ 0x6e
 8007f8a:	9242      	str	r2, [sp, #264]	@ 0x108
 8007f8c:	d902      	bls.n	8007f94 <__ssvfiscanf_r+0x1dc>
 8007f8e:	e005      	b.n	8007f9c <__ssvfiscanf_r+0x1e4>
 8007f90:	2300      	movs	r3, #0
 8007f92:	9342      	str	r3, [sp, #264]	@ 0x108
 8007f94:	2303      	movs	r3, #3
 8007f96:	e002      	b.n	8007f9e <__ssvfiscanf_r+0x1e6>
 8007f98:	2308      	movs	r3, #8
 8007f9a:	9342      	str	r3, [sp, #264]	@ 0x108
 8007f9c:	2304      	movs	r3, #4
 8007f9e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8007fa0:	6863      	ldr	r3, [r4, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	dd39      	ble.n	800801a <__ssvfiscanf_r+0x262>
 8007fa6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007fa8:	0659      	lsls	r1, r3, #25
 8007faa:	d404      	bmi.n	8007fb6 <__ssvfiscanf_r+0x1fe>
 8007fac:	6823      	ldr	r3, [r4, #0]
 8007fae:	781a      	ldrb	r2, [r3, #0]
 8007fb0:	5cba      	ldrb	r2, [r7, r2]
 8007fb2:	0712      	lsls	r2, r2, #28
 8007fb4:	d438      	bmi.n	8008028 <__ssvfiscanf_r+0x270>
 8007fb6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	dc47      	bgt.n	800804c <__ssvfiscanf_r+0x294>
 8007fbc:	466b      	mov	r3, sp
 8007fbe:	4622      	mov	r2, r4
 8007fc0:	4630      	mov	r0, r6
 8007fc2:	a941      	add	r1, sp, #260	@ 0x104
 8007fc4:	f000 fa66 	bl	8008494 <_scanf_chars>
 8007fc8:	2801      	cmp	r0, #1
 8007fca:	d065      	beq.n	8008098 <__ssvfiscanf_r+0x2e0>
 8007fcc:	2802      	cmp	r0, #2
 8007fce:	f47f af17 	bne.w	8007e00 <__ssvfiscanf_r+0x48>
 8007fd2:	e7c9      	b.n	8007f68 <__ssvfiscanf_r+0x1b0>
 8007fd4:	220a      	movs	r2, #10
 8007fd6:	e7d7      	b.n	8007f88 <__ssvfiscanf_r+0x1d0>
 8007fd8:	4629      	mov	r1, r5
 8007fda:	4640      	mov	r0, r8
 8007fdc:	f000 fba6 	bl	800872c <__sccl>
 8007fe0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007fe2:	4605      	mov	r5, r0
 8007fe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fe8:	9341      	str	r3, [sp, #260]	@ 0x104
 8007fea:	2301      	movs	r3, #1
 8007fec:	e7d7      	b.n	8007f9e <__ssvfiscanf_r+0x1e6>
 8007fee:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007ff0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ff4:	9341      	str	r3, [sp, #260]	@ 0x104
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	e7d1      	b.n	8007f9e <__ssvfiscanf_r+0x1e6>
 8007ffa:	2302      	movs	r3, #2
 8007ffc:	e7cf      	b.n	8007f9e <__ssvfiscanf_r+0x1e6>
 8007ffe:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8008000:	06c3      	lsls	r3, r0, #27
 8008002:	f53f aefd 	bmi.w	8007e00 <__ssvfiscanf_r+0x48>
 8008006:	9b00      	ldr	r3, [sp, #0]
 8008008:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800800a:	1d19      	adds	r1, r3, #4
 800800c:	9100      	str	r1, [sp, #0]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	07c0      	lsls	r0, r0, #31
 8008012:	bf4c      	ite	mi
 8008014:	801a      	strhmi	r2, [r3, #0]
 8008016:	601a      	strpl	r2, [r3, #0]
 8008018:	e6f2      	b.n	8007e00 <__ssvfiscanf_r+0x48>
 800801a:	4621      	mov	r1, r4
 800801c:	4630      	mov	r0, r6
 800801e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008020:	4798      	blx	r3
 8008022:	2800      	cmp	r0, #0
 8008024:	d0bf      	beq.n	8007fa6 <__ssvfiscanf_r+0x1ee>
 8008026:	e79f      	b.n	8007f68 <__ssvfiscanf_r+0x1b0>
 8008028:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800802a:	3201      	adds	r2, #1
 800802c:	9245      	str	r2, [sp, #276]	@ 0x114
 800802e:	6862      	ldr	r2, [r4, #4]
 8008030:	3a01      	subs	r2, #1
 8008032:	2a00      	cmp	r2, #0
 8008034:	6062      	str	r2, [r4, #4]
 8008036:	dd02      	ble.n	800803e <__ssvfiscanf_r+0x286>
 8008038:	3301      	adds	r3, #1
 800803a:	6023      	str	r3, [r4, #0]
 800803c:	e7b6      	b.n	8007fac <__ssvfiscanf_r+0x1f4>
 800803e:	4621      	mov	r1, r4
 8008040:	4630      	mov	r0, r6
 8008042:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008044:	4798      	blx	r3
 8008046:	2800      	cmp	r0, #0
 8008048:	d0b0      	beq.n	8007fac <__ssvfiscanf_r+0x1f4>
 800804a:	e78d      	b.n	8007f68 <__ssvfiscanf_r+0x1b0>
 800804c:	2b04      	cmp	r3, #4
 800804e:	dc06      	bgt.n	800805e <__ssvfiscanf_r+0x2a6>
 8008050:	466b      	mov	r3, sp
 8008052:	4622      	mov	r2, r4
 8008054:	4630      	mov	r0, r6
 8008056:	a941      	add	r1, sp, #260	@ 0x104
 8008058:	f000 fa76 	bl	8008548 <_scanf_i>
 800805c:	e7b4      	b.n	8007fc8 <__ssvfiscanf_r+0x210>
 800805e:	4b09      	ldr	r3, [pc, #36]	@ (8008084 <__ssvfiscanf_r+0x2cc>)
 8008060:	2b00      	cmp	r3, #0
 8008062:	f43f aecd 	beq.w	8007e00 <__ssvfiscanf_r+0x48>
 8008066:	466b      	mov	r3, sp
 8008068:	4622      	mov	r2, r4
 800806a:	4630      	mov	r0, r6
 800806c:	a941      	add	r1, sp, #260	@ 0x104
 800806e:	f7fd f877 	bl	8005160 <_scanf_float>
 8008072:	e7a9      	b.n	8007fc8 <__ssvfiscanf_r+0x210>
 8008074:	08007d09 	.word	0x08007d09
 8008078:	08007d7f 	.word	0x08007d7f
 800807c:	08009901 	.word	0x08009901
 8008080:	08009af4 	.word	0x08009af4
 8008084:	08005161 	.word	0x08005161
 8008088:	89a3      	ldrh	r3, [r4, #12]
 800808a:	065b      	lsls	r3, r3, #25
 800808c:	f53f af70 	bmi.w	8007f70 <__ssvfiscanf_r+0x1b8>
 8008090:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8008094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008098:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800809a:	e7f9      	b.n	8008090 <__ssvfiscanf_r+0x2d8>

0800809c <__sfputc_r>:
 800809c:	6893      	ldr	r3, [r2, #8]
 800809e:	b410      	push	{r4}
 80080a0:	3b01      	subs	r3, #1
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	6093      	str	r3, [r2, #8]
 80080a6:	da07      	bge.n	80080b8 <__sfputc_r+0x1c>
 80080a8:	6994      	ldr	r4, [r2, #24]
 80080aa:	42a3      	cmp	r3, r4
 80080ac:	db01      	blt.n	80080b2 <__sfputc_r+0x16>
 80080ae:	290a      	cmp	r1, #10
 80080b0:	d102      	bne.n	80080b8 <__sfputc_r+0x1c>
 80080b2:	bc10      	pop	{r4}
 80080b4:	f001 b9a4 	b.w	8009400 <__swbuf_r>
 80080b8:	6813      	ldr	r3, [r2, #0]
 80080ba:	1c58      	adds	r0, r3, #1
 80080bc:	6010      	str	r0, [r2, #0]
 80080be:	7019      	strb	r1, [r3, #0]
 80080c0:	4608      	mov	r0, r1
 80080c2:	bc10      	pop	{r4}
 80080c4:	4770      	bx	lr

080080c6 <__sfputs_r>:
 80080c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080c8:	4606      	mov	r6, r0
 80080ca:	460f      	mov	r7, r1
 80080cc:	4614      	mov	r4, r2
 80080ce:	18d5      	adds	r5, r2, r3
 80080d0:	42ac      	cmp	r4, r5
 80080d2:	d101      	bne.n	80080d8 <__sfputs_r+0x12>
 80080d4:	2000      	movs	r0, #0
 80080d6:	e007      	b.n	80080e8 <__sfputs_r+0x22>
 80080d8:	463a      	mov	r2, r7
 80080da:	4630      	mov	r0, r6
 80080dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080e0:	f7ff ffdc 	bl	800809c <__sfputc_r>
 80080e4:	1c43      	adds	r3, r0, #1
 80080e6:	d1f3      	bne.n	80080d0 <__sfputs_r+0xa>
 80080e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080080ec <_vfiprintf_r>:
 80080ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f0:	460d      	mov	r5, r1
 80080f2:	4614      	mov	r4, r2
 80080f4:	4698      	mov	r8, r3
 80080f6:	4606      	mov	r6, r0
 80080f8:	b09d      	sub	sp, #116	@ 0x74
 80080fa:	b118      	cbz	r0, 8008104 <_vfiprintf_r+0x18>
 80080fc:	6a03      	ldr	r3, [r0, #32]
 80080fe:	b90b      	cbnz	r3, 8008104 <_vfiprintf_r+0x18>
 8008100:	f7fd fb5a 	bl	80057b8 <__sinit>
 8008104:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008106:	07d9      	lsls	r1, r3, #31
 8008108:	d405      	bmi.n	8008116 <_vfiprintf_r+0x2a>
 800810a:	89ab      	ldrh	r3, [r5, #12]
 800810c:	059a      	lsls	r2, r3, #22
 800810e:	d402      	bmi.n	8008116 <_vfiprintf_r+0x2a>
 8008110:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008112:	f7fe faa6 	bl	8006662 <__retarget_lock_acquire_recursive>
 8008116:	89ab      	ldrh	r3, [r5, #12]
 8008118:	071b      	lsls	r3, r3, #28
 800811a:	d501      	bpl.n	8008120 <_vfiprintf_r+0x34>
 800811c:	692b      	ldr	r3, [r5, #16]
 800811e:	b99b      	cbnz	r3, 8008148 <_vfiprintf_r+0x5c>
 8008120:	4629      	mov	r1, r5
 8008122:	4630      	mov	r0, r6
 8008124:	f001 f9aa 	bl	800947c <__swsetup_r>
 8008128:	b170      	cbz	r0, 8008148 <_vfiprintf_r+0x5c>
 800812a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800812c:	07dc      	lsls	r4, r3, #31
 800812e:	d504      	bpl.n	800813a <_vfiprintf_r+0x4e>
 8008130:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008134:	b01d      	add	sp, #116	@ 0x74
 8008136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800813a:	89ab      	ldrh	r3, [r5, #12]
 800813c:	0598      	lsls	r0, r3, #22
 800813e:	d4f7      	bmi.n	8008130 <_vfiprintf_r+0x44>
 8008140:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008142:	f7fe fa8f 	bl	8006664 <__retarget_lock_release_recursive>
 8008146:	e7f3      	b.n	8008130 <_vfiprintf_r+0x44>
 8008148:	2300      	movs	r3, #0
 800814a:	9309      	str	r3, [sp, #36]	@ 0x24
 800814c:	2320      	movs	r3, #32
 800814e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008152:	2330      	movs	r3, #48	@ 0x30
 8008154:	f04f 0901 	mov.w	r9, #1
 8008158:	f8cd 800c 	str.w	r8, [sp, #12]
 800815c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008308 <_vfiprintf_r+0x21c>
 8008160:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008164:	4623      	mov	r3, r4
 8008166:	469a      	mov	sl, r3
 8008168:	f813 2b01 	ldrb.w	r2, [r3], #1
 800816c:	b10a      	cbz	r2, 8008172 <_vfiprintf_r+0x86>
 800816e:	2a25      	cmp	r2, #37	@ 0x25
 8008170:	d1f9      	bne.n	8008166 <_vfiprintf_r+0x7a>
 8008172:	ebba 0b04 	subs.w	fp, sl, r4
 8008176:	d00b      	beq.n	8008190 <_vfiprintf_r+0xa4>
 8008178:	465b      	mov	r3, fp
 800817a:	4622      	mov	r2, r4
 800817c:	4629      	mov	r1, r5
 800817e:	4630      	mov	r0, r6
 8008180:	f7ff ffa1 	bl	80080c6 <__sfputs_r>
 8008184:	3001      	adds	r0, #1
 8008186:	f000 80a7 	beq.w	80082d8 <_vfiprintf_r+0x1ec>
 800818a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800818c:	445a      	add	r2, fp
 800818e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008190:	f89a 3000 	ldrb.w	r3, [sl]
 8008194:	2b00      	cmp	r3, #0
 8008196:	f000 809f 	beq.w	80082d8 <_vfiprintf_r+0x1ec>
 800819a:	2300      	movs	r3, #0
 800819c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80081a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081a4:	f10a 0a01 	add.w	sl, sl, #1
 80081a8:	9304      	str	r3, [sp, #16]
 80081aa:	9307      	str	r3, [sp, #28]
 80081ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80081b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80081b2:	4654      	mov	r4, sl
 80081b4:	2205      	movs	r2, #5
 80081b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ba:	4853      	ldr	r0, [pc, #332]	@ (8008308 <_vfiprintf_r+0x21c>)
 80081bc:	f7fe fa53 	bl	8006666 <memchr>
 80081c0:	9a04      	ldr	r2, [sp, #16]
 80081c2:	b9d8      	cbnz	r0, 80081fc <_vfiprintf_r+0x110>
 80081c4:	06d1      	lsls	r1, r2, #27
 80081c6:	bf44      	itt	mi
 80081c8:	2320      	movmi	r3, #32
 80081ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081ce:	0713      	lsls	r3, r2, #28
 80081d0:	bf44      	itt	mi
 80081d2:	232b      	movmi	r3, #43	@ 0x2b
 80081d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081d8:	f89a 3000 	ldrb.w	r3, [sl]
 80081dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80081de:	d015      	beq.n	800820c <_vfiprintf_r+0x120>
 80081e0:	4654      	mov	r4, sl
 80081e2:	2000      	movs	r0, #0
 80081e4:	f04f 0c0a 	mov.w	ip, #10
 80081e8:	9a07      	ldr	r2, [sp, #28]
 80081ea:	4621      	mov	r1, r4
 80081ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081f0:	3b30      	subs	r3, #48	@ 0x30
 80081f2:	2b09      	cmp	r3, #9
 80081f4:	d94b      	bls.n	800828e <_vfiprintf_r+0x1a2>
 80081f6:	b1b0      	cbz	r0, 8008226 <_vfiprintf_r+0x13a>
 80081f8:	9207      	str	r2, [sp, #28]
 80081fa:	e014      	b.n	8008226 <_vfiprintf_r+0x13a>
 80081fc:	eba0 0308 	sub.w	r3, r0, r8
 8008200:	fa09 f303 	lsl.w	r3, r9, r3
 8008204:	4313      	orrs	r3, r2
 8008206:	46a2      	mov	sl, r4
 8008208:	9304      	str	r3, [sp, #16]
 800820a:	e7d2      	b.n	80081b2 <_vfiprintf_r+0xc6>
 800820c:	9b03      	ldr	r3, [sp, #12]
 800820e:	1d19      	adds	r1, r3, #4
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	9103      	str	r1, [sp, #12]
 8008214:	2b00      	cmp	r3, #0
 8008216:	bfbb      	ittet	lt
 8008218:	425b      	neglt	r3, r3
 800821a:	f042 0202 	orrlt.w	r2, r2, #2
 800821e:	9307      	strge	r3, [sp, #28]
 8008220:	9307      	strlt	r3, [sp, #28]
 8008222:	bfb8      	it	lt
 8008224:	9204      	strlt	r2, [sp, #16]
 8008226:	7823      	ldrb	r3, [r4, #0]
 8008228:	2b2e      	cmp	r3, #46	@ 0x2e
 800822a:	d10a      	bne.n	8008242 <_vfiprintf_r+0x156>
 800822c:	7863      	ldrb	r3, [r4, #1]
 800822e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008230:	d132      	bne.n	8008298 <_vfiprintf_r+0x1ac>
 8008232:	9b03      	ldr	r3, [sp, #12]
 8008234:	3402      	adds	r4, #2
 8008236:	1d1a      	adds	r2, r3, #4
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	9203      	str	r2, [sp, #12]
 800823c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008240:	9305      	str	r3, [sp, #20]
 8008242:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800830c <_vfiprintf_r+0x220>
 8008246:	2203      	movs	r2, #3
 8008248:	4650      	mov	r0, sl
 800824a:	7821      	ldrb	r1, [r4, #0]
 800824c:	f7fe fa0b 	bl	8006666 <memchr>
 8008250:	b138      	cbz	r0, 8008262 <_vfiprintf_r+0x176>
 8008252:	2240      	movs	r2, #64	@ 0x40
 8008254:	9b04      	ldr	r3, [sp, #16]
 8008256:	eba0 000a 	sub.w	r0, r0, sl
 800825a:	4082      	lsls	r2, r0
 800825c:	4313      	orrs	r3, r2
 800825e:	3401      	adds	r4, #1
 8008260:	9304      	str	r3, [sp, #16]
 8008262:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008266:	2206      	movs	r2, #6
 8008268:	4829      	ldr	r0, [pc, #164]	@ (8008310 <_vfiprintf_r+0x224>)
 800826a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800826e:	f7fe f9fa 	bl	8006666 <memchr>
 8008272:	2800      	cmp	r0, #0
 8008274:	d03f      	beq.n	80082f6 <_vfiprintf_r+0x20a>
 8008276:	4b27      	ldr	r3, [pc, #156]	@ (8008314 <_vfiprintf_r+0x228>)
 8008278:	bb1b      	cbnz	r3, 80082c2 <_vfiprintf_r+0x1d6>
 800827a:	9b03      	ldr	r3, [sp, #12]
 800827c:	3307      	adds	r3, #7
 800827e:	f023 0307 	bic.w	r3, r3, #7
 8008282:	3308      	adds	r3, #8
 8008284:	9303      	str	r3, [sp, #12]
 8008286:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008288:	443b      	add	r3, r7
 800828a:	9309      	str	r3, [sp, #36]	@ 0x24
 800828c:	e76a      	b.n	8008164 <_vfiprintf_r+0x78>
 800828e:	460c      	mov	r4, r1
 8008290:	2001      	movs	r0, #1
 8008292:	fb0c 3202 	mla	r2, ip, r2, r3
 8008296:	e7a8      	b.n	80081ea <_vfiprintf_r+0xfe>
 8008298:	2300      	movs	r3, #0
 800829a:	f04f 0c0a 	mov.w	ip, #10
 800829e:	4619      	mov	r1, r3
 80082a0:	3401      	adds	r4, #1
 80082a2:	9305      	str	r3, [sp, #20]
 80082a4:	4620      	mov	r0, r4
 80082a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082aa:	3a30      	subs	r2, #48	@ 0x30
 80082ac:	2a09      	cmp	r2, #9
 80082ae:	d903      	bls.n	80082b8 <_vfiprintf_r+0x1cc>
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d0c6      	beq.n	8008242 <_vfiprintf_r+0x156>
 80082b4:	9105      	str	r1, [sp, #20]
 80082b6:	e7c4      	b.n	8008242 <_vfiprintf_r+0x156>
 80082b8:	4604      	mov	r4, r0
 80082ba:	2301      	movs	r3, #1
 80082bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80082c0:	e7f0      	b.n	80082a4 <_vfiprintf_r+0x1b8>
 80082c2:	ab03      	add	r3, sp, #12
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	462a      	mov	r2, r5
 80082c8:	4630      	mov	r0, r6
 80082ca:	4b13      	ldr	r3, [pc, #76]	@ (8008318 <_vfiprintf_r+0x22c>)
 80082cc:	a904      	add	r1, sp, #16
 80082ce:	f7fc fb89 	bl	80049e4 <_printf_float>
 80082d2:	4607      	mov	r7, r0
 80082d4:	1c78      	adds	r0, r7, #1
 80082d6:	d1d6      	bne.n	8008286 <_vfiprintf_r+0x19a>
 80082d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082da:	07d9      	lsls	r1, r3, #31
 80082dc:	d405      	bmi.n	80082ea <_vfiprintf_r+0x1fe>
 80082de:	89ab      	ldrh	r3, [r5, #12]
 80082e0:	059a      	lsls	r2, r3, #22
 80082e2:	d402      	bmi.n	80082ea <_vfiprintf_r+0x1fe>
 80082e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082e6:	f7fe f9bd 	bl	8006664 <__retarget_lock_release_recursive>
 80082ea:	89ab      	ldrh	r3, [r5, #12]
 80082ec:	065b      	lsls	r3, r3, #25
 80082ee:	f53f af1f 	bmi.w	8008130 <_vfiprintf_r+0x44>
 80082f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082f4:	e71e      	b.n	8008134 <_vfiprintf_r+0x48>
 80082f6:	ab03      	add	r3, sp, #12
 80082f8:	9300      	str	r3, [sp, #0]
 80082fa:	462a      	mov	r2, r5
 80082fc:	4630      	mov	r0, r6
 80082fe:	4b06      	ldr	r3, [pc, #24]	@ (8008318 <_vfiprintf_r+0x22c>)
 8008300:	a904      	add	r1, sp, #16
 8008302:	f7fc fe0d 	bl	8004f20 <_printf_i>
 8008306:	e7e4      	b.n	80082d2 <_vfiprintf_r+0x1e6>
 8008308:	08009aee 	.word	0x08009aee
 800830c:	08009af4 	.word	0x08009af4
 8008310:	08009af8 	.word	0x08009af8
 8008314:	080049e5 	.word	0x080049e5
 8008318:	080080c7 	.word	0x080080c7

0800831c <malloc>:
 800831c:	4b02      	ldr	r3, [pc, #8]	@ (8008328 <malloc+0xc>)
 800831e:	4601      	mov	r1, r0
 8008320:	6818      	ldr	r0, [r3, #0]
 8008322:	f000 b825 	b.w	8008370 <_malloc_r>
 8008326:	bf00      	nop
 8008328:	2000018c 	.word	0x2000018c

0800832c <sbrk_aligned>:
 800832c:	b570      	push	{r4, r5, r6, lr}
 800832e:	4e0f      	ldr	r6, [pc, #60]	@ (800836c <sbrk_aligned+0x40>)
 8008330:	460c      	mov	r4, r1
 8008332:	6831      	ldr	r1, [r6, #0]
 8008334:	4605      	mov	r5, r0
 8008336:	b911      	cbnz	r1, 800833e <sbrk_aligned+0x12>
 8008338:	f001 f9a0 	bl	800967c <_sbrk_r>
 800833c:	6030      	str	r0, [r6, #0]
 800833e:	4621      	mov	r1, r4
 8008340:	4628      	mov	r0, r5
 8008342:	f001 f99b 	bl	800967c <_sbrk_r>
 8008346:	1c43      	adds	r3, r0, #1
 8008348:	d103      	bne.n	8008352 <sbrk_aligned+0x26>
 800834a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800834e:	4620      	mov	r0, r4
 8008350:	bd70      	pop	{r4, r5, r6, pc}
 8008352:	1cc4      	adds	r4, r0, #3
 8008354:	f024 0403 	bic.w	r4, r4, #3
 8008358:	42a0      	cmp	r0, r4
 800835a:	d0f8      	beq.n	800834e <sbrk_aligned+0x22>
 800835c:	1a21      	subs	r1, r4, r0
 800835e:	4628      	mov	r0, r5
 8008360:	f001 f98c 	bl	800967c <_sbrk_r>
 8008364:	3001      	adds	r0, #1
 8008366:	d1f2      	bne.n	800834e <sbrk_aligned+0x22>
 8008368:	e7ef      	b.n	800834a <sbrk_aligned+0x1e>
 800836a:	bf00      	nop
 800836c:	200004b8 	.word	0x200004b8

08008370 <_malloc_r>:
 8008370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008374:	1ccd      	adds	r5, r1, #3
 8008376:	f025 0503 	bic.w	r5, r5, #3
 800837a:	3508      	adds	r5, #8
 800837c:	2d0c      	cmp	r5, #12
 800837e:	bf38      	it	cc
 8008380:	250c      	movcc	r5, #12
 8008382:	2d00      	cmp	r5, #0
 8008384:	4606      	mov	r6, r0
 8008386:	db01      	blt.n	800838c <_malloc_r+0x1c>
 8008388:	42a9      	cmp	r1, r5
 800838a:	d904      	bls.n	8008396 <_malloc_r+0x26>
 800838c:	230c      	movs	r3, #12
 800838e:	6033      	str	r3, [r6, #0]
 8008390:	2000      	movs	r0, #0
 8008392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008396:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800846c <_malloc_r+0xfc>
 800839a:	f000 faa9 	bl	80088f0 <__malloc_lock>
 800839e:	f8d8 3000 	ldr.w	r3, [r8]
 80083a2:	461c      	mov	r4, r3
 80083a4:	bb44      	cbnz	r4, 80083f8 <_malloc_r+0x88>
 80083a6:	4629      	mov	r1, r5
 80083a8:	4630      	mov	r0, r6
 80083aa:	f7ff ffbf 	bl	800832c <sbrk_aligned>
 80083ae:	1c43      	adds	r3, r0, #1
 80083b0:	4604      	mov	r4, r0
 80083b2:	d158      	bne.n	8008466 <_malloc_r+0xf6>
 80083b4:	f8d8 4000 	ldr.w	r4, [r8]
 80083b8:	4627      	mov	r7, r4
 80083ba:	2f00      	cmp	r7, #0
 80083bc:	d143      	bne.n	8008446 <_malloc_r+0xd6>
 80083be:	2c00      	cmp	r4, #0
 80083c0:	d04b      	beq.n	800845a <_malloc_r+0xea>
 80083c2:	6823      	ldr	r3, [r4, #0]
 80083c4:	4639      	mov	r1, r7
 80083c6:	4630      	mov	r0, r6
 80083c8:	eb04 0903 	add.w	r9, r4, r3
 80083cc:	f001 f956 	bl	800967c <_sbrk_r>
 80083d0:	4581      	cmp	r9, r0
 80083d2:	d142      	bne.n	800845a <_malloc_r+0xea>
 80083d4:	6821      	ldr	r1, [r4, #0]
 80083d6:	4630      	mov	r0, r6
 80083d8:	1a6d      	subs	r5, r5, r1
 80083da:	4629      	mov	r1, r5
 80083dc:	f7ff ffa6 	bl	800832c <sbrk_aligned>
 80083e0:	3001      	adds	r0, #1
 80083e2:	d03a      	beq.n	800845a <_malloc_r+0xea>
 80083e4:	6823      	ldr	r3, [r4, #0]
 80083e6:	442b      	add	r3, r5
 80083e8:	6023      	str	r3, [r4, #0]
 80083ea:	f8d8 3000 	ldr.w	r3, [r8]
 80083ee:	685a      	ldr	r2, [r3, #4]
 80083f0:	bb62      	cbnz	r2, 800844c <_malloc_r+0xdc>
 80083f2:	f8c8 7000 	str.w	r7, [r8]
 80083f6:	e00f      	b.n	8008418 <_malloc_r+0xa8>
 80083f8:	6822      	ldr	r2, [r4, #0]
 80083fa:	1b52      	subs	r2, r2, r5
 80083fc:	d420      	bmi.n	8008440 <_malloc_r+0xd0>
 80083fe:	2a0b      	cmp	r2, #11
 8008400:	d917      	bls.n	8008432 <_malloc_r+0xc2>
 8008402:	1961      	adds	r1, r4, r5
 8008404:	42a3      	cmp	r3, r4
 8008406:	6025      	str	r5, [r4, #0]
 8008408:	bf18      	it	ne
 800840a:	6059      	strne	r1, [r3, #4]
 800840c:	6863      	ldr	r3, [r4, #4]
 800840e:	bf08      	it	eq
 8008410:	f8c8 1000 	streq.w	r1, [r8]
 8008414:	5162      	str	r2, [r4, r5]
 8008416:	604b      	str	r3, [r1, #4]
 8008418:	4630      	mov	r0, r6
 800841a:	f000 fa6f 	bl	80088fc <__malloc_unlock>
 800841e:	f104 000b 	add.w	r0, r4, #11
 8008422:	1d23      	adds	r3, r4, #4
 8008424:	f020 0007 	bic.w	r0, r0, #7
 8008428:	1ac2      	subs	r2, r0, r3
 800842a:	bf1c      	itt	ne
 800842c:	1a1b      	subne	r3, r3, r0
 800842e:	50a3      	strne	r3, [r4, r2]
 8008430:	e7af      	b.n	8008392 <_malloc_r+0x22>
 8008432:	6862      	ldr	r2, [r4, #4]
 8008434:	42a3      	cmp	r3, r4
 8008436:	bf0c      	ite	eq
 8008438:	f8c8 2000 	streq.w	r2, [r8]
 800843c:	605a      	strne	r2, [r3, #4]
 800843e:	e7eb      	b.n	8008418 <_malloc_r+0xa8>
 8008440:	4623      	mov	r3, r4
 8008442:	6864      	ldr	r4, [r4, #4]
 8008444:	e7ae      	b.n	80083a4 <_malloc_r+0x34>
 8008446:	463c      	mov	r4, r7
 8008448:	687f      	ldr	r7, [r7, #4]
 800844a:	e7b6      	b.n	80083ba <_malloc_r+0x4a>
 800844c:	461a      	mov	r2, r3
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	42a3      	cmp	r3, r4
 8008452:	d1fb      	bne.n	800844c <_malloc_r+0xdc>
 8008454:	2300      	movs	r3, #0
 8008456:	6053      	str	r3, [r2, #4]
 8008458:	e7de      	b.n	8008418 <_malloc_r+0xa8>
 800845a:	230c      	movs	r3, #12
 800845c:	4630      	mov	r0, r6
 800845e:	6033      	str	r3, [r6, #0]
 8008460:	f000 fa4c 	bl	80088fc <__malloc_unlock>
 8008464:	e794      	b.n	8008390 <_malloc_r+0x20>
 8008466:	6005      	str	r5, [r0, #0]
 8008468:	e7d6      	b.n	8008418 <_malloc_r+0xa8>
 800846a:	bf00      	nop
 800846c:	200004bc 	.word	0x200004bc

08008470 <__ascii_mbtowc>:
 8008470:	b082      	sub	sp, #8
 8008472:	b901      	cbnz	r1, 8008476 <__ascii_mbtowc+0x6>
 8008474:	a901      	add	r1, sp, #4
 8008476:	b142      	cbz	r2, 800848a <__ascii_mbtowc+0x1a>
 8008478:	b14b      	cbz	r3, 800848e <__ascii_mbtowc+0x1e>
 800847a:	7813      	ldrb	r3, [r2, #0]
 800847c:	600b      	str	r3, [r1, #0]
 800847e:	7812      	ldrb	r2, [r2, #0]
 8008480:	1e10      	subs	r0, r2, #0
 8008482:	bf18      	it	ne
 8008484:	2001      	movne	r0, #1
 8008486:	b002      	add	sp, #8
 8008488:	4770      	bx	lr
 800848a:	4610      	mov	r0, r2
 800848c:	e7fb      	b.n	8008486 <__ascii_mbtowc+0x16>
 800848e:	f06f 0001 	mvn.w	r0, #1
 8008492:	e7f8      	b.n	8008486 <__ascii_mbtowc+0x16>

08008494 <_scanf_chars>:
 8008494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008498:	4615      	mov	r5, r2
 800849a:	688a      	ldr	r2, [r1, #8]
 800849c:	4680      	mov	r8, r0
 800849e:	460c      	mov	r4, r1
 80084a0:	b932      	cbnz	r2, 80084b0 <_scanf_chars+0x1c>
 80084a2:	698a      	ldr	r2, [r1, #24]
 80084a4:	2a00      	cmp	r2, #0
 80084a6:	bf14      	ite	ne
 80084a8:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 80084ac:	2201      	moveq	r2, #1
 80084ae:	608a      	str	r2, [r1, #8]
 80084b0:	2700      	movs	r7, #0
 80084b2:	6822      	ldr	r2, [r4, #0]
 80084b4:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8008544 <_scanf_chars+0xb0>
 80084b8:	06d1      	lsls	r1, r2, #27
 80084ba:	bf5f      	itttt	pl
 80084bc:	681a      	ldrpl	r2, [r3, #0]
 80084be:	1d11      	addpl	r1, r2, #4
 80084c0:	6019      	strpl	r1, [r3, #0]
 80084c2:	6816      	ldrpl	r6, [r2, #0]
 80084c4:	69a0      	ldr	r0, [r4, #24]
 80084c6:	b188      	cbz	r0, 80084ec <_scanf_chars+0x58>
 80084c8:	2801      	cmp	r0, #1
 80084ca:	d107      	bne.n	80084dc <_scanf_chars+0x48>
 80084cc:	682b      	ldr	r3, [r5, #0]
 80084ce:	781a      	ldrb	r2, [r3, #0]
 80084d0:	6963      	ldr	r3, [r4, #20]
 80084d2:	5c9b      	ldrb	r3, [r3, r2]
 80084d4:	b953      	cbnz	r3, 80084ec <_scanf_chars+0x58>
 80084d6:	2f00      	cmp	r7, #0
 80084d8:	d031      	beq.n	800853e <_scanf_chars+0xaa>
 80084da:	e022      	b.n	8008522 <_scanf_chars+0x8e>
 80084dc:	2802      	cmp	r0, #2
 80084de:	d120      	bne.n	8008522 <_scanf_chars+0x8e>
 80084e0:	682b      	ldr	r3, [r5, #0]
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80084e8:	071b      	lsls	r3, r3, #28
 80084ea:	d41a      	bmi.n	8008522 <_scanf_chars+0x8e>
 80084ec:	6823      	ldr	r3, [r4, #0]
 80084ee:	3701      	adds	r7, #1
 80084f0:	06da      	lsls	r2, r3, #27
 80084f2:	bf5e      	ittt	pl
 80084f4:	682b      	ldrpl	r3, [r5, #0]
 80084f6:	781b      	ldrbpl	r3, [r3, #0]
 80084f8:	f806 3b01 	strbpl.w	r3, [r6], #1
 80084fc:	682a      	ldr	r2, [r5, #0]
 80084fe:	686b      	ldr	r3, [r5, #4]
 8008500:	3201      	adds	r2, #1
 8008502:	602a      	str	r2, [r5, #0]
 8008504:	68a2      	ldr	r2, [r4, #8]
 8008506:	3b01      	subs	r3, #1
 8008508:	3a01      	subs	r2, #1
 800850a:	606b      	str	r3, [r5, #4]
 800850c:	60a2      	str	r2, [r4, #8]
 800850e:	b142      	cbz	r2, 8008522 <_scanf_chars+0x8e>
 8008510:	2b00      	cmp	r3, #0
 8008512:	dcd7      	bgt.n	80084c4 <_scanf_chars+0x30>
 8008514:	4629      	mov	r1, r5
 8008516:	4640      	mov	r0, r8
 8008518:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800851c:	4798      	blx	r3
 800851e:	2800      	cmp	r0, #0
 8008520:	d0d0      	beq.n	80084c4 <_scanf_chars+0x30>
 8008522:	6823      	ldr	r3, [r4, #0]
 8008524:	f013 0310 	ands.w	r3, r3, #16
 8008528:	d105      	bne.n	8008536 <_scanf_chars+0xa2>
 800852a:	68e2      	ldr	r2, [r4, #12]
 800852c:	3201      	adds	r2, #1
 800852e:	60e2      	str	r2, [r4, #12]
 8008530:	69a2      	ldr	r2, [r4, #24]
 8008532:	b102      	cbz	r2, 8008536 <_scanf_chars+0xa2>
 8008534:	7033      	strb	r3, [r6, #0]
 8008536:	2000      	movs	r0, #0
 8008538:	6923      	ldr	r3, [r4, #16]
 800853a:	443b      	add	r3, r7
 800853c:	6123      	str	r3, [r4, #16]
 800853e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008542:	bf00      	nop
 8008544:	08009901 	.word	0x08009901

08008548 <_scanf_i>:
 8008548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854c:	460c      	mov	r4, r1
 800854e:	4698      	mov	r8, r3
 8008550:	4b72      	ldr	r3, [pc, #456]	@ (800871c <_scanf_i+0x1d4>)
 8008552:	b087      	sub	sp, #28
 8008554:	4682      	mov	sl, r0
 8008556:	4616      	mov	r6, r2
 8008558:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800855c:	ab03      	add	r3, sp, #12
 800855e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008562:	4b6f      	ldr	r3, [pc, #444]	@ (8008720 <_scanf_i+0x1d8>)
 8008564:	69a1      	ldr	r1, [r4, #24]
 8008566:	4a6f      	ldr	r2, [pc, #444]	@ (8008724 <_scanf_i+0x1dc>)
 8008568:	4627      	mov	r7, r4
 800856a:	2903      	cmp	r1, #3
 800856c:	bf08      	it	eq
 800856e:	461a      	moveq	r2, r3
 8008570:	68a3      	ldr	r3, [r4, #8]
 8008572:	9201      	str	r2, [sp, #4]
 8008574:	1e5a      	subs	r2, r3, #1
 8008576:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800857a:	bf81      	itttt	hi
 800857c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008580:	eb03 0905 	addhi.w	r9, r3, r5
 8008584:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008588:	60a3      	strhi	r3, [r4, #8]
 800858a:	f857 3b1c 	ldr.w	r3, [r7], #28
 800858e:	bf98      	it	ls
 8008590:	f04f 0900 	movls.w	r9, #0
 8008594:	463d      	mov	r5, r7
 8008596:	f04f 0b00 	mov.w	fp, #0
 800859a:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800859e:	6023      	str	r3, [r4, #0]
 80085a0:	6831      	ldr	r1, [r6, #0]
 80085a2:	ab03      	add	r3, sp, #12
 80085a4:	2202      	movs	r2, #2
 80085a6:	7809      	ldrb	r1, [r1, #0]
 80085a8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80085ac:	f7fe f85b 	bl	8006666 <memchr>
 80085b0:	b328      	cbz	r0, 80085fe <_scanf_i+0xb6>
 80085b2:	f1bb 0f01 	cmp.w	fp, #1
 80085b6:	d159      	bne.n	800866c <_scanf_i+0x124>
 80085b8:	6862      	ldr	r2, [r4, #4]
 80085ba:	b92a      	cbnz	r2, 80085c8 <_scanf_i+0x80>
 80085bc:	2108      	movs	r1, #8
 80085be:	6822      	ldr	r2, [r4, #0]
 80085c0:	6061      	str	r1, [r4, #4]
 80085c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80085c6:	6022      	str	r2, [r4, #0]
 80085c8:	6822      	ldr	r2, [r4, #0]
 80085ca:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80085ce:	6022      	str	r2, [r4, #0]
 80085d0:	68a2      	ldr	r2, [r4, #8]
 80085d2:	1e51      	subs	r1, r2, #1
 80085d4:	60a1      	str	r1, [r4, #8]
 80085d6:	b192      	cbz	r2, 80085fe <_scanf_i+0xb6>
 80085d8:	6832      	ldr	r2, [r6, #0]
 80085da:	1c51      	adds	r1, r2, #1
 80085dc:	6031      	str	r1, [r6, #0]
 80085de:	7812      	ldrb	r2, [r2, #0]
 80085e0:	f805 2b01 	strb.w	r2, [r5], #1
 80085e4:	6872      	ldr	r2, [r6, #4]
 80085e6:	3a01      	subs	r2, #1
 80085e8:	2a00      	cmp	r2, #0
 80085ea:	6072      	str	r2, [r6, #4]
 80085ec:	dc07      	bgt.n	80085fe <_scanf_i+0xb6>
 80085ee:	4631      	mov	r1, r6
 80085f0:	4650      	mov	r0, sl
 80085f2:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80085f6:	4790      	blx	r2
 80085f8:	2800      	cmp	r0, #0
 80085fa:	f040 8085 	bne.w	8008708 <_scanf_i+0x1c0>
 80085fe:	f10b 0b01 	add.w	fp, fp, #1
 8008602:	f1bb 0f03 	cmp.w	fp, #3
 8008606:	d1cb      	bne.n	80085a0 <_scanf_i+0x58>
 8008608:	6863      	ldr	r3, [r4, #4]
 800860a:	b90b      	cbnz	r3, 8008610 <_scanf_i+0xc8>
 800860c:	230a      	movs	r3, #10
 800860e:	6063      	str	r3, [r4, #4]
 8008610:	6863      	ldr	r3, [r4, #4]
 8008612:	4945      	ldr	r1, [pc, #276]	@ (8008728 <_scanf_i+0x1e0>)
 8008614:	6960      	ldr	r0, [r4, #20]
 8008616:	1ac9      	subs	r1, r1, r3
 8008618:	f000 f888 	bl	800872c <__sccl>
 800861c:	f04f 0b00 	mov.w	fp, #0
 8008620:	68a3      	ldr	r3, [r4, #8]
 8008622:	6822      	ldr	r2, [r4, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d03d      	beq.n	80086a4 <_scanf_i+0x15c>
 8008628:	6831      	ldr	r1, [r6, #0]
 800862a:	6960      	ldr	r0, [r4, #20]
 800862c:	f891 c000 	ldrb.w	ip, [r1]
 8008630:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008634:	2800      	cmp	r0, #0
 8008636:	d035      	beq.n	80086a4 <_scanf_i+0x15c>
 8008638:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800863c:	d124      	bne.n	8008688 <_scanf_i+0x140>
 800863e:	0510      	lsls	r0, r2, #20
 8008640:	d522      	bpl.n	8008688 <_scanf_i+0x140>
 8008642:	f10b 0b01 	add.w	fp, fp, #1
 8008646:	f1b9 0f00 	cmp.w	r9, #0
 800864a:	d003      	beq.n	8008654 <_scanf_i+0x10c>
 800864c:	3301      	adds	r3, #1
 800864e:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8008652:	60a3      	str	r3, [r4, #8]
 8008654:	6873      	ldr	r3, [r6, #4]
 8008656:	3b01      	subs	r3, #1
 8008658:	2b00      	cmp	r3, #0
 800865a:	6073      	str	r3, [r6, #4]
 800865c:	dd1b      	ble.n	8008696 <_scanf_i+0x14e>
 800865e:	6833      	ldr	r3, [r6, #0]
 8008660:	3301      	adds	r3, #1
 8008662:	6033      	str	r3, [r6, #0]
 8008664:	68a3      	ldr	r3, [r4, #8]
 8008666:	3b01      	subs	r3, #1
 8008668:	60a3      	str	r3, [r4, #8]
 800866a:	e7d9      	b.n	8008620 <_scanf_i+0xd8>
 800866c:	f1bb 0f02 	cmp.w	fp, #2
 8008670:	d1ae      	bne.n	80085d0 <_scanf_i+0x88>
 8008672:	6822      	ldr	r2, [r4, #0]
 8008674:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8008678:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800867c:	d1bf      	bne.n	80085fe <_scanf_i+0xb6>
 800867e:	2110      	movs	r1, #16
 8008680:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008684:	6061      	str	r1, [r4, #4]
 8008686:	e7a2      	b.n	80085ce <_scanf_i+0x86>
 8008688:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800868c:	6022      	str	r2, [r4, #0]
 800868e:	780b      	ldrb	r3, [r1, #0]
 8008690:	f805 3b01 	strb.w	r3, [r5], #1
 8008694:	e7de      	b.n	8008654 <_scanf_i+0x10c>
 8008696:	4631      	mov	r1, r6
 8008698:	4650      	mov	r0, sl
 800869a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800869e:	4798      	blx	r3
 80086a0:	2800      	cmp	r0, #0
 80086a2:	d0df      	beq.n	8008664 <_scanf_i+0x11c>
 80086a4:	6823      	ldr	r3, [r4, #0]
 80086a6:	05d9      	lsls	r1, r3, #23
 80086a8:	d50d      	bpl.n	80086c6 <_scanf_i+0x17e>
 80086aa:	42bd      	cmp	r5, r7
 80086ac:	d909      	bls.n	80086c2 <_scanf_i+0x17a>
 80086ae:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80086b2:	4632      	mov	r2, r6
 80086b4:	4650      	mov	r0, sl
 80086b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80086ba:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 80086be:	4798      	blx	r3
 80086c0:	464d      	mov	r5, r9
 80086c2:	42bd      	cmp	r5, r7
 80086c4:	d028      	beq.n	8008718 <_scanf_i+0x1d0>
 80086c6:	6822      	ldr	r2, [r4, #0]
 80086c8:	f012 0210 	ands.w	r2, r2, #16
 80086cc:	d113      	bne.n	80086f6 <_scanf_i+0x1ae>
 80086ce:	702a      	strb	r2, [r5, #0]
 80086d0:	4639      	mov	r1, r7
 80086d2:	6863      	ldr	r3, [r4, #4]
 80086d4:	4650      	mov	r0, sl
 80086d6:	9e01      	ldr	r6, [sp, #4]
 80086d8:	47b0      	blx	r6
 80086da:	f8d8 3000 	ldr.w	r3, [r8]
 80086de:	6821      	ldr	r1, [r4, #0]
 80086e0:	1d1a      	adds	r2, r3, #4
 80086e2:	f8c8 2000 	str.w	r2, [r8]
 80086e6:	f011 0f20 	tst.w	r1, #32
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	d00f      	beq.n	800870e <_scanf_i+0x1c6>
 80086ee:	6018      	str	r0, [r3, #0]
 80086f0:	68e3      	ldr	r3, [r4, #12]
 80086f2:	3301      	adds	r3, #1
 80086f4:	60e3      	str	r3, [r4, #12]
 80086f6:	2000      	movs	r0, #0
 80086f8:	6923      	ldr	r3, [r4, #16]
 80086fa:	1bed      	subs	r5, r5, r7
 80086fc:	445d      	add	r5, fp
 80086fe:	442b      	add	r3, r5
 8008700:	6123      	str	r3, [r4, #16]
 8008702:	b007      	add	sp, #28
 8008704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008708:	f04f 0b00 	mov.w	fp, #0
 800870c:	e7ca      	b.n	80086a4 <_scanf_i+0x15c>
 800870e:	07ca      	lsls	r2, r1, #31
 8008710:	bf4c      	ite	mi
 8008712:	8018      	strhmi	r0, [r3, #0]
 8008714:	6018      	strpl	r0, [r3, #0]
 8008716:	e7eb      	b.n	80086f0 <_scanf_i+0x1a8>
 8008718:	2001      	movs	r0, #1
 800871a:	e7f2      	b.n	8008702 <_scanf_i+0x1ba>
 800871c:	08009838 	.word	0x08009838
 8008720:	080064e1 	.word	0x080064e1
 8008724:	080093fd 	.word	0x080093fd
 8008728:	08009b0f 	.word	0x08009b0f

0800872c <__sccl>:
 800872c:	b570      	push	{r4, r5, r6, lr}
 800872e:	780b      	ldrb	r3, [r1, #0]
 8008730:	4604      	mov	r4, r0
 8008732:	2b5e      	cmp	r3, #94	@ 0x5e
 8008734:	bf0b      	itete	eq
 8008736:	784b      	ldrbeq	r3, [r1, #1]
 8008738:	1c4a      	addne	r2, r1, #1
 800873a:	1c8a      	addeq	r2, r1, #2
 800873c:	2100      	movne	r1, #0
 800873e:	bf08      	it	eq
 8008740:	2101      	moveq	r1, #1
 8008742:	3801      	subs	r0, #1
 8008744:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8008748:	f800 1f01 	strb.w	r1, [r0, #1]!
 800874c:	42a8      	cmp	r0, r5
 800874e:	d1fb      	bne.n	8008748 <__sccl+0x1c>
 8008750:	b90b      	cbnz	r3, 8008756 <__sccl+0x2a>
 8008752:	1e50      	subs	r0, r2, #1
 8008754:	bd70      	pop	{r4, r5, r6, pc}
 8008756:	f081 0101 	eor.w	r1, r1, #1
 800875a:	4610      	mov	r0, r2
 800875c:	54e1      	strb	r1, [r4, r3]
 800875e:	4602      	mov	r2, r0
 8008760:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008764:	2d2d      	cmp	r5, #45	@ 0x2d
 8008766:	d005      	beq.n	8008774 <__sccl+0x48>
 8008768:	2d5d      	cmp	r5, #93	@ 0x5d
 800876a:	d016      	beq.n	800879a <__sccl+0x6e>
 800876c:	2d00      	cmp	r5, #0
 800876e:	d0f1      	beq.n	8008754 <__sccl+0x28>
 8008770:	462b      	mov	r3, r5
 8008772:	e7f2      	b.n	800875a <__sccl+0x2e>
 8008774:	7846      	ldrb	r6, [r0, #1]
 8008776:	2e5d      	cmp	r6, #93	@ 0x5d
 8008778:	d0fa      	beq.n	8008770 <__sccl+0x44>
 800877a:	42b3      	cmp	r3, r6
 800877c:	dcf8      	bgt.n	8008770 <__sccl+0x44>
 800877e:	461a      	mov	r2, r3
 8008780:	3002      	adds	r0, #2
 8008782:	3201      	adds	r2, #1
 8008784:	4296      	cmp	r6, r2
 8008786:	54a1      	strb	r1, [r4, r2]
 8008788:	dcfb      	bgt.n	8008782 <__sccl+0x56>
 800878a:	1af2      	subs	r2, r6, r3
 800878c:	3a01      	subs	r2, #1
 800878e:	42b3      	cmp	r3, r6
 8008790:	bfa8      	it	ge
 8008792:	2200      	movge	r2, #0
 8008794:	1c5d      	adds	r5, r3, #1
 8008796:	18ab      	adds	r3, r5, r2
 8008798:	e7e1      	b.n	800875e <__sccl+0x32>
 800879a:	4610      	mov	r0, r2
 800879c:	e7da      	b.n	8008754 <__sccl+0x28>
	...

080087a0 <__sflush_r>:
 80087a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087a6:	0716      	lsls	r6, r2, #28
 80087a8:	4605      	mov	r5, r0
 80087aa:	460c      	mov	r4, r1
 80087ac:	d454      	bmi.n	8008858 <__sflush_r+0xb8>
 80087ae:	684b      	ldr	r3, [r1, #4]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	dc02      	bgt.n	80087ba <__sflush_r+0x1a>
 80087b4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	dd48      	ble.n	800884c <__sflush_r+0xac>
 80087ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087bc:	2e00      	cmp	r6, #0
 80087be:	d045      	beq.n	800884c <__sflush_r+0xac>
 80087c0:	2300      	movs	r3, #0
 80087c2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80087c6:	682f      	ldr	r7, [r5, #0]
 80087c8:	6a21      	ldr	r1, [r4, #32]
 80087ca:	602b      	str	r3, [r5, #0]
 80087cc:	d030      	beq.n	8008830 <__sflush_r+0x90>
 80087ce:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80087d0:	89a3      	ldrh	r3, [r4, #12]
 80087d2:	0759      	lsls	r1, r3, #29
 80087d4:	d505      	bpl.n	80087e2 <__sflush_r+0x42>
 80087d6:	6863      	ldr	r3, [r4, #4]
 80087d8:	1ad2      	subs	r2, r2, r3
 80087da:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80087dc:	b10b      	cbz	r3, 80087e2 <__sflush_r+0x42>
 80087de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80087e0:	1ad2      	subs	r2, r2, r3
 80087e2:	2300      	movs	r3, #0
 80087e4:	4628      	mov	r0, r5
 80087e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087e8:	6a21      	ldr	r1, [r4, #32]
 80087ea:	47b0      	blx	r6
 80087ec:	1c43      	adds	r3, r0, #1
 80087ee:	89a3      	ldrh	r3, [r4, #12]
 80087f0:	d106      	bne.n	8008800 <__sflush_r+0x60>
 80087f2:	6829      	ldr	r1, [r5, #0]
 80087f4:	291d      	cmp	r1, #29
 80087f6:	d82b      	bhi.n	8008850 <__sflush_r+0xb0>
 80087f8:	4a28      	ldr	r2, [pc, #160]	@ (800889c <__sflush_r+0xfc>)
 80087fa:	410a      	asrs	r2, r1
 80087fc:	07d6      	lsls	r6, r2, #31
 80087fe:	d427      	bmi.n	8008850 <__sflush_r+0xb0>
 8008800:	2200      	movs	r2, #0
 8008802:	6062      	str	r2, [r4, #4]
 8008804:	6922      	ldr	r2, [r4, #16]
 8008806:	04d9      	lsls	r1, r3, #19
 8008808:	6022      	str	r2, [r4, #0]
 800880a:	d504      	bpl.n	8008816 <__sflush_r+0x76>
 800880c:	1c42      	adds	r2, r0, #1
 800880e:	d101      	bne.n	8008814 <__sflush_r+0x74>
 8008810:	682b      	ldr	r3, [r5, #0]
 8008812:	b903      	cbnz	r3, 8008816 <__sflush_r+0x76>
 8008814:	6560      	str	r0, [r4, #84]	@ 0x54
 8008816:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008818:	602f      	str	r7, [r5, #0]
 800881a:	b1b9      	cbz	r1, 800884c <__sflush_r+0xac>
 800881c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008820:	4299      	cmp	r1, r3
 8008822:	d002      	beq.n	800882a <__sflush_r+0x8a>
 8008824:	4628      	mov	r0, r5
 8008826:	f7fe fd97 	bl	8007358 <_free_r>
 800882a:	2300      	movs	r3, #0
 800882c:	6363      	str	r3, [r4, #52]	@ 0x34
 800882e:	e00d      	b.n	800884c <__sflush_r+0xac>
 8008830:	2301      	movs	r3, #1
 8008832:	4628      	mov	r0, r5
 8008834:	47b0      	blx	r6
 8008836:	4602      	mov	r2, r0
 8008838:	1c50      	adds	r0, r2, #1
 800883a:	d1c9      	bne.n	80087d0 <__sflush_r+0x30>
 800883c:	682b      	ldr	r3, [r5, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d0c6      	beq.n	80087d0 <__sflush_r+0x30>
 8008842:	2b1d      	cmp	r3, #29
 8008844:	d001      	beq.n	800884a <__sflush_r+0xaa>
 8008846:	2b16      	cmp	r3, #22
 8008848:	d11d      	bne.n	8008886 <__sflush_r+0xe6>
 800884a:	602f      	str	r7, [r5, #0]
 800884c:	2000      	movs	r0, #0
 800884e:	e021      	b.n	8008894 <__sflush_r+0xf4>
 8008850:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008854:	b21b      	sxth	r3, r3
 8008856:	e01a      	b.n	800888e <__sflush_r+0xee>
 8008858:	690f      	ldr	r7, [r1, #16]
 800885a:	2f00      	cmp	r7, #0
 800885c:	d0f6      	beq.n	800884c <__sflush_r+0xac>
 800885e:	0793      	lsls	r3, r2, #30
 8008860:	bf18      	it	ne
 8008862:	2300      	movne	r3, #0
 8008864:	680e      	ldr	r6, [r1, #0]
 8008866:	bf08      	it	eq
 8008868:	694b      	ldreq	r3, [r1, #20]
 800886a:	1bf6      	subs	r6, r6, r7
 800886c:	600f      	str	r7, [r1, #0]
 800886e:	608b      	str	r3, [r1, #8]
 8008870:	2e00      	cmp	r6, #0
 8008872:	ddeb      	ble.n	800884c <__sflush_r+0xac>
 8008874:	4633      	mov	r3, r6
 8008876:	463a      	mov	r2, r7
 8008878:	4628      	mov	r0, r5
 800887a:	6a21      	ldr	r1, [r4, #32]
 800887c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008880:	47e0      	blx	ip
 8008882:	2800      	cmp	r0, #0
 8008884:	dc07      	bgt.n	8008896 <__sflush_r+0xf6>
 8008886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800888a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800888e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008892:	81a3      	strh	r3, [r4, #12]
 8008894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008896:	4407      	add	r7, r0
 8008898:	1a36      	subs	r6, r6, r0
 800889a:	e7e9      	b.n	8008870 <__sflush_r+0xd0>
 800889c:	dfbffffe 	.word	0xdfbffffe

080088a0 <_fflush_r>:
 80088a0:	b538      	push	{r3, r4, r5, lr}
 80088a2:	690b      	ldr	r3, [r1, #16]
 80088a4:	4605      	mov	r5, r0
 80088a6:	460c      	mov	r4, r1
 80088a8:	b913      	cbnz	r3, 80088b0 <_fflush_r+0x10>
 80088aa:	2500      	movs	r5, #0
 80088ac:	4628      	mov	r0, r5
 80088ae:	bd38      	pop	{r3, r4, r5, pc}
 80088b0:	b118      	cbz	r0, 80088ba <_fflush_r+0x1a>
 80088b2:	6a03      	ldr	r3, [r0, #32]
 80088b4:	b90b      	cbnz	r3, 80088ba <_fflush_r+0x1a>
 80088b6:	f7fc ff7f 	bl	80057b8 <__sinit>
 80088ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d0f3      	beq.n	80088aa <_fflush_r+0xa>
 80088c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80088c4:	07d0      	lsls	r0, r2, #31
 80088c6:	d404      	bmi.n	80088d2 <_fflush_r+0x32>
 80088c8:	0599      	lsls	r1, r3, #22
 80088ca:	d402      	bmi.n	80088d2 <_fflush_r+0x32>
 80088cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088ce:	f7fd fec8 	bl	8006662 <__retarget_lock_acquire_recursive>
 80088d2:	4628      	mov	r0, r5
 80088d4:	4621      	mov	r1, r4
 80088d6:	f7ff ff63 	bl	80087a0 <__sflush_r>
 80088da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80088dc:	4605      	mov	r5, r0
 80088de:	07da      	lsls	r2, r3, #31
 80088e0:	d4e4      	bmi.n	80088ac <_fflush_r+0xc>
 80088e2:	89a3      	ldrh	r3, [r4, #12]
 80088e4:	059b      	lsls	r3, r3, #22
 80088e6:	d4e1      	bmi.n	80088ac <_fflush_r+0xc>
 80088e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088ea:	f7fd febb 	bl	8006664 <__retarget_lock_release_recursive>
 80088ee:	e7dd      	b.n	80088ac <_fflush_r+0xc>

080088f0 <__malloc_lock>:
 80088f0:	4801      	ldr	r0, [pc, #4]	@ (80088f8 <__malloc_lock+0x8>)
 80088f2:	f7fd beb6 	b.w	8006662 <__retarget_lock_acquire_recursive>
 80088f6:	bf00      	nop
 80088f8:	200004b4 	.word	0x200004b4

080088fc <__malloc_unlock>:
 80088fc:	4801      	ldr	r0, [pc, #4]	@ (8008904 <__malloc_unlock+0x8>)
 80088fe:	f7fd beb1 	b.w	8006664 <__retarget_lock_release_recursive>
 8008902:	bf00      	nop
 8008904:	200004b4 	.word	0x200004b4

08008908 <_Balloc>:
 8008908:	b570      	push	{r4, r5, r6, lr}
 800890a:	69c6      	ldr	r6, [r0, #28]
 800890c:	4604      	mov	r4, r0
 800890e:	460d      	mov	r5, r1
 8008910:	b976      	cbnz	r6, 8008930 <_Balloc+0x28>
 8008912:	2010      	movs	r0, #16
 8008914:	f7ff fd02 	bl	800831c <malloc>
 8008918:	4602      	mov	r2, r0
 800891a:	61e0      	str	r0, [r4, #28]
 800891c:	b920      	cbnz	r0, 8008928 <_Balloc+0x20>
 800891e:	216b      	movs	r1, #107	@ 0x6b
 8008920:	4b17      	ldr	r3, [pc, #92]	@ (8008980 <_Balloc+0x78>)
 8008922:	4818      	ldr	r0, [pc, #96]	@ (8008984 <_Balloc+0x7c>)
 8008924:	f000 feba 	bl	800969c <__assert_func>
 8008928:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800892c:	6006      	str	r6, [r0, #0]
 800892e:	60c6      	str	r6, [r0, #12]
 8008930:	69e6      	ldr	r6, [r4, #28]
 8008932:	68f3      	ldr	r3, [r6, #12]
 8008934:	b183      	cbz	r3, 8008958 <_Balloc+0x50>
 8008936:	69e3      	ldr	r3, [r4, #28]
 8008938:	68db      	ldr	r3, [r3, #12]
 800893a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800893e:	b9b8      	cbnz	r0, 8008970 <_Balloc+0x68>
 8008940:	2101      	movs	r1, #1
 8008942:	fa01 f605 	lsl.w	r6, r1, r5
 8008946:	1d72      	adds	r2, r6, #5
 8008948:	4620      	mov	r0, r4
 800894a:	0092      	lsls	r2, r2, #2
 800894c:	f000 fec4 	bl	80096d8 <_calloc_r>
 8008950:	b160      	cbz	r0, 800896c <_Balloc+0x64>
 8008952:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008956:	e00e      	b.n	8008976 <_Balloc+0x6e>
 8008958:	2221      	movs	r2, #33	@ 0x21
 800895a:	2104      	movs	r1, #4
 800895c:	4620      	mov	r0, r4
 800895e:	f000 febb 	bl	80096d8 <_calloc_r>
 8008962:	69e3      	ldr	r3, [r4, #28]
 8008964:	60f0      	str	r0, [r6, #12]
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1e4      	bne.n	8008936 <_Balloc+0x2e>
 800896c:	2000      	movs	r0, #0
 800896e:	bd70      	pop	{r4, r5, r6, pc}
 8008970:	6802      	ldr	r2, [r0, #0]
 8008972:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008976:	2300      	movs	r3, #0
 8008978:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800897c:	e7f7      	b.n	800896e <_Balloc+0x66>
 800897e:	bf00      	nop
 8008980:	08009a0e 	.word	0x08009a0e
 8008984:	08009b1a 	.word	0x08009b1a

08008988 <_Bfree>:
 8008988:	b570      	push	{r4, r5, r6, lr}
 800898a:	69c6      	ldr	r6, [r0, #28]
 800898c:	4605      	mov	r5, r0
 800898e:	460c      	mov	r4, r1
 8008990:	b976      	cbnz	r6, 80089b0 <_Bfree+0x28>
 8008992:	2010      	movs	r0, #16
 8008994:	f7ff fcc2 	bl	800831c <malloc>
 8008998:	4602      	mov	r2, r0
 800899a:	61e8      	str	r0, [r5, #28]
 800899c:	b920      	cbnz	r0, 80089a8 <_Bfree+0x20>
 800899e:	218f      	movs	r1, #143	@ 0x8f
 80089a0:	4b08      	ldr	r3, [pc, #32]	@ (80089c4 <_Bfree+0x3c>)
 80089a2:	4809      	ldr	r0, [pc, #36]	@ (80089c8 <_Bfree+0x40>)
 80089a4:	f000 fe7a 	bl	800969c <__assert_func>
 80089a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089ac:	6006      	str	r6, [r0, #0]
 80089ae:	60c6      	str	r6, [r0, #12]
 80089b0:	b13c      	cbz	r4, 80089c2 <_Bfree+0x3a>
 80089b2:	69eb      	ldr	r3, [r5, #28]
 80089b4:	6862      	ldr	r2, [r4, #4]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089bc:	6021      	str	r1, [r4, #0]
 80089be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089c2:	bd70      	pop	{r4, r5, r6, pc}
 80089c4:	08009a0e 	.word	0x08009a0e
 80089c8:	08009b1a 	.word	0x08009b1a

080089cc <__multadd>:
 80089cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089d0:	4607      	mov	r7, r0
 80089d2:	460c      	mov	r4, r1
 80089d4:	461e      	mov	r6, r3
 80089d6:	2000      	movs	r0, #0
 80089d8:	690d      	ldr	r5, [r1, #16]
 80089da:	f101 0c14 	add.w	ip, r1, #20
 80089de:	f8dc 3000 	ldr.w	r3, [ip]
 80089e2:	3001      	adds	r0, #1
 80089e4:	b299      	uxth	r1, r3
 80089e6:	fb02 6101 	mla	r1, r2, r1, r6
 80089ea:	0c1e      	lsrs	r6, r3, #16
 80089ec:	0c0b      	lsrs	r3, r1, #16
 80089ee:	fb02 3306 	mla	r3, r2, r6, r3
 80089f2:	b289      	uxth	r1, r1
 80089f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80089f8:	4285      	cmp	r5, r0
 80089fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80089fe:	f84c 1b04 	str.w	r1, [ip], #4
 8008a02:	dcec      	bgt.n	80089de <__multadd+0x12>
 8008a04:	b30e      	cbz	r6, 8008a4a <__multadd+0x7e>
 8008a06:	68a3      	ldr	r3, [r4, #8]
 8008a08:	42ab      	cmp	r3, r5
 8008a0a:	dc19      	bgt.n	8008a40 <__multadd+0x74>
 8008a0c:	6861      	ldr	r1, [r4, #4]
 8008a0e:	4638      	mov	r0, r7
 8008a10:	3101      	adds	r1, #1
 8008a12:	f7ff ff79 	bl	8008908 <_Balloc>
 8008a16:	4680      	mov	r8, r0
 8008a18:	b928      	cbnz	r0, 8008a26 <__multadd+0x5a>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	21ba      	movs	r1, #186	@ 0xba
 8008a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8008a50 <__multadd+0x84>)
 8008a20:	480c      	ldr	r0, [pc, #48]	@ (8008a54 <__multadd+0x88>)
 8008a22:	f000 fe3b 	bl	800969c <__assert_func>
 8008a26:	6922      	ldr	r2, [r4, #16]
 8008a28:	f104 010c 	add.w	r1, r4, #12
 8008a2c:	3202      	adds	r2, #2
 8008a2e:	0092      	lsls	r2, r2, #2
 8008a30:	300c      	adds	r0, #12
 8008a32:	f7fd fe26 	bl	8006682 <memcpy>
 8008a36:	4621      	mov	r1, r4
 8008a38:	4638      	mov	r0, r7
 8008a3a:	f7ff ffa5 	bl	8008988 <_Bfree>
 8008a3e:	4644      	mov	r4, r8
 8008a40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a44:	3501      	adds	r5, #1
 8008a46:	615e      	str	r6, [r3, #20]
 8008a48:	6125      	str	r5, [r4, #16]
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a50:	08009a7d 	.word	0x08009a7d
 8008a54:	08009b1a 	.word	0x08009b1a

08008a58 <__s2b>:
 8008a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a5c:	4615      	mov	r5, r2
 8008a5e:	2209      	movs	r2, #9
 8008a60:	461f      	mov	r7, r3
 8008a62:	3308      	adds	r3, #8
 8008a64:	460c      	mov	r4, r1
 8008a66:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a6a:	4606      	mov	r6, r0
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	2100      	movs	r1, #0
 8008a70:	429a      	cmp	r2, r3
 8008a72:	db09      	blt.n	8008a88 <__s2b+0x30>
 8008a74:	4630      	mov	r0, r6
 8008a76:	f7ff ff47 	bl	8008908 <_Balloc>
 8008a7a:	b940      	cbnz	r0, 8008a8e <__s2b+0x36>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	21d3      	movs	r1, #211	@ 0xd3
 8008a80:	4b18      	ldr	r3, [pc, #96]	@ (8008ae4 <__s2b+0x8c>)
 8008a82:	4819      	ldr	r0, [pc, #100]	@ (8008ae8 <__s2b+0x90>)
 8008a84:	f000 fe0a 	bl	800969c <__assert_func>
 8008a88:	0052      	lsls	r2, r2, #1
 8008a8a:	3101      	adds	r1, #1
 8008a8c:	e7f0      	b.n	8008a70 <__s2b+0x18>
 8008a8e:	9b08      	ldr	r3, [sp, #32]
 8008a90:	2d09      	cmp	r5, #9
 8008a92:	6143      	str	r3, [r0, #20]
 8008a94:	f04f 0301 	mov.w	r3, #1
 8008a98:	6103      	str	r3, [r0, #16]
 8008a9a:	dd16      	ble.n	8008aca <__s2b+0x72>
 8008a9c:	f104 0909 	add.w	r9, r4, #9
 8008aa0:	46c8      	mov	r8, r9
 8008aa2:	442c      	add	r4, r5
 8008aa4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008aa8:	4601      	mov	r1, r0
 8008aaa:	220a      	movs	r2, #10
 8008aac:	4630      	mov	r0, r6
 8008aae:	3b30      	subs	r3, #48	@ 0x30
 8008ab0:	f7ff ff8c 	bl	80089cc <__multadd>
 8008ab4:	45a0      	cmp	r8, r4
 8008ab6:	d1f5      	bne.n	8008aa4 <__s2b+0x4c>
 8008ab8:	f1a5 0408 	sub.w	r4, r5, #8
 8008abc:	444c      	add	r4, r9
 8008abe:	1b2d      	subs	r5, r5, r4
 8008ac0:	1963      	adds	r3, r4, r5
 8008ac2:	42bb      	cmp	r3, r7
 8008ac4:	db04      	blt.n	8008ad0 <__s2b+0x78>
 8008ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aca:	2509      	movs	r5, #9
 8008acc:	340a      	adds	r4, #10
 8008ace:	e7f6      	b.n	8008abe <__s2b+0x66>
 8008ad0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008ad4:	4601      	mov	r1, r0
 8008ad6:	220a      	movs	r2, #10
 8008ad8:	4630      	mov	r0, r6
 8008ada:	3b30      	subs	r3, #48	@ 0x30
 8008adc:	f7ff ff76 	bl	80089cc <__multadd>
 8008ae0:	e7ee      	b.n	8008ac0 <__s2b+0x68>
 8008ae2:	bf00      	nop
 8008ae4:	08009a7d 	.word	0x08009a7d
 8008ae8:	08009b1a 	.word	0x08009b1a

08008aec <__hi0bits>:
 8008aec:	4603      	mov	r3, r0
 8008aee:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008af2:	bf3a      	itte	cc
 8008af4:	0403      	lslcc	r3, r0, #16
 8008af6:	2010      	movcc	r0, #16
 8008af8:	2000      	movcs	r0, #0
 8008afa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008afe:	bf3c      	itt	cc
 8008b00:	021b      	lslcc	r3, r3, #8
 8008b02:	3008      	addcc	r0, #8
 8008b04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b08:	bf3c      	itt	cc
 8008b0a:	011b      	lslcc	r3, r3, #4
 8008b0c:	3004      	addcc	r0, #4
 8008b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b12:	bf3c      	itt	cc
 8008b14:	009b      	lslcc	r3, r3, #2
 8008b16:	3002      	addcc	r0, #2
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	db05      	blt.n	8008b28 <__hi0bits+0x3c>
 8008b1c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008b20:	f100 0001 	add.w	r0, r0, #1
 8008b24:	bf08      	it	eq
 8008b26:	2020      	moveq	r0, #32
 8008b28:	4770      	bx	lr

08008b2a <__lo0bits>:
 8008b2a:	6803      	ldr	r3, [r0, #0]
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	f013 0007 	ands.w	r0, r3, #7
 8008b32:	d00b      	beq.n	8008b4c <__lo0bits+0x22>
 8008b34:	07d9      	lsls	r1, r3, #31
 8008b36:	d421      	bmi.n	8008b7c <__lo0bits+0x52>
 8008b38:	0798      	lsls	r0, r3, #30
 8008b3a:	bf49      	itett	mi
 8008b3c:	085b      	lsrmi	r3, r3, #1
 8008b3e:	089b      	lsrpl	r3, r3, #2
 8008b40:	2001      	movmi	r0, #1
 8008b42:	6013      	strmi	r3, [r2, #0]
 8008b44:	bf5c      	itt	pl
 8008b46:	2002      	movpl	r0, #2
 8008b48:	6013      	strpl	r3, [r2, #0]
 8008b4a:	4770      	bx	lr
 8008b4c:	b299      	uxth	r1, r3
 8008b4e:	b909      	cbnz	r1, 8008b54 <__lo0bits+0x2a>
 8008b50:	2010      	movs	r0, #16
 8008b52:	0c1b      	lsrs	r3, r3, #16
 8008b54:	b2d9      	uxtb	r1, r3
 8008b56:	b909      	cbnz	r1, 8008b5c <__lo0bits+0x32>
 8008b58:	3008      	adds	r0, #8
 8008b5a:	0a1b      	lsrs	r3, r3, #8
 8008b5c:	0719      	lsls	r1, r3, #28
 8008b5e:	bf04      	itt	eq
 8008b60:	091b      	lsreq	r3, r3, #4
 8008b62:	3004      	addeq	r0, #4
 8008b64:	0799      	lsls	r1, r3, #30
 8008b66:	bf04      	itt	eq
 8008b68:	089b      	lsreq	r3, r3, #2
 8008b6a:	3002      	addeq	r0, #2
 8008b6c:	07d9      	lsls	r1, r3, #31
 8008b6e:	d403      	bmi.n	8008b78 <__lo0bits+0x4e>
 8008b70:	085b      	lsrs	r3, r3, #1
 8008b72:	f100 0001 	add.w	r0, r0, #1
 8008b76:	d003      	beq.n	8008b80 <__lo0bits+0x56>
 8008b78:	6013      	str	r3, [r2, #0]
 8008b7a:	4770      	bx	lr
 8008b7c:	2000      	movs	r0, #0
 8008b7e:	4770      	bx	lr
 8008b80:	2020      	movs	r0, #32
 8008b82:	4770      	bx	lr

08008b84 <__i2b>:
 8008b84:	b510      	push	{r4, lr}
 8008b86:	460c      	mov	r4, r1
 8008b88:	2101      	movs	r1, #1
 8008b8a:	f7ff febd 	bl	8008908 <_Balloc>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	b928      	cbnz	r0, 8008b9e <__i2b+0x1a>
 8008b92:	f240 1145 	movw	r1, #325	@ 0x145
 8008b96:	4b04      	ldr	r3, [pc, #16]	@ (8008ba8 <__i2b+0x24>)
 8008b98:	4804      	ldr	r0, [pc, #16]	@ (8008bac <__i2b+0x28>)
 8008b9a:	f000 fd7f 	bl	800969c <__assert_func>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	6144      	str	r4, [r0, #20]
 8008ba2:	6103      	str	r3, [r0, #16]
 8008ba4:	bd10      	pop	{r4, pc}
 8008ba6:	bf00      	nop
 8008ba8:	08009a7d 	.word	0x08009a7d
 8008bac:	08009b1a 	.word	0x08009b1a

08008bb0 <__multiply>:
 8008bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb4:	4614      	mov	r4, r2
 8008bb6:	690a      	ldr	r2, [r1, #16]
 8008bb8:	6923      	ldr	r3, [r4, #16]
 8008bba:	460f      	mov	r7, r1
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	bfa2      	ittt	ge
 8008bc0:	4623      	movge	r3, r4
 8008bc2:	460c      	movge	r4, r1
 8008bc4:	461f      	movge	r7, r3
 8008bc6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008bca:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008bce:	68a3      	ldr	r3, [r4, #8]
 8008bd0:	6861      	ldr	r1, [r4, #4]
 8008bd2:	eb0a 0609 	add.w	r6, sl, r9
 8008bd6:	42b3      	cmp	r3, r6
 8008bd8:	b085      	sub	sp, #20
 8008bda:	bfb8      	it	lt
 8008bdc:	3101      	addlt	r1, #1
 8008bde:	f7ff fe93 	bl	8008908 <_Balloc>
 8008be2:	b930      	cbnz	r0, 8008bf2 <__multiply+0x42>
 8008be4:	4602      	mov	r2, r0
 8008be6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008bea:	4b43      	ldr	r3, [pc, #268]	@ (8008cf8 <__multiply+0x148>)
 8008bec:	4843      	ldr	r0, [pc, #268]	@ (8008cfc <__multiply+0x14c>)
 8008bee:	f000 fd55 	bl	800969c <__assert_func>
 8008bf2:	f100 0514 	add.w	r5, r0, #20
 8008bf6:	462b      	mov	r3, r5
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008bfe:	4543      	cmp	r3, r8
 8008c00:	d321      	bcc.n	8008c46 <__multiply+0x96>
 8008c02:	f107 0114 	add.w	r1, r7, #20
 8008c06:	f104 0214 	add.w	r2, r4, #20
 8008c0a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008c0e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008c12:	9302      	str	r3, [sp, #8]
 8008c14:	1b13      	subs	r3, r2, r4
 8008c16:	3b15      	subs	r3, #21
 8008c18:	f023 0303 	bic.w	r3, r3, #3
 8008c1c:	3304      	adds	r3, #4
 8008c1e:	f104 0715 	add.w	r7, r4, #21
 8008c22:	42ba      	cmp	r2, r7
 8008c24:	bf38      	it	cc
 8008c26:	2304      	movcc	r3, #4
 8008c28:	9301      	str	r3, [sp, #4]
 8008c2a:	9b02      	ldr	r3, [sp, #8]
 8008c2c:	9103      	str	r1, [sp, #12]
 8008c2e:	428b      	cmp	r3, r1
 8008c30:	d80c      	bhi.n	8008c4c <__multiply+0x9c>
 8008c32:	2e00      	cmp	r6, #0
 8008c34:	dd03      	ble.n	8008c3e <__multiply+0x8e>
 8008c36:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d05a      	beq.n	8008cf4 <__multiply+0x144>
 8008c3e:	6106      	str	r6, [r0, #16]
 8008c40:	b005      	add	sp, #20
 8008c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c46:	f843 2b04 	str.w	r2, [r3], #4
 8008c4a:	e7d8      	b.n	8008bfe <__multiply+0x4e>
 8008c4c:	f8b1 a000 	ldrh.w	sl, [r1]
 8008c50:	f1ba 0f00 	cmp.w	sl, #0
 8008c54:	d023      	beq.n	8008c9e <__multiply+0xee>
 8008c56:	46a9      	mov	r9, r5
 8008c58:	f04f 0c00 	mov.w	ip, #0
 8008c5c:	f104 0e14 	add.w	lr, r4, #20
 8008c60:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008c64:	f8d9 3000 	ldr.w	r3, [r9]
 8008c68:	fa1f fb87 	uxth.w	fp, r7
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	fb0a 330b 	mla	r3, sl, fp, r3
 8008c72:	4463      	add	r3, ip
 8008c74:	f8d9 c000 	ldr.w	ip, [r9]
 8008c78:	0c3f      	lsrs	r7, r7, #16
 8008c7a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008c7e:	fb0a c707 	mla	r7, sl, r7, ip
 8008c82:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008c8c:	4572      	cmp	r2, lr
 8008c8e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008c92:	f849 3b04 	str.w	r3, [r9], #4
 8008c96:	d8e3      	bhi.n	8008c60 <__multiply+0xb0>
 8008c98:	9b01      	ldr	r3, [sp, #4]
 8008c9a:	f845 c003 	str.w	ip, [r5, r3]
 8008c9e:	9b03      	ldr	r3, [sp, #12]
 8008ca0:	3104      	adds	r1, #4
 8008ca2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008ca6:	f1b9 0f00 	cmp.w	r9, #0
 8008caa:	d021      	beq.n	8008cf0 <__multiply+0x140>
 8008cac:	46ae      	mov	lr, r5
 8008cae:	f04f 0a00 	mov.w	sl, #0
 8008cb2:	682b      	ldr	r3, [r5, #0]
 8008cb4:	f104 0c14 	add.w	ip, r4, #20
 8008cb8:	f8bc b000 	ldrh.w	fp, [ip]
 8008cbc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	fb09 770b 	mla	r7, r9, fp, r7
 8008cc6:	4457      	add	r7, sl
 8008cc8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008ccc:	f84e 3b04 	str.w	r3, [lr], #4
 8008cd0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008cd4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008cd8:	f8be 3000 	ldrh.w	r3, [lr]
 8008cdc:	4562      	cmp	r2, ip
 8008cde:	fb09 330a 	mla	r3, r9, sl, r3
 8008ce2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008ce6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008cea:	d8e5      	bhi.n	8008cb8 <__multiply+0x108>
 8008cec:	9f01      	ldr	r7, [sp, #4]
 8008cee:	51eb      	str	r3, [r5, r7]
 8008cf0:	3504      	adds	r5, #4
 8008cf2:	e79a      	b.n	8008c2a <__multiply+0x7a>
 8008cf4:	3e01      	subs	r6, #1
 8008cf6:	e79c      	b.n	8008c32 <__multiply+0x82>
 8008cf8:	08009a7d 	.word	0x08009a7d
 8008cfc:	08009b1a 	.word	0x08009b1a

08008d00 <__pow5mult>:
 8008d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d04:	4615      	mov	r5, r2
 8008d06:	f012 0203 	ands.w	r2, r2, #3
 8008d0a:	4607      	mov	r7, r0
 8008d0c:	460e      	mov	r6, r1
 8008d0e:	d007      	beq.n	8008d20 <__pow5mult+0x20>
 8008d10:	4c25      	ldr	r4, [pc, #148]	@ (8008da8 <__pow5mult+0xa8>)
 8008d12:	3a01      	subs	r2, #1
 8008d14:	2300      	movs	r3, #0
 8008d16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d1a:	f7ff fe57 	bl	80089cc <__multadd>
 8008d1e:	4606      	mov	r6, r0
 8008d20:	10ad      	asrs	r5, r5, #2
 8008d22:	d03d      	beq.n	8008da0 <__pow5mult+0xa0>
 8008d24:	69fc      	ldr	r4, [r7, #28]
 8008d26:	b97c      	cbnz	r4, 8008d48 <__pow5mult+0x48>
 8008d28:	2010      	movs	r0, #16
 8008d2a:	f7ff faf7 	bl	800831c <malloc>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	61f8      	str	r0, [r7, #28]
 8008d32:	b928      	cbnz	r0, 8008d40 <__pow5mult+0x40>
 8008d34:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008d38:	4b1c      	ldr	r3, [pc, #112]	@ (8008dac <__pow5mult+0xac>)
 8008d3a:	481d      	ldr	r0, [pc, #116]	@ (8008db0 <__pow5mult+0xb0>)
 8008d3c:	f000 fcae 	bl	800969c <__assert_func>
 8008d40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d44:	6004      	str	r4, [r0, #0]
 8008d46:	60c4      	str	r4, [r0, #12]
 8008d48:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008d4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d50:	b94c      	cbnz	r4, 8008d66 <__pow5mult+0x66>
 8008d52:	f240 2171 	movw	r1, #625	@ 0x271
 8008d56:	4638      	mov	r0, r7
 8008d58:	f7ff ff14 	bl	8008b84 <__i2b>
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	4604      	mov	r4, r0
 8008d60:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d64:	6003      	str	r3, [r0, #0]
 8008d66:	f04f 0900 	mov.w	r9, #0
 8008d6a:	07eb      	lsls	r3, r5, #31
 8008d6c:	d50a      	bpl.n	8008d84 <__pow5mult+0x84>
 8008d6e:	4631      	mov	r1, r6
 8008d70:	4622      	mov	r2, r4
 8008d72:	4638      	mov	r0, r7
 8008d74:	f7ff ff1c 	bl	8008bb0 <__multiply>
 8008d78:	4680      	mov	r8, r0
 8008d7a:	4631      	mov	r1, r6
 8008d7c:	4638      	mov	r0, r7
 8008d7e:	f7ff fe03 	bl	8008988 <_Bfree>
 8008d82:	4646      	mov	r6, r8
 8008d84:	106d      	asrs	r5, r5, #1
 8008d86:	d00b      	beq.n	8008da0 <__pow5mult+0xa0>
 8008d88:	6820      	ldr	r0, [r4, #0]
 8008d8a:	b938      	cbnz	r0, 8008d9c <__pow5mult+0x9c>
 8008d8c:	4622      	mov	r2, r4
 8008d8e:	4621      	mov	r1, r4
 8008d90:	4638      	mov	r0, r7
 8008d92:	f7ff ff0d 	bl	8008bb0 <__multiply>
 8008d96:	6020      	str	r0, [r4, #0]
 8008d98:	f8c0 9000 	str.w	r9, [r0]
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	e7e4      	b.n	8008d6a <__pow5mult+0x6a>
 8008da0:	4630      	mov	r0, r6
 8008da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008da6:	bf00      	nop
 8008da8:	08009b74 	.word	0x08009b74
 8008dac:	08009a0e 	.word	0x08009a0e
 8008db0:	08009b1a 	.word	0x08009b1a

08008db4 <__lshift>:
 8008db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008db8:	460c      	mov	r4, r1
 8008dba:	4607      	mov	r7, r0
 8008dbc:	4691      	mov	r9, r2
 8008dbe:	6923      	ldr	r3, [r4, #16]
 8008dc0:	6849      	ldr	r1, [r1, #4]
 8008dc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008dc6:	68a3      	ldr	r3, [r4, #8]
 8008dc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008dcc:	f108 0601 	add.w	r6, r8, #1
 8008dd0:	42b3      	cmp	r3, r6
 8008dd2:	db0b      	blt.n	8008dec <__lshift+0x38>
 8008dd4:	4638      	mov	r0, r7
 8008dd6:	f7ff fd97 	bl	8008908 <_Balloc>
 8008dda:	4605      	mov	r5, r0
 8008ddc:	b948      	cbnz	r0, 8008df2 <__lshift+0x3e>
 8008dde:	4602      	mov	r2, r0
 8008de0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008de4:	4b27      	ldr	r3, [pc, #156]	@ (8008e84 <__lshift+0xd0>)
 8008de6:	4828      	ldr	r0, [pc, #160]	@ (8008e88 <__lshift+0xd4>)
 8008de8:	f000 fc58 	bl	800969c <__assert_func>
 8008dec:	3101      	adds	r1, #1
 8008dee:	005b      	lsls	r3, r3, #1
 8008df0:	e7ee      	b.n	8008dd0 <__lshift+0x1c>
 8008df2:	2300      	movs	r3, #0
 8008df4:	f100 0114 	add.w	r1, r0, #20
 8008df8:	f100 0210 	add.w	r2, r0, #16
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	4553      	cmp	r3, sl
 8008e00:	db33      	blt.n	8008e6a <__lshift+0xb6>
 8008e02:	6920      	ldr	r0, [r4, #16]
 8008e04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e08:	f104 0314 	add.w	r3, r4, #20
 8008e0c:	f019 091f 	ands.w	r9, r9, #31
 8008e10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e18:	d02b      	beq.n	8008e72 <__lshift+0xbe>
 8008e1a:	468a      	mov	sl, r1
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f1c9 0e20 	rsb	lr, r9, #32
 8008e22:	6818      	ldr	r0, [r3, #0]
 8008e24:	fa00 f009 	lsl.w	r0, r0, r9
 8008e28:	4310      	orrs	r0, r2
 8008e2a:	f84a 0b04 	str.w	r0, [sl], #4
 8008e2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e32:	459c      	cmp	ip, r3
 8008e34:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e38:	d8f3      	bhi.n	8008e22 <__lshift+0x6e>
 8008e3a:	ebac 0304 	sub.w	r3, ip, r4
 8008e3e:	3b15      	subs	r3, #21
 8008e40:	f023 0303 	bic.w	r3, r3, #3
 8008e44:	3304      	adds	r3, #4
 8008e46:	f104 0015 	add.w	r0, r4, #21
 8008e4a:	4584      	cmp	ip, r0
 8008e4c:	bf38      	it	cc
 8008e4e:	2304      	movcc	r3, #4
 8008e50:	50ca      	str	r2, [r1, r3]
 8008e52:	b10a      	cbz	r2, 8008e58 <__lshift+0xa4>
 8008e54:	f108 0602 	add.w	r6, r8, #2
 8008e58:	3e01      	subs	r6, #1
 8008e5a:	4638      	mov	r0, r7
 8008e5c:	4621      	mov	r1, r4
 8008e5e:	612e      	str	r6, [r5, #16]
 8008e60:	f7ff fd92 	bl	8008988 <_Bfree>
 8008e64:	4628      	mov	r0, r5
 8008e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e6e:	3301      	adds	r3, #1
 8008e70:	e7c5      	b.n	8008dfe <__lshift+0x4a>
 8008e72:	3904      	subs	r1, #4
 8008e74:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e78:	459c      	cmp	ip, r3
 8008e7a:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e7e:	d8f9      	bhi.n	8008e74 <__lshift+0xc0>
 8008e80:	e7ea      	b.n	8008e58 <__lshift+0xa4>
 8008e82:	bf00      	nop
 8008e84:	08009a7d 	.word	0x08009a7d
 8008e88:	08009b1a 	.word	0x08009b1a

08008e8c <__mcmp>:
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	690a      	ldr	r2, [r1, #16]
 8008e90:	6900      	ldr	r0, [r0, #16]
 8008e92:	b530      	push	{r4, r5, lr}
 8008e94:	1a80      	subs	r0, r0, r2
 8008e96:	d10e      	bne.n	8008eb6 <__mcmp+0x2a>
 8008e98:	3314      	adds	r3, #20
 8008e9a:	3114      	adds	r1, #20
 8008e9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008ea0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008ea4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008ea8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008eac:	4295      	cmp	r5, r2
 8008eae:	d003      	beq.n	8008eb8 <__mcmp+0x2c>
 8008eb0:	d205      	bcs.n	8008ebe <__mcmp+0x32>
 8008eb2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008eb6:	bd30      	pop	{r4, r5, pc}
 8008eb8:	42a3      	cmp	r3, r4
 8008eba:	d3f3      	bcc.n	8008ea4 <__mcmp+0x18>
 8008ebc:	e7fb      	b.n	8008eb6 <__mcmp+0x2a>
 8008ebe:	2001      	movs	r0, #1
 8008ec0:	e7f9      	b.n	8008eb6 <__mcmp+0x2a>
	...

08008ec4 <__mdiff>:
 8008ec4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec8:	4689      	mov	r9, r1
 8008eca:	4606      	mov	r6, r0
 8008ecc:	4611      	mov	r1, r2
 8008ece:	4648      	mov	r0, r9
 8008ed0:	4614      	mov	r4, r2
 8008ed2:	f7ff ffdb 	bl	8008e8c <__mcmp>
 8008ed6:	1e05      	subs	r5, r0, #0
 8008ed8:	d112      	bne.n	8008f00 <__mdiff+0x3c>
 8008eda:	4629      	mov	r1, r5
 8008edc:	4630      	mov	r0, r6
 8008ede:	f7ff fd13 	bl	8008908 <_Balloc>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	b928      	cbnz	r0, 8008ef2 <__mdiff+0x2e>
 8008ee6:	f240 2137 	movw	r1, #567	@ 0x237
 8008eea:	4b3e      	ldr	r3, [pc, #248]	@ (8008fe4 <__mdiff+0x120>)
 8008eec:	483e      	ldr	r0, [pc, #248]	@ (8008fe8 <__mdiff+0x124>)
 8008eee:	f000 fbd5 	bl	800969c <__assert_func>
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ef8:	4610      	mov	r0, r2
 8008efa:	b003      	add	sp, #12
 8008efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f00:	bfbc      	itt	lt
 8008f02:	464b      	movlt	r3, r9
 8008f04:	46a1      	movlt	r9, r4
 8008f06:	4630      	mov	r0, r6
 8008f08:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008f0c:	bfba      	itte	lt
 8008f0e:	461c      	movlt	r4, r3
 8008f10:	2501      	movlt	r5, #1
 8008f12:	2500      	movge	r5, #0
 8008f14:	f7ff fcf8 	bl	8008908 <_Balloc>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	b918      	cbnz	r0, 8008f24 <__mdiff+0x60>
 8008f1c:	f240 2145 	movw	r1, #581	@ 0x245
 8008f20:	4b30      	ldr	r3, [pc, #192]	@ (8008fe4 <__mdiff+0x120>)
 8008f22:	e7e3      	b.n	8008eec <__mdiff+0x28>
 8008f24:	f100 0b14 	add.w	fp, r0, #20
 8008f28:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008f2c:	f109 0310 	add.w	r3, r9, #16
 8008f30:	60c5      	str	r5, [r0, #12]
 8008f32:	f04f 0c00 	mov.w	ip, #0
 8008f36:	f109 0514 	add.w	r5, r9, #20
 8008f3a:	46d9      	mov	r9, fp
 8008f3c:	6926      	ldr	r6, [r4, #16]
 8008f3e:	f104 0e14 	add.w	lr, r4, #20
 8008f42:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008f46:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008f4a:	9301      	str	r3, [sp, #4]
 8008f4c:	9b01      	ldr	r3, [sp, #4]
 8008f4e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008f52:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008f56:	b281      	uxth	r1, r0
 8008f58:	9301      	str	r3, [sp, #4]
 8008f5a:	fa1f f38a 	uxth.w	r3, sl
 8008f5e:	1a5b      	subs	r3, r3, r1
 8008f60:	0c00      	lsrs	r0, r0, #16
 8008f62:	4463      	add	r3, ip
 8008f64:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008f68:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008f72:	4576      	cmp	r6, lr
 8008f74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f78:	f849 3b04 	str.w	r3, [r9], #4
 8008f7c:	d8e6      	bhi.n	8008f4c <__mdiff+0x88>
 8008f7e:	1b33      	subs	r3, r6, r4
 8008f80:	3b15      	subs	r3, #21
 8008f82:	f023 0303 	bic.w	r3, r3, #3
 8008f86:	3415      	adds	r4, #21
 8008f88:	3304      	adds	r3, #4
 8008f8a:	42a6      	cmp	r6, r4
 8008f8c:	bf38      	it	cc
 8008f8e:	2304      	movcc	r3, #4
 8008f90:	441d      	add	r5, r3
 8008f92:	445b      	add	r3, fp
 8008f94:	461e      	mov	r6, r3
 8008f96:	462c      	mov	r4, r5
 8008f98:	4544      	cmp	r4, r8
 8008f9a:	d30e      	bcc.n	8008fba <__mdiff+0xf6>
 8008f9c:	f108 0103 	add.w	r1, r8, #3
 8008fa0:	1b49      	subs	r1, r1, r5
 8008fa2:	f021 0103 	bic.w	r1, r1, #3
 8008fa6:	3d03      	subs	r5, #3
 8008fa8:	45a8      	cmp	r8, r5
 8008faa:	bf38      	it	cc
 8008fac:	2100      	movcc	r1, #0
 8008fae:	440b      	add	r3, r1
 8008fb0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008fb4:	b199      	cbz	r1, 8008fde <__mdiff+0x11a>
 8008fb6:	6117      	str	r7, [r2, #16]
 8008fb8:	e79e      	b.n	8008ef8 <__mdiff+0x34>
 8008fba:	46e6      	mov	lr, ip
 8008fbc:	f854 1b04 	ldr.w	r1, [r4], #4
 8008fc0:	fa1f fc81 	uxth.w	ip, r1
 8008fc4:	44f4      	add	ip, lr
 8008fc6:	0c08      	lsrs	r0, r1, #16
 8008fc8:	4471      	add	r1, lr
 8008fca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008fce:	b289      	uxth	r1, r1
 8008fd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008fd4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008fd8:	f846 1b04 	str.w	r1, [r6], #4
 8008fdc:	e7dc      	b.n	8008f98 <__mdiff+0xd4>
 8008fde:	3f01      	subs	r7, #1
 8008fe0:	e7e6      	b.n	8008fb0 <__mdiff+0xec>
 8008fe2:	bf00      	nop
 8008fe4:	08009a7d 	.word	0x08009a7d
 8008fe8:	08009b1a 	.word	0x08009b1a

08008fec <__ulp>:
 8008fec:	4b0e      	ldr	r3, [pc, #56]	@ (8009028 <__ulp+0x3c>)
 8008fee:	400b      	ands	r3, r1
 8008ff0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	dc08      	bgt.n	800900a <__ulp+0x1e>
 8008ff8:	425b      	negs	r3, r3
 8008ffa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008ffe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009002:	da04      	bge.n	800900e <__ulp+0x22>
 8009004:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009008:	4113      	asrs	r3, r2
 800900a:	2200      	movs	r2, #0
 800900c:	e008      	b.n	8009020 <__ulp+0x34>
 800900e:	f1a2 0314 	sub.w	r3, r2, #20
 8009012:	2b1e      	cmp	r3, #30
 8009014:	bfd6      	itet	le
 8009016:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800901a:	2201      	movgt	r2, #1
 800901c:	40da      	lsrle	r2, r3
 800901e:	2300      	movs	r3, #0
 8009020:	4619      	mov	r1, r3
 8009022:	4610      	mov	r0, r2
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	7ff00000 	.word	0x7ff00000

0800902c <__b2d>:
 800902c:	6902      	ldr	r2, [r0, #16]
 800902e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009030:	f100 0614 	add.w	r6, r0, #20
 8009034:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8009038:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800903c:	4f1e      	ldr	r7, [pc, #120]	@ (80090b8 <__b2d+0x8c>)
 800903e:	4620      	mov	r0, r4
 8009040:	f7ff fd54 	bl	8008aec <__hi0bits>
 8009044:	4603      	mov	r3, r0
 8009046:	f1c0 0020 	rsb	r0, r0, #32
 800904a:	2b0a      	cmp	r3, #10
 800904c:	f1a2 0504 	sub.w	r5, r2, #4
 8009050:	6008      	str	r0, [r1, #0]
 8009052:	dc12      	bgt.n	800907a <__b2d+0x4e>
 8009054:	42ae      	cmp	r6, r5
 8009056:	bf2c      	ite	cs
 8009058:	2200      	movcs	r2, #0
 800905a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800905e:	f1c3 0c0b 	rsb	ip, r3, #11
 8009062:	3315      	adds	r3, #21
 8009064:	fa24 fe0c 	lsr.w	lr, r4, ip
 8009068:	fa04 f303 	lsl.w	r3, r4, r3
 800906c:	fa22 f20c 	lsr.w	r2, r2, ip
 8009070:	ea4e 0107 	orr.w	r1, lr, r7
 8009074:	431a      	orrs	r2, r3
 8009076:	4610      	mov	r0, r2
 8009078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800907a:	42ae      	cmp	r6, r5
 800907c:	bf36      	itet	cc
 800907e:	f1a2 0508 	subcc.w	r5, r2, #8
 8009082:	2200      	movcs	r2, #0
 8009084:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009088:	3b0b      	subs	r3, #11
 800908a:	d012      	beq.n	80090b2 <__b2d+0x86>
 800908c:	f1c3 0720 	rsb	r7, r3, #32
 8009090:	fa22 f107 	lsr.w	r1, r2, r7
 8009094:	409c      	lsls	r4, r3
 8009096:	430c      	orrs	r4, r1
 8009098:	42b5      	cmp	r5, r6
 800909a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800909e:	bf94      	ite	ls
 80090a0:	2400      	movls	r4, #0
 80090a2:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80090a6:	409a      	lsls	r2, r3
 80090a8:	40fc      	lsrs	r4, r7
 80090aa:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80090ae:	4322      	orrs	r2, r4
 80090b0:	e7e1      	b.n	8009076 <__b2d+0x4a>
 80090b2:	ea44 0107 	orr.w	r1, r4, r7
 80090b6:	e7de      	b.n	8009076 <__b2d+0x4a>
 80090b8:	3ff00000 	.word	0x3ff00000

080090bc <__d2b>:
 80090bc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80090c0:	2101      	movs	r1, #1
 80090c2:	4690      	mov	r8, r2
 80090c4:	4699      	mov	r9, r3
 80090c6:	9e08      	ldr	r6, [sp, #32]
 80090c8:	f7ff fc1e 	bl	8008908 <_Balloc>
 80090cc:	4604      	mov	r4, r0
 80090ce:	b930      	cbnz	r0, 80090de <__d2b+0x22>
 80090d0:	4602      	mov	r2, r0
 80090d2:	f240 310f 	movw	r1, #783	@ 0x30f
 80090d6:	4b23      	ldr	r3, [pc, #140]	@ (8009164 <__d2b+0xa8>)
 80090d8:	4823      	ldr	r0, [pc, #140]	@ (8009168 <__d2b+0xac>)
 80090da:	f000 fadf 	bl	800969c <__assert_func>
 80090de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80090e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80090e6:	b10d      	cbz	r5, 80090ec <__d2b+0x30>
 80090e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80090ec:	9301      	str	r3, [sp, #4]
 80090ee:	f1b8 0300 	subs.w	r3, r8, #0
 80090f2:	d024      	beq.n	800913e <__d2b+0x82>
 80090f4:	4668      	mov	r0, sp
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	f7ff fd17 	bl	8008b2a <__lo0bits>
 80090fc:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009100:	b1d8      	cbz	r0, 800913a <__d2b+0x7e>
 8009102:	f1c0 0320 	rsb	r3, r0, #32
 8009106:	fa02 f303 	lsl.w	r3, r2, r3
 800910a:	430b      	orrs	r3, r1
 800910c:	40c2      	lsrs	r2, r0
 800910e:	6163      	str	r3, [r4, #20]
 8009110:	9201      	str	r2, [sp, #4]
 8009112:	9b01      	ldr	r3, [sp, #4]
 8009114:	2b00      	cmp	r3, #0
 8009116:	bf0c      	ite	eq
 8009118:	2201      	moveq	r2, #1
 800911a:	2202      	movne	r2, #2
 800911c:	61a3      	str	r3, [r4, #24]
 800911e:	6122      	str	r2, [r4, #16]
 8009120:	b1ad      	cbz	r5, 800914e <__d2b+0x92>
 8009122:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009126:	4405      	add	r5, r0
 8009128:	6035      	str	r5, [r6, #0]
 800912a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800912e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009130:	6018      	str	r0, [r3, #0]
 8009132:	4620      	mov	r0, r4
 8009134:	b002      	add	sp, #8
 8009136:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800913a:	6161      	str	r1, [r4, #20]
 800913c:	e7e9      	b.n	8009112 <__d2b+0x56>
 800913e:	a801      	add	r0, sp, #4
 8009140:	f7ff fcf3 	bl	8008b2a <__lo0bits>
 8009144:	9b01      	ldr	r3, [sp, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	6163      	str	r3, [r4, #20]
 800914a:	3020      	adds	r0, #32
 800914c:	e7e7      	b.n	800911e <__d2b+0x62>
 800914e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009152:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009156:	6030      	str	r0, [r6, #0]
 8009158:	6918      	ldr	r0, [r3, #16]
 800915a:	f7ff fcc7 	bl	8008aec <__hi0bits>
 800915e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009162:	e7e4      	b.n	800912e <__d2b+0x72>
 8009164:	08009a7d 	.word	0x08009a7d
 8009168:	08009b1a 	.word	0x08009b1a

0800916c <__ratio>:
 800916c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009170:	b085      	sub	sp, #20
 8009172:	e9cd 1000 	strd	r1, r0, [sp]
 8009176:	a902      	add	r1, sp, #8
 8009178:	f7ff ff58 	bl	800902c <__b2d>
 800917c:	468b      	mov	fp, r1
 800917e:	4606      	mov	r6, r0
 8009180:	460f      	mov	r7, r1
 8009182:	9800      	ldr	r0, [sp, #0]
 8009184:	a903      	add	r1, sp, #12
 8009186:	f7ff ff51 	bl	800902c <__b2d>
 800918a:	460d      	mov	r5, r1
 800918c:	9b01      	ldr	r3, [sp, #4]
 800918e:	4689      	mov	r9, r1
 8009190:	6919      	ldr	r1, [r3, #16]
 8009192:	9b00      	ldr	r3, [sp, #0]
 8009194:	4604      	mov	r4, r0
 8009196:	691b      	ldr	r3, [r3, #16]
 8009198:	4630      	mov	r0, r6
 800919a:	1ac9      	subs	r1, r1, r3
 800919c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80091a0:	1a9b      	subs	r3, r3, r2
 80091a2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	bfcd      	iteet	gt
 80091aa:	463a      	movgt	r2, r7
 80091ac:	462a      	movle	r2, r5
 80091ae:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80091b2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80091b6:	bfd8      	it	le
 80091b8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80091bc:	464b      	mov	r3, r9
 80091be:	4622      	mov	r2, r4
 80091c0:	4659      	mov	r1, fp
 80091c2:	f7f7 fab3 	bl	800072c <__aeabi_ddiv>
 80091c6:	b005      	add	sp, #20
 80091c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080091cc <__copybits>:
 80091cc:	3901      	subs	r1, #1
 80091ce:	b570      	push	{r4, r5, r6, lr}
 80091d0:	1149      	asrs	r1, r1, #5
 80091d2:	6914      	ldr	r4, [r2, #16]
 80091d4:	3101      	adds	r1, #1
 80091d6:	f102 0314 	add.w	r3, r2, #20
 80091da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80091de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80091e2:	1f05      	subs	r5, r0, #4
 80091e4:	42a3      	cmp	r3, r4
 80091e6:	d30c      	bcc.n	8009202 <__copybits+0x36>
 80091e8:	1aa3      	subs	r3, r4, r2
 80091ea:	3b11      	subs	r3, #17
 80091ec:	f023 0303 	bic.w	r3, r3, #3
 80091f0:	3211      	adds	r2, #17
 80091f2:	42a2      	cmp	r2, r4
 80091f4:	bf88      	it	hi
 80091f6:	2300      	movhi	r3, #0
 80091f8:	4418      	add	r0, r3
 80091fa:	2300      	movs	r3, #0
 80091fc:	4288      	cmp	r0, r1
 80091fe:	d305      	bcc.n	800920c <__copybits+0x40>
 8009200:	bd70      	pop	{r4, r5, r6, pc}
 8009202:	f853 6b04 	ldr.w	r6, [r3], #4
 8009206:	f845 6f04 	str.w	r6, [r5, #4]!
 800920a:	e7eb      	b.n	80091e4 <__copybits+0x18>
 800920c:	f840 3b04 	str.w	r3, [r0], #4
 8009210:	e7f4      	b.n	80091fc <__copybits+0x30>

08009212 <__any_on>:
 8009212:	f100 0214 	add.w	r2, r0, #20
 8009216:	6900      	ldr	r0, [r0, #16]
 8009218:	114b      	asrs	r3, r1, #5
 800921a:	4298      	cmp	r0, r3
 800921c:	b510      	push	{r4, lr}
 800921e:	db11      	blt.n	8009244 <__any_on+0x32>
 8009220:	dd0a      	ble.n	8009238 <__any_on+0x26>
 8009222:	f011 011f 	ands.w	r1, r1, #31
 8009226:	d007      	beq.n	8009238 <__any_on+0x26>
 8009228:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800922c:	fa24 f001 	lsr.w	r0, r4, r1
 8009230:	fa00 f101 	lsl.w	r1, r0, r1
 8009234:	428c      	cmp	r4, r1
 8009236:	d10b      	bne.n	8009250 <__any_on+0x3e>
 8009238:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800923c:	4293      	cmp	r3, r2
 800923e:	d803      	bhi.n	8009248 <__any_on+0x36>
 8009240:	2000      	movs	r0, #0
 8009242:	bd10      	pop	{r4, pc}
 8009244:	4603      	mov	r3, r0
 8009246:	e7f7      	b.n	8009238 <__any_on+0x26>
 8009248:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800924c:	2900      	cmp	r1, #0
 800924e:	d0f5      	beq.n	800923c <__any_on+0x2a>
 8009250:	2001      	movs	r0, #1
 8009252:	e7f6      	b.n	8009242 <__any_on+0x30>

08009254 <__submore>:
 8009254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009258:	460c      	mov	r4, r1
 800925a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800925c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009260:	4299      	cmp	r1, r3
 8009262:	d11b      	bne.n	800929c <__submore+0x48>
 8009264:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009268:	f7ff f882 	bl	8008370 <_malloc_r>
 800926c:	b918      	cbnz	r0, 8009276 <__submore+0x22>
 800926e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009276:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800927a:	63a3      	str	r3, [r4, #56]	@ 0x38
 800927c:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8009280:	6360      	str	r0, [r4, #52]	@ 0x34
 8009282:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8009286:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800928a:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800928e:	7043      	strb	r3, [r0, #1]
 8009290:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009294:	7003      	strb	r3, [r0, #0]
 8009296:	6020      	str	r0, [r4, #0]
 8009298:	2000      	movs	r0, #0
 800929a:	e7ea      	b.n	8009272 <__submore+0x1e>
 800929c:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800929e:	0077      	lsls	r7, r6, #1
 80092a0:	463a      	mov	r2, r7
 80092a2:	f000 f80f 	bl	80092c4 <_realloc_r>
 80092a6:	4605      	mov	r5, r0
 80092a8:	2800      	cmp	r0, #0
 80092aa:	d0e0      	beq.n	800926e <__submore+0x1a>
 80092ac:	eb00 0806 	add.w	r8, r0, r6
 80092b0:	4601      	mov	r1, r0
 80092b2:	4632      	mov	r2, r6
 80092b4:	4640      	mov	r0, r8
 80092b6:	f7fd f9e4 	bl	8006682 <memcpy>
 80092ba:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80092be:	f8c4 8000 	str.w	r8, [r4]
 80092c2:	e7e9      	b.n	8009298 <__submore+0x44>

080092c4 <_realloc_r>:
 80092c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092c8:	4680      	mov	r8, r0
 80092ca:	4615      	mov	r5, r2
 80092cc:	460c      	mov	r4, r1
 80092ce:	b921      	cbnz	r1, 80092da <_realloc_r+0x16>
 80092d0:	4611      	mov	r1, r2
 80092d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092d6:	f7ff b84b 	b.w	8008370 <_malloc_r>
 80092da:	b92a      	cbnz	r2, 80092e8 <_realloc_r+0x24>
 80092dc:	f7fe f83c 	bl	8007358 <_free_r>
 80092e0:	2400      	movs	r4, #0
 80092e2:	4620      	mov	r0, r4
 80092e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092e8:	f000 fa0a 	bl	8009700 <_malloc_usable_size_r>
 80092ec:	4285      	cmp	r5, r0
 80092ee:	4606      	mov	r6, r0
 80092f0:	d802      	bhi.n	80092f8 <_realloc_r+0x34>
 80092f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80092f6:	d8f4      	bhi.n	80092e2 <_realloc_r+0x1e>
 80092f8:	4629      	mov	r1, r5
 80092fa:	4640      	mov	r0, r8
 80092fc:	f7ff f838 	bl	8008370 <_malloc_r>
 8009300:	4607      	mov	r7, r0
 8009302:	2800      	cmp	r0, #0
 8009304:	d0ec      	beq.n	80092e0 <_realloc_r+0x1c>
 8009306:	42b5      	cmp	r5, r6
 8009308:	462a      	mov	r2, r5
 800930a:	4621      	mov	r1, r4
 800930c:	bf28      	it	cs
 800930e:	4632      	movcs	r2, r6
 8009310:	f7fd f9b7 	bl	8006682 <memcpy>
 8009314:	4621      	mov	r1, r4
 8009316:	4640      	mov	r0, r8
 8009318:	f7fe f81e 	bl	8007358 <_free_r>
 800931c:	463c      	mov	r4, r7
 800931e:	e7e0      	b.n	80092e2 <_realloc_r+0x1e>

08009320 <_strtoul_l.constprop.0>:
 8009320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009324:	4686      	mov	lr, r0
 8009326:	460d      	mov	r5, r1
 8009328:	4e33      	ldr	r6, [pc, #204]	@ (80093f8 <_strtoul_l.constprop.0+0xd8>)
 800932a:	4628      	mov	r0, r5
 800932c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009330:	5d37      	ldrb	r7, [r6, r4]
 8009332:	f017 0708 	ands.w	r7, r7, #8
 8009336:	d1f8      	bne.n	800932a <_strtoul_l.constprop.0+0xa>
 8009338:	2c2d      	cmp	r4, #45	@ 0x2d
 800933a:	d12f      	bne.n	800939c <_strtoul_l.constprop.0+0x7c>
 800933c:	2701      	movs	r7, #1
 800933e:	782c      	ldrb	r4, [r5, #0]
 8009340:	1c85      	adds	r5, r0, #2
 8009342:	f033 0010 	bics.w	r0, r3, #16
 8009346:	d109      	bne.n	800935c <_strtoul_l.constprop.0+0x3c>
 8009348:	2c30      	cmp	r4, #48	@ 0x30
 800934a:	d12c      	bne.n	80093a6 <_strtoul_l.constprop.0+0x86>
 800934c:	7828      	ldrb	r0, [r5, #0]
 800934e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8009352:	2858      	cmp	r0, #88	@ 0x58
 8009354:	d127      	bne.n	80093a6 <_strtoul_l.constprop.0+0x86>
 8009356:	2310      	movs	r3, #16
 8009358:	786c      	ldrb	r4, [r5, #1]
 800935a:	3502      	adds	r5, #2
 800935c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8009360:	fbb8 f8f3 	udiv	r8, r8, r3
 8009364:	2600      	movs	r6, #0
 8009366:	fb03 f908 	mul.w	r9, r3, r8
 800936a:	4630      	mov	r0, r6
 800936c:	ea6f 0909 	mvn.w	r9, r9
 8009370:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8009374:	f1bc 0f09 	cmp.w	ip, #9
 8009378:	d81c      	bhi.n	80093b4 <_strtoul_l.constprop.0+0x94>
 800937a:	4664      	mov	r4, ip
 800937c:	42a3      	cmp	r3, r4
 800937e:	dd2a      	ble.n	80093d6 <_strtoul_l.constprop.0+0xb6>
 8009380:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8009384:	d007      	beq.n	8009396 <_strtoul_l.constprop.0+0x76>
 8009386:	4580      	cmp	r8, r0
 8009388:	d322      	bcc.n	80093d0 <_strtoul_l.constprop.0+0xb0>
 800938a:	d101      	bne.n	8009390 <_strtoul_l.constprop.0+0x70>
 800938c:	45a1      	cmp	r9, r4
 800938e:	db1f      	blt.n	80093d0 <_strtoul_l.constprop.0+0xb0>
 8009390:	2601      	movs	r6, #1
 8009392:	fb00 4003 	mla	r0, r0, r3, r4
 8009396:	f815 4b01 	ldrb.w	r4, [r5], #1
 800939a:	e7e9      	b.n	8009370 <_strtoul_l.constprop.0+0x50>
 800939c:	2c2b      	cmp	r4, #43	@ 0x2b
 800939e:	bf04      	itt	eq
 80093a0:	782c      	ldrbeq	r4, [r5, #0]
 80093a2:	1c85      	addeq	r5, r0, #2
 80093a4:	e7cd      	b.n	8009342 <_strtoul_l.constprop.0+0x22>
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d1d8      	bne.n	800935c <_strtoul_l.constprop.0+0x3c>
 80093aa:	2c30      	cmp	r4, #48	@ 0x30
 80093ac:	bf0c      	ite	eq
 80093ae:	2308      	moveq	r3, #8
 80093b0:	230a      	movne	r3, #10
 80093b2:	e7d3      	b.n	800935c <_strtoul_l.constprop.0+0x3c>
 80093b4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80093b8:	f1bc 0f19 	cmp.w	ip, #25
 80093bc:	d801      	bhi.n	80093c2 <_strtoul_l.constprop.0+0xa2>
 80093be:	3c37      	subs	r4, #55	@ 0x37
 80093c0:	e7dc      	b.n	800937c <_strtoul_l.constprop.0+0x5c>
 80093c2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80093c6:	f1bc 0f19 	cmp.w	ip, #25
 80093ca:	d804      	bhi.n	80093d6 <_strtoul_l.constprop.0+0xb6>
 80093cc:	3c57      	subs	r4, #87	@ 0x57
 80093ce:	e7d5      	b.n	800937c <_strtoul_l.constprop.0+0x5c>
 80093d0:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80093d4:	e7df      	b.n	8009396 <_strtoul_l.constprop.0+0x76>
 80093d6:	1c73      	adds	r3, r6, #1
 80093d8:	d106      	bne.n	80093e8 <_strtoul_l.constprop.0+0xc8>
 80093da:	2322      	movs	r3, #34	@ 0x22
 80093dc:	4630      	mov	r0, r6
 80093de:	f8ce 3000 	str.w	r3, [lr]
 80093e2:	b932      	cbnz	r2, 80093f2 <_strtoul_l.constprop.0+0xd2>
 80093e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093e8:	b107      	cbz	r7, 80093ec <_strtoul_l.constprop.0+0xcc>
 80093ea:	4240      	negs	r0, r0
 80093ec:	2a00      	cmp	r2, #0
 80093ee:	d0f9      	beq.n	80093e4 <_strtoul_l.constprop.0+0xc4>
 80093f0:	b106      	cbz	r6, 80093f4 <_strtoul_l.constprop.0+0xd4>
 80093f2:	1e69      	subs	r1, r5, #1
 80093f4:	6011      	str	r1, [r2, #0]
 80093f6:	e7f5      	b.n	80093e4 <_strtoul_l.constprop.0+0xc4>
 80093f8:	08009901 	.word	0x08009901

080093fc <_strtoul_r>:
 80093fc:	f7ff bf90 	b.w	8009320 <_strtoul_l.constprop.0>

08009400 <__swbuf_r>:
 8009400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009402:	460e      	mov	r6, r1
 8009404:	4614      	mov	r4, r2
 8009406:	4605      	mov	r5, r0
 8009408:	b118      	cbz	r0, 8009412 <__swbuf_r+0x12>
 800940a:	6a03      	ldr	r3, [r0, #32]
 800940c:	b90b      	cbnz	r3, 8009412 <__swbuf_r+0x12>
 800940e:	f7fc f9d3 	bl	80057b8 <__sinit>
 8009412:	69a3      	ldr	r3, [r4, #24]
 8009414:	60a3      	str	r3, [r4, #8]
 8009416:	89a3      	ldrh	r3, [r4, #12]
 8009418:	071a      	lsls	r2, r3, #28
 800941a:	d501      	bpl.n	8009420 <__swbuf_r+0x20>
 800941c:	6923      	ldr	r3, [r4, #16]
 800941e:	b943      	cbnz	r3, 8009432 <__swbuf_r+0x32>
 8009420:	4621      	mov	r1, r4
 8009422:	4628      	mov	r0, r5
 8009424:	f000 f82a 	bl	800947c <__swsetup_r>
 8009428:	b118      	cbz	r0, 8009432 <__swbuf_r+0x32>
 800942a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800942e:	4638      	mov	r0, r7
 8009430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009432:	6823      	ldr	r3, [r4, #0]
 8009434:	6922      	ldr	r2, [r4, #16]
 8009436:	b2f6      	uxtb	r6, r6
 8009438:	1a98      	subs	r0, r3, r2
 800943a:	6963      	ldr	r3, [r4, #20]
 800943c:	4637      	mov	r7, r6
 800943e:	4283      	cmp	r3, r0
 8009440:	dc05      	bgt.n	800944e <__swbuf_r+0x4e>
 8009442:	4621      	mov	r1, r4
 8009444:	4628      	mov	r0, r5
 8009446:	f7ff fa2b 	bl	80088a0 <_fflush_r>
 800944a:	2800      	cmp	r0, #0
 800944c:	d1ed      	bne.n	800942a <__swbuf_r+0x2a>
 800944e:	68a3      	ldr	r3, [r4, #8]
 8009450:	3b01      	subs	r3, #1
 8009452:	60a3      	str	r3, [r4, #8]
 8009454:	6823      	ldr	r3, [r4, #0]
 8009456:	1c5a      	adds	r2, r3, #1
 8009458:	6022      	str	r2, [r4, #0]
 800945a:	701e      	strb	r6, [r3, #0]
 800945c:	6962      	ldr	r2, [r4, #20]
 800945e:	1c43      	adds	r3, r0, #1
 8009460:	429a      	cmp	r2, r3
 8009462:	d004      	beq.n	800946e <__swbuf_r+0x6e>
 8009464:	89a3      	ldrh	r3, [r4, #12]
 8009466:	07db      	lsls	r3, r3, #31
 8009468:	d5e1      	bpl.n	800942e <__swbuf_r+0x2e>
 800946a:	2e0a      	cmp	r6, #10
 800946c:	d1df      	bne.n	800942e <__swbuf_r+0x2e>
 800946e:	4621      	mov	r1, r4
 8009470:	4628      	mov	r0, r5
 8009472:	f7ff fa15 	bl	80088a0 <_fflush_r>
 8009476:	2800      	cmp	r0, #0
 8009478:	d0d9      	beq.n	800942e <__swbuf_r+0x2e>
 800947a:	e7d6      	b.n	800942a <__swbuf_r+0x2a>

0800947c <__swsetup_r>:
 800947c:	b538      	push	{r3, r4, r5, lr}
 800947e:	4b29      	ldr	r3, [pc, #164]	@ (8009524 <__swsetup_r+0xa8>)
 8009480:	4605      	mov	r5, r0
 8009482:	6818      	ldr	r0, [r3, #0]
 8009484:	460c      	mov	r4, r1
 8009486:	b118      	cbz	r0, 8009490 <__swsetup_r+0x14>
 8009488:	6a03      	ldr	r3, [r0, #32]
 800948a:	b90b      	cbnz	r3, 8009490 <__swsetup_r+0x14>
 800948c:	f7fc f994 	bl	80057b8 <__sinit>
 8009490:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009494:	0719      	lsls	r1, r3, #28
 8009496:	d422      	bmi.n	80094de <__swsetup_r+0x62>
 8009498:	06da      	lsls	r2, r3, #27
 800949a:	d407      	bmi.n	80094ac <__swsetup_r+0x30>
 800949c:	2209      	movs	r2, #9
 800949e:	602a      	str	r2, [r5, #0]
 80094a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80094a8:	81a3      	strh	r3, [r4, #12]
 80094aa:	e033      	b.n	8009514 <__swsetup_r+0x98>
 80094ac:	0758      	lsls	r0, r3, #29
 80094ae:	d512      	bpl.n	80094d6 <__swsetup_r+0x5a>
 80094b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80094b2:	b141      	cbz	r1, 80094c6 <__swsetup_r+0x4a>
 80094b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80094b8:	4299      	cmp	r1, r3
 80094ba:	d002      	beq.n	80094c2 <__swsetup_r+0x46>
 80094bc:	4628      	mov	r0, r5
 80094be:	f7fd ff4b 	bl	8007358 <_free_r>
 80094c2:	2300      	movs	r3, #0
 80094c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80094c6:	89a3      	ldrh	r3, [r4, #12]
 80094c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80094cc:	81a3      	strh	r3, [r4, #12]
 80094ce:	2300      	movs	r3, #0
 80094d0:	6063      	str	r3, [r4, #4]
 80094d2:	6923      	ldr	r3, [r4, #16]
 80094d4:	6023      	str	r3, [r4, #0]
 80094d6:	89a3      	ldrh	r3, [r4, #12]
 80094d8:	f043 0308 	orr.w	r3, r3, #8
 80094dc:	81a3      	strh	r3, [r4, #12]
 80094de:	6923      	ldr	r3, [r4, #16]
 80094e0:	b94b      	cbnz	r3, 80094f6 <__swsetup_r+0x7a>
 80094e2:	89a3      	ldrh	r3, [r4, #12]
 80094e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80094e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094ec:	d003      	beq.n	80094f6 <__swsetup_r+0x7a>
 80094ee:	4621      	mov	r1, r4
 80094f0:	4628      	mov	r0, r5
 80094f2:	f000 f84b 	bl	800958c <__smakebuf_r>
 80094f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094fa:	f013 0201 	ands.w	r2, r3, #1
 80094fe:	d00a      	beq.n	8009516 <__swsetup_r+0x9a>
 8009500:	2200      	movs	r2, #0
 8009502:	60a2      	str	r2, [r4, #8]
 8009504:	6962      	ldr	r2, [r4, #20]
 8009506:	4252      	negs	r2, r2
 8009508:	61a2      	str	r2, [r4, #24]
 800950a:	6922      	ldr	r2, [r4, #16]
 800950c:	b942      	cbnz	r2, 8009520 <__swsetup_r+0xa4>
 800950e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009512:	d1c5      	bne.n	80094a0 <__swsetup_r+0x24>
 8009514:	bd38      	pop	{r3, r4, r5, pc}
 8009516:	0799      	lsls	r1, r3, #30
 8009518:	bf58      	it	pl
 800951a:	6962      	ldrpl	r2, [r4, #20]
 800951c:	60a2      	str	r2, [r4, #8]
 800951e:	e7f4      	b.n	800950a <__swsetup_r+0x8e>
 8009520:	2000      	movs	r0, #0
 8009522:	e7f7      	b.n	8009514 <__swsetup_r+0x98>
 8009524:	2000018c 	.word	0x2000018c

08009528 <__ascii_wctomb>:
 8009528:	4603      	mov	r3, r0
 800952a:	4608      	mov	r0, r1
 800952c:	b141      	cbz	r1, 8009540 <__ascii_wctomb+0x18>
 800952e:	2aff      	cmp	r2, #255	@ 0xff
 8009530:	d904      	bls.n	800953c <__ascii_wctomb+0x14>
 8009532:	228a      	movs	r2, #138	@ 0x8a
 8009534:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009538:	601a      	str	r2, [r3, #0]
 800953a:	4770      	bx	lr
 800953c:	2001      	movs	r0, #1
 800953e:	700a      	strb	r2, [r1, #0]
 8009540:	4770      	bx	lr

08009542 <__swhatbuf_r>:
 8009542:	b570      	push	{r4, r5, r6, lr}
 8009544:	460c      	mov	r4, r1
 8009546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800954a:	4615      	mov	r5, r2
 800954c:	2900      	cmp	r1, #0
 800954e:	461e      	mov	r6, r3
 8009550:	b096      	sub	sp, #88	@ 0x58
 8009552:	da0c      	bge.n	800956e <__swhatbuf_r+0x2c>
 8009554:	89a3      	ldrh	r3, [r4, #12]
 8009556:	2100      	movs	r1, #0
 8009558:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800955c:	bf14      	ite	ne
 800955e:	2340      	movne	r3, #64	@ 0x40
 8009560:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009564:	2000      	movs	r0, #0
 8009566:	6031      	str	r1, [r6, #0]
 8009568:	602b      	str	r3, [r5, #0]
 800956a:	b016      	add	sp, #88	@ 0x58
 800956c:	bd70      	pop	{r4, r5, r6, pc}
 800956e:	466a      	mov	r2, sp
 8009570:	f000 f862 	bl	8009638 <_fstat_r>
 8009574:	2800      	cmp	r0, #0
 8009576:	dbed      	blt.n	8009554 <__swhatbuf_r+0x12>
 8009578:	9901      	ldr	r1, [sp, #4]
 800957a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800957e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009582:	4259      	negs	r1, r3
 8009584:	4159      	adcs	r1, r3
 8009586:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800958a:	e7eb      	b.n	8009564 <__swhatbuf_r+0x22>

0800958c <__smakebuf_r>:
 800958c:	898b      	ldrh	r3, [r1, #12]
 800958e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009590:	079d      	lsls	r5, r3, #30
 8009592:	4606      	mov	r6, r0
 8009594:	460c      	mov	r4, r1
 8009596:	d507      	bpl.n	80095a8 <__smakebuf_r+0x1c>
 8009598:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800959c:	6023      	str	r3, [r4, #0]
 800959e:	6123      	str	r3, [r4, #16]
 80095a0:	2301      	movs	r3, #1
 80095a2:	6163      	str	r3, [r4, #20]
 80095a4:	b003      	add	sp, #12
 80095a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095a8:	466a      	mov	r2, sp
 80095aa:	ab01      	add	r3, sp, #4
 80095ac:	f7ff ffc9 	bl	8009542 <__swhatbuf_r>
 80095b0:	9f00      	ldr	r7, [sp, #0]
 80095b2:	4605      	mov	r5, r0
 80095b4:	4639      	mov	r1, r7
 80095b6:	4630      	mov	r0, r6
 80095b8:	f7fe feda 	bl	8008370 <_malloc_r>
 80095bc:	b948      	cbnz	r0, 80095d2 <__smakebuf_r+0x46>
 80095be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095c2:	059a      	lsls	r2, r3, #22
 80095c4:	d4ee      	bmi.n	80095a4 <__smakebuf_r+0x18>
 80095c6:	f023 0303 	bic.w	r3, r3, #3
 80095ca:	f043 0302 	orr.w	r3, r3, #2
 80095ce:	81a3      	strh	r3, [r4, #12]
 80095d0:	e7e2      	b.n	8009598 <__smakebuf_r+0xc>
 80095d2:	89a3      	ldrh	r3, [r4, #12]
 80095d4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80095d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095dc:	81a3      	strh	r3, [r4, #12]
 80095de:	9b01      	ldr	r3, [sp, #4]
 80095e0:	6020      	str	r0, [r4, #0]
 80095e2:	b15b      	cbz	r3, 80095fc <__smakebuf_r+0x70>
 80095e4:	4630      	mov	r0, r6
 80095e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095ea:	f000 f837 	bl	800965c <_isatty_r>
 80095ee:	b128      	cbz	r0, 80095fc <__smakebuf_r+0x70>
 80095f0:	89a3      	ldrh	r3, [r4, #12]
 80095f2:	f023 0303 	bic.w	r3, r3, #3
 80095f6:	f043 0301 	orr.w	r3, r3, #1
 80095fa:	81a3      	strh	r3, [r4, #12]
 80095fc:	89a3      	ldrh	r3, [r4, #12]
 80095fe:	431d      	orrs	r5, r3
 8009600:	81a5      	strh	r5, [r4, #12]
 8009602:	e7cf      	b.n	80095a4 <__smakebuf_r+0x18>

08009604 <memmove>:
 8009604:	4288      	cmp	r0, r1
 8009606:	b510      	push	{r4, lr}
 8009608:	eb01 0402 	add.w	r4, r1, r2
 800960c:	d902      	bls.n	8009614 <memmove+0x10>
 800960e:	4284      	cmp	r4, r0
 8009610:	4623      	mov	r3, r4
 8009612:	d807      	bhi.n	8009624 <memmove+0x20>
 8009614:	1e43      	subs	r3, r0, #1
 8009616:	42a1      	cmp	r1, r4
 8009618:	d008      	beq.n	800962c <memmove+0x28>
 800961a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800961e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009622:	e7f8      	b.n	8009616 <memmove+0x12>
 8009624:	4601      	mov	r1, r0
 8009626:	4402      	add	r2, r0
 8009628:	428a      	cmp	r2, r1
 800962a:	d100      	bne.n	800962e <memmove+0x2a>
 800962c:	bd10      	pop	{r4, pc}
 800962e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009632:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009636:	e7f7      	b.n	8009628 <memmove+0x24>

08009638 <_fstat_r>:
 8009638:	b538      	push	{r3, r4, r5, lr}
 800963a:	2300      	movs	r3, #0
 800963c:	4d06      	ldr	r5, [pc, #24]	@ (8009658 <_fstat_r+0x20>)
 800963e:	4604      	mov	r4, r0
 8009640:	4608      	mov	r0, r1
 8009642:	4611      	mov	r1, r2
 8009644:	602b      	str	r3, [r5, #0]
 8009646:	f7f8 fd67 	bl	8002118 <_fstat>
 800964a:	1c43      	adds	r3, r0, #1
 800964c:	d102      	bne.n	8009654 <_fstat_r+0x1c>
 800964e:	682b      	ldr	r3, [r5, #0]
 8009650:	b103      	cbz	r3, 8009654 <_fstat_r+0x1c>
 8009652:	6023      	str	r3, [r4, #0]
 8009654:	bd38      	pop	{r3, r4, r5, pc}
 8009656:	bf00      	nop
 8009658:	200004b0 	.word	0x200004b0

0800965c <_isatty_r>:
 800965c:	b538      	push	{r3, r4, r5, lr}
 800965e:	2300      	movs	r3, #0
 8009660:	4d05      	ldr	r5, [pc, #20]	@ (8009678 <_isatty_r+0x1c>)
 8009662:	4604      	mov	r4, r0
 8009664:	4608      	mov	r0, r1
 8009666:	602b      	str	r3, [r5, #0]
 8009668:	f7f8 fd65 	bl	8002136 <_isatty>
 800966c:	1c43      	adds	r3, r0, #1
 800966e:	d102      	bne.n	8009676 <_isatty_r+0x1a>
 8009670:	682b      	ldr	r3, [r5, #0]
 8009672:	b103      	cbz	r3, 8009676 <_isatty_r+0x1a>
 8009674:	6023      	str	r3, [r4, #0]
 8009676:	bd38      	pop	{r3, r4, r5, pc}
 8009678:	200004b0 	.word	0x200004b0

0800967c <_sbrk_r>:
 800967c:	b538      	push	{r3, r4, r5, lr}
 800967e:	2300      	movs	r3, #0
 8009680:	4d05      	ldr	r5, [pc, #20]	@ (8009698 <_sbrk_r+0x1c>)
 8009682:	4604      	mov	r4, r0
 8009684:	4608      	mov	r0, r1
 8009686:	602b      	str	r3, [r5, #0]
 8009688:	f7f8 fd6c 	bl	8002164 <_sbrk>
 800968c:	1c43      	adds	r3, r0, #1
 800968e:	d102      	bne.n	8009696 <_sbrk_r+0x1a>
 8009690:	682b      	ldr	r3, [r5, #0]
 8009692:	b103      	cbz	r3, 8009696 <_sbrk_r+0x1a>
 8009694:	6023      	str	r3, [r4, #0]
 8009696:	bd38      	pop	{r3, r4, r5, pc}
 8009698:	200004b0 	.word	0x200004b0

0800969c <__assert_func>:
 800969c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800969e:	4614      	mov	r4, r2
 80096a0:	461a      	mov	r2, r3
 80096a2:	4b09      	ldr	r3, [pc, #36]	@ (80096c8 <__assert_func+0x2c>)
 80096a4:	4605      	mov	r5, r0
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	68d8      	ldr	r0, [r3, #12]
 80096aa:	b954      	cbnz	r4, 80096c2 <__assert_func+0x26>
 80096ac:	4b07      	ldr	r3, [pc, #28]	@ (80096cc <__assert_func+0x30>)
 80096ae:	461c      	mov	r4, r3
 80096b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80096b4:	9100      	str	r1, [sp, #0]
 80096b6:	462b      	mov	r3, r5
 80096b8:	4905      	ldr	r1, [pc, #20]	@ (80096d0 <__assert_func+0x34>)
 80096ba:	f000 f829 	bl	8009710 <fiprintf>
 80096be:	f000 f839 	bl	8009734 <abort>
 80096c2:	4b04      	ldr	r3, [pc, #16]	@ (80096d4 <__assert_func+0x38>)
 80096c4:	e7f4      	b.n	80096b0 <__assert_func+0x14>
 80096c6:	bf00      	nop
 80096c8:	2000018c 	.word	0x2000018c
 80096cc:	08009cab 	.word	0x08009cab
 80096d0:	08009c7d 	.word	0x08009c7d
 80096d4:	08009c70 	.word	0x08009c70

080096d8 <_calloc_r>:
 80096d8:	b570      	push	{r4, r5, r6, lr}
 80096da:	fba1 5402 	umull	r5, r4, r1, r2
 80096de:	b93c      	cbnz	r4, 80096f0 <_calloc_r+0x18>
 80096e0:	4629      	mov	r1, r5
 80096e2:	f7fe fe45 	bl	8008370 <_malloc_r>
 80096e6:	4606      	mov	r6, r0
 80096e8:	b928      	cbnz	r0, 80096f6 <_calloc_r+0x1e>
 80096ea:	2600      	movs	r6, #0
 80096ec:	4630      	mov	r0, r6
 80096ee:	bd70      	pop	{r4, r5, r6, pc}
 80096f0:	220c      	movs	r2, #12
 80096f2:	6002      	str	r2, [r0, #0]
 80096f4:	e7f9      	b.n	80096ea <_calloc_r+0x12>
 80096f6:	462a      	mov	r2, r5
 80096f8:	4621      	mov	r1, r4
 80096fa:	f7fc ff35 	bl	8006568 <memset>
 80096fe:	e7f5      	b.n	80096ec <_calloc_r+0x14>

08009700 <_malloc_usable_size_r>:
 8009700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009704:	1f18      	subs	r0, r3, #4
 8009706:	2b00      	cmp	r3, #0
 8009708:	bfbc      	itt	lt
 800970a:	580b      	ldrlt	r3, [r1, r0]
 800970c:	18c0      	addlt	r0, r0, r3
 800970e:	4770      	bx	lr

08009710 <fiprintf>:
 8009710:	b40e      	push	{r1, r2, r3}
 8009712:	b503      	push	{r0, r1, lr}
 8009714:	4601      	mov	r1, r0
 8009716:	ab03      	add	r3, sp, #12
 8009718:	4805      	ldr	r0, [pc, #20]	@ (8009730 <fiprintf+0x20>)
 800971a:	f853 2b04 	ldr.w	r2, [r3], #4
 800971e:	6800      	ldr	r0, [r0, #0]
 8009720:	9301      	str	r3, [sp, #4]
 8009722:	f7fe fce3 	bl	80080ec <_vfiprintf_r>
 8009726:	b002      	add	sp, #8
 8009728:	f85d eb04 	ldr.w	lr, [sp], #4
 800972c:	b003      	add	sp, #12
 800972e:	4770      	bx	lr
 8009730:	2000018c 	.word	0x2000018c

08009734 <abort>:
 8009734:	2006      	movs	r0, #6
 8009736:	b508      	push	{r3, lr}
 8009738:	f000 f82c 	bl	8009794 <raise>
 800973c:	2001      	movs	r0, #1
 800973e:	f7f8 fcb8 	bl	80020b2 <_exit>

08009742 <_raise_r>:
 8009742:	291f      	cmp	r1, #31
 8009744:	b538      	push	{r3, r4, r5, lr}
 8009746:	4605      	mov	r5, r0
 8009748:	460c      	mov	r4, r1
 800974a:	d904      	bls.n	8009756 <_raise_r+0x14>
 800974c:	2316      	movs	r3, #22
 800974e:	6003      	str	r3, [r0, #0]
 8009750:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009754:	bd38      	pop	{r3, r4, r5, pc}
 8009756:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009758:	b112      	cbz	r2, 8009760 <_raise_r+0x1e>
 800975a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800975e:	b94b      	cbnz	r3, 8009774 <_raise_r+0x32>
 8009760:	4628      	mov	r0, r5
 8009762:	f000 f831 	bl	80097c8 <_getpid_r>
 8009766:	4622      	mov	r2, r4
 8009768:	4601      	mov	r1, r0
 800976a:	4628      	mov	r0, r5
 800976c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009770:	f000 b818 	b.w	80097a4 <_kill_r>
 8009774:	2b01      	cmp	r3, #1
 8009776:	d00a      	beq.n	800978e <_raise_r+0x4c>
 8009778:	1c59      	adds	r1, r3, #1
 800977a:	d103      	bne.n	8009784 <_raise_r+0x42>
 800977c:	2316      	movs	r3, #22
 800977e:	6003      	str	r3, [r0, #0]
 8009780:	2001      	movs	r0, #1
 8009782:	e7e7      	b.n	8009754 <_raise_r+0x12>
 8009784:	2100      	movs	r1, #0
 8009786:	4620      	mov	r0, r4
 8009788:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800978c:	4798      	blx	r3
 800978e:	2000      	movs	r0, #0
 8009790:	e7e0      	b.n	8009754 <_raise_r+0x12>
	...

08009794 <raise>:
 8009794:	4b02      	ldr	r3, [pc, #8]	@ (80097a0 <raise+0xc>)
 8009796:	4601      	mov	r1, r0
 8009798:	6818      	ldr	r0, [r3, #0]
 800979a:	f7ff bfd2 	b.w	8009742 <_raise_r>
 800979e:	bf00      	nop
 80097a0:	2000018c 	.word	0x2000018c

080097a4 <_kill_r>:
 80097a4:	b538      	push	{r3, r4, r5, lr}
 80097a6:	2300      	movs	r3, #0
 80097a8:	4d06      	ldr	r5, [pc, #24]	@ (80097c4 <_kill_r+0x20>)
 80097aa:	4604      	mov	r4, r0
 80097ac:	4608      	mov	r0, r1
 80097ae:	4611      	mov	r1, r2
 80097b0:	602b      	str	r3, [r5, #0]
 80097b2:	f7f8 fc6e 	bl	8002092 <_kill>
 80097b6:	1c43      	adds	r3, r0, #1
 80097b8:	d102      	bne.n	80097c0 <_kill_r+0x1c>
 80097ba:	682b      	ldr	r3, [r5, #0]
 80097bc:	b103      	cbz	r3, 80097c0 <_kill_r+0x1c>
 80097be:	6023      	str	r3, [r4, #0]
 80097c0:	bd38      	pop	{r3, r4, r5, pc}
 80097c2:	bf00      	nop
 80097c4:	200004b0 	.word	0x200004b0

080097c8 <_getpid_r>:
 80097c8:	f7f8 bc5c 	b.w	8002084 <_getpid>

080097cc <_init>:
 80097cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ce:	bf00      	nop
 80097d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097d2:	bc08      	pop	{r3}
 80097d4:	469e      	mov	lr, r3
 80097d6:	4770      	bx	lr

080097d8 <_fini>:
 80097d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097da:	bf00      	nop
 80097dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097de:	bc08      	pop	{r3}
 80097e0:	469e      	mov	lr, r3
 80097e2:	4770      	bx	lr
